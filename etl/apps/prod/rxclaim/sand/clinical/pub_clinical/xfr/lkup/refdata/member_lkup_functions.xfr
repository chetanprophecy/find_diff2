/******************************************************************************************************************************************
 * pub_clinical -> $PUB_CLINICAL_LKUP_XFR/refdata/member_lkup_functions.xfr
 * 
 * Change Log:
 * 
 *  Date        Author                  Description
 * ---------------------------------------------------------------------------------------------------------------------------------------
 *  2016/10/10  Mohd Shadab             Modified the mbr file name and key
 *  2016/10/11  Paul Thompson           Switched to cli_hash_lkup_types.dml
 *                                      Added get functions and global lookup variables
 ******************************************************************************************************************************************/

include "~$PUB_CLINICAL_DML/cli_msg_types.dml";
include "~$PUB_CLINICAL_DML/cli_hash_lkup_types.dml";

constant cli_string_t PUB_CLINICAL_MFS_LOOKUP parameter;

cli_string_t out :: get_member_lkup_path() inline =
begin
  out :: PUB_CLINICAL_MFS_LOOKUP + '/cli_mbr.dat';
end;

/************************************************/
/* Therapeutic Class Lookup (ids surrogate key) */
/************************************************/

type member_lkup_t =
record
  lookup_identifier_type  id             = -1; 
  mbr_hash_lkup_t         RecordFormat() = allocate_with_defaults();
  string('')              key()          = {mbr.cli_carrier_id; mbr.cli_carrier_acct_id; mbr.cli_employer_group_id; mbr.mbr_id};
  
  // Optional function field. This an example technical repository
  // location referenced using dollar substitution in PDL.
  // You can specify a different technical repository location.
  //string('') eme_dataset_location() = "$DATA_LOOKUP/lookup.dat"; 
end;

let member_lkup_t GLKUP_MEMBER = allocate_with_nulls();

member_lkup_t out :: load_member_lkup() inline =
begin
  if (GLKUP_MEMBER.id == lookup_not_loaded())
    GLKUP_MEMBER = lookup_load(this_partition_path(get_member_lkup_path()));
  
  out :: GLKUP_MEMBER;
end;

mbr_t out :: get_mbr(cli_carrier_id, cli_carrier_acct_id, cli_employer_group_id, mbr_id) inline =
begin
  let member_lkup_t lkup = load_member_lkup();
  out :: lookup(lkup, cli_carrier_id, cli_carrier_acct_id, cli_employer_group_id, mbr_id).mbr;
end;
