/******************************************************************************************************************************************
 * pub_clinical -> $PUB_CLINICAL_LKUP_XFR/refdata/product_class_lkup_functions.xfr
 * 
 * Change Log:
 * 
 *  Date        Author                  Description
 * ---------------------------------------------------------------------------------------------------------------------------------------
 *  2016/08/29  Sundari Kala            Initial version
 *  2016/10/11  Paul Thompson           Switched to cli_hash_lkup_types.dml
 *                                      Added get functions and global lookup variables
 *  2016/11/11  Paul Thompson           Removed cli_ from lookup file prefix, shifted to PUB_CLINICAL_MFS_REFDATA
 *                                      Added usage of indexes and support for using functions on serial node
 ******************************************************************************************************************************************/

include "~$PUB_CLINICAL_DML/cli_msg_types.dml";
include "~$PUB_CLINICAL_DML/cli_hash_lkup_types.dml";

constant cli_string_t  PUB_CLINICAL_SERIAL_REFDATA  parameter;
constant cli_string_t  PUB_CLINICAL_MFS_REFDATA     parameter;

cli_string_t out :: get_product_lkup_path() inline =
begin
  out :1: if (this_partition() == -1) PUB_CLINICAL_SERIAL_REFDATA + '/product.dat';
  out  ::        this_partition_path( PUB_CLINICAL_MFS_REFDATA    + '/product.dat' );
end;

cli_string_t out :: get_product_indx_path(cli_string_t lkup_path, cli_string_t index_nm) inline =
begin
  out :1: re_replace(lkup_path, '\\.dat$', '.' + index_nm + '.idx');
end;

/******************/
/* Product Lookup */
/******************/

type product_lkup_t =
record
  lookup_identifier_type  id             = -1; 
  product_hash_lkup_t     RecordFormat() = allocate_with_defaults();
  string('')              key()          = {product.product_id; product.product_id_qlfr_cd};
  
  // Optional function field. This an example technical repository
  // location referenced using dollar substitution in PDL.
  // You can specify a different technical repository location.
//string('') eme_dataset_location() = "$DATA_LOOKUP/lookup.dat"; 
end;

let product_lkup_t GLKUP_PRODUCT = allocate_with_nulls();

product_lkup_t out :: load_product_lkup() inline =
begin
  if (GLKUP_PRODUCT.id == lookup_not_loaded())
  begin
    let lkup_path  = get_product_lkup_path();
    let indx_path  = get_product_indx_path(lkup_path, 'product');
    let indx_found = file_information(indx_path).found;
    
    GLKUP_PRODUCT = if (indx_found) lookup_load(lkup_path, indx_path)
                    else            lookup_load(lkup_path);
  end;
  
  out :: GLKUP_PRODUCT;
end;

product_t out :: get_product(product_id, product_id_qlfr_cd) inline =
begin
  let lkup = load_product_lkup();
  out :: lookup(lkup, product_id, product_id_qlfr_cd).product;
end;

/**************************************/
/* Product Lookup - CLI Surrogate Key */
/**************************************/

type product_by_sk_lkup_t =
record
  lookup_identifier_type  id             = -1; 
  product_hash_lkup_t     RecordFormat() = allocate_with_defaults();
  string('')              key()          = {product.drug_product_id};
  
  // Optional function field. This an example technical repository
  // location referenced using dollar substitution in PDL.
  // You can specify a different technical repository location.
//string('') eme_dataset_location() = "$DATA_LOOKUP/lookup.dat"; 
end;

let product_by_sk_lkup_t GLKUP_PRODUCT_BY_SK = allocate_with_nulls();

product_by_sk_lkup_t out :: load_product_by_sk_lkup() inline =
begin
  if (GLKUP_PRODUCT_BY_SK.id == lookup_not_loaded())
  begin
    let lkup_path  = get_product_lkup_path();
    let indx_path  = get_product_indx_path(lkup_path, 'by_sk');
    let indx_found = file_information(indx_path).found;
    
    GLKUP_PRODUCT_BY_SK = if (indx_found) lookup_load(lkup_path, indx_path)
                          else            lookup_load(lkup_path);
  end;
  
  out :: GLKUP_PRODUCT_BY_SK;
end;

product_t out :: get_product_by_sk(drug_product_id) inline =
begin
  let lkup = load_product_by_sk_lkup();
  out :: lookup(lkup, drug_product_id).product;
end;
