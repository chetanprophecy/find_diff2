/******************************************************************************************************************************************
 * pub_clinical -> $PUB_CLINICAL_LKUP_XFR/refdata/contract_pbp_lkup_functions.xfr
 * 
 * Change Log:
 * 
 *  Date        Author                  Description
 * ---------------------------------------------------------------------------------------------------------------------------------------
 *  2016/11/12  Paul Thompson           Initial version
 ******************************************************************************************************************************************/

include "~$PUB_CLINICAL_DML/cli_msg_types.dml";
include "~$PUB_CLINICAL_DML/cli_hash_lkup_types.dml";

constant cli_string_t  PUB_CLINICAL_SERIAL_REFDATA  parameter;
constant cli_string_t  PUB_CLINICAL_MFS_REFDATA     parameter;

cli_string_t out :: get_contract_pbp_lkup_path() inline =
begin
  out :1: if (this_partition() == -1) PUB_CLINICAL_SERIAL_REFDATA + '/contract_pbp.dat';
  out  ::        this_partition_path( PUB_CLINICAL_MFS_REFDATA    + '/contract_pbp.dat' );
end;

cli_string_t out :: get_contract_pbp_indx_path(cli_string_t lkup_path, cli_string_t index_nm) inline =
begin
  out :1: re_replace(lkup_path, '\\.dat$', '.' + index_nm + '.idx');
end;

/*******************************************/
/* Source Environment Lookup (natural key) */
/*******************************************/

type contract_pbp_lkup_t =
record
  lookup_identifier_type    id             = -1; 
  contract_pbp_hash_lkup_t  RecordFormat() = allocate_with_defaults();
  string('')                key()          = {contract_pbp.carrier_id; contract_pbp.account_id; contract_pbp.employer_group_id; contract_pbp.plan_cd; contract_pbp.sequence_no};
  
  // Optional function field. This an example technical repository
  // location referenced using dollar substitution in PDL.
  // You can specify a different technical repository location.
  //string('') eme_dataset_location() = "$DATA_LOOKUP/lookup.dat"; 
end;

let contract_pbp_lkup_t GLKUP_CONTRACT_PBP = allocate_with_nulls();

contract_pbp_lkup_t out :: load_contract_pbp_lkup() inline =
begin
  if (GLKUP_CONTRACT_PBP.id == lookup_not_loaded())
  begin
    let lkup_path  = get_contract_pbp_lkup_path();
    let indx_path  = get_contract_pbp_indx_path(lkup_path, 'contract_pbp');
    let indx_found = file_information(indx_path).found;
    
    GLKUP_CONTRACT_PBP = if (indx_found) lookup_load(lkup_path, indx_path)
                         else            lookup_load(lkup_path);
  end;
  
  out :: GLKUP_CONTRACT_PBP;
end;

contract_pbp_t out :: get_contract_pbp(carrier_id, account_id, employer_group_id, plan_cd, sequence_no) inline =
begin
  let contract_pbp_lkup_t lkup = load_contract_pbp_lkup();
  out :: lookup(lkup, carrier_id, account_id, employer_group_id, plan_cd, sequence_no).contract_pbp;
end;
