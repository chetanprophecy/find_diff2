/******************************************************************************************************************************************
 * pub_clinical -> $PUB_CLINICAL_LKUP_XFR/refdata/carrier_acct_lkup_functions.xfr
 * 
 * Change Log:
 * 
 *  Date        Author                  Description
 * ---------------------------------------------------------------------------------------------------------------------------------------
 *  2016/08/10  Paul Thompson           Initial version
 *  2016/08/25  Gaurav Mirje            Added load_ids_carrier_acct_sk_lkup function and ids_carrier_acct_sk_lkup_t to fetch the
 *                                      cli_carrier_acct based on ids_src_env_sk ids_carrier_sk ids_carrier_acct_sk.
 *  2016/10/11  Paul Thompson           Switched to cli_hash_lkup_types.dml
 *                                      Added get functions and global lookup variables
 *  2016/11/11  Paul Thompson           Removed cli_ from lookup file prefix, shifted to PUB_CLINICAL_MFS_REFDATA
 *  2016/11/12  Paul Thompson           Added usage of indexes (when available) and also lookups on serial partitions
 *  2016/11/17  Paul Thompson           Fixed carrier_acct_lkup_t, added carrier_id to key
 ******************************************************************************************************************************************/

include "~$PUB_CLINICAL_DML/cli_msg_types.dml";
include "~$PUB_CLINICAL_DML/cli_hash_lkup_types.dml";

constant cli_string_t  PUB_CLINICAL_SERIAL_REFDATA  parameter;
constant cli_string_t  PUB_CLINICAL_MFS_REFDATA     parameter;

cli_string_t out :: get_carrier_acct_lkup_path() inline =
begin
  out :1: if (this_partition() == -1) PUB_CLINICAL_SERIAL_REFDATA + '/carrier_acct.dat';
  out  ::        this_partition_path( PUB_CLINICAL_MFS_REFDATA    + '/carrier_acct.dat' );
end;

cli_string_t out :: get_carrier_acct_indx_path(cli_string_t lkup_path, cli_string_t index_nm) inline =
begin
  out :1: re_replace(lkup_path, '\\.dat$', '.' + index_nm + '.idx');
end;

/****************************************/
/* Carrier Account Lookup (natural key) */
/****************************************/

type carrier_acct_lkup_t =
record
  lookup_identifier_type    id             = -1; 
  carrier_acct_hash_lkup_t  RecordFormat() = allocate_with_defaults();
  string('')                key()          = {carrier_acct.carrier_id; carrier_acct.carrier_acct_id};
  
  // Optional function field. This an example technical repository
  // location referenced using dollar substitution in PDL.
  // You can specify a different technical repository location.
//string('') eme_dataset_location() = "$DATA_LOOKUP/lookup.dat"; 
end;

let carrier_acct_lkup_t GLKUP_CARRIER_ACCT = allocate_with_nulls();

carrier_acct_lkup_t out :: load_carrier_acct_lkup() inline =
begin
  if (GLKUP_CARRIER_ACCT.id == lookup_not_loaded())
  begin
    let lkup_path  = get_carrier_acct_lkup_path();
    let indx_path  = get_carrier_acct_indx_path(lkup_path, 'carrier_acct');
    let indx_found = file_information(indx_path).found;
    
    GLKUP_CARRIER_ACCT = if (indx_found) lookup_load(lkup_path, indx_path)
                         else            lookup_load(lkup_path);
  end;
  
  out :: GLKUP_CARRIER_ACCT;
end;

carrier_acct_t out :: get_carrier_acct(carrier_id, carrier_acct_id) inline =
begin
  let carrier_acct_lkup_t lkup = load_carrier_acct_lkup();
  out :: lookup(lkup, carrier_id, carrier_acct_id).carrier_acct;
end;

/******************************************/
/* Carrier Account Lookup (surrogate key) */
/******************************************/

type carrier_acct_sk_lkup_t =
record
  lookup_identifier_type    id             = -1; 
  carrier_acct_hash_lkup_t  RecordFormat() = allocate_with_defaults();
  string('')                key()          = {carrier_acct.cli_carrier_acct_id}; 
  
  // Optional function field. This an example technical repository
  // location referenced using dollar substitution in PDL.
  // You can specify a different technical repository location.
//string('') eme_dataset_location() = "$DATA_LOOKUP/lookup.dat"; 
end;

let carrier_acct_sk_lkup_t GLKUP_CARRIER_ACCT_SK = allocate_with_nulls();

carrier_acct_sk_lkup_t out :: load_carrier_acct_sk_lkup() inline =
begin
  if (GLKUP_CARRIER_ACCT_SK.id == lookup_not_loaded())
  begin
    let lkup_path  = get_carrier_acct_lkup_path();
    let indx_path  = get_carrier_acct_indx_path(lkup_path, 'carrier_acct_sk');
    let indx_found = file_information(indx_path).found;
    
    GLKUP_CARRIER_ACCT_SK = if (indx_found) lookup_load(lkup_path, indx_path)
                            else            lookup_load(lkup_path);
  end;
  
  out :: GLKUP_CARRIER_ACCT_SK;
end;

carrier_acct_t out :: get_carrier_acct_by_sk(cli_carrier_acct_id) inline =
begin
  let carrier_acct_sk_lkup_t lkup = load_carrier_acct_sk_lkup();
  out :: lookup(lkup, cli_carrier_acct_id).carrier_acct;
end;

/********************************************************/
/* Carrier Account Lookup (hierarchical surrogate keys) */
/********************************************************/

type carrier_acct_hier_sk_lkup_t =
record
  lookup_identifier_type    id             = -1; 
  carrier_acct_hash_lkup_t  RecordFormat() = allocate_with_defaults();
  string('')                key()          = {carrier_acct.cli_carrier_id; carrier_acct.cli_carrier_acct_id}; 
  
  // Optional function field. This an example technical repository
  // location referenced using dollar substitution in PDL.
  // You can specify a different technical repository location.
//string('') eme_dataset_location() = "$DATA_LOOKUP/lookup.dat"; 
end;

let carrier_acct_hier_sk_lkup_t GLKUP_CARRIER_ACCT_HIER_SK = allocate_with_nulls();

carrier_acct_hier_sk_lkup_t out :: load_carrier_acct_hier_sk_lkup() inline =
begin
  if (GLKUP_CARRIER_ACCT_HIER_SK.id == lookup_not_loaded())
  begin
    let lkup_path  = get_carrier_acct_lkup_path();
    let indx_path  = get_carrier_acct_indx_path(lkup_path, 'carrier_acct_hier_sk');
    let indx_found = file_information(indx_path).found;
    
    GLKUP_CARRIER_ACCT_HIER_SK = if (indx_found) lookup_load(lkup_path, indx_path)
                                 else            lookup_load(lkup_path);
  end;
  
  out :: GLKUP_CARRIER_ACCT_HIER_SK;
end;

carrier_acct_t out :: get_carrier_acct_by_hier_sk(cli_carrier_id, cli_carrier_acct_id) inline =
begin
  let carrier_acct_hier_sk_lkup_t lkup = load_carrier_acct_hier_sk_lkup();
  out :: lookup(lkup, cli_carrier_id, cli_carrier_acct_id).carrier_acct;
end;

