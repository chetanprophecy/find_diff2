/******************************************************************************************************************************************
 * pub_clinical -> $PUB_CLINICAL_LKUP_XFR/refdata/cag_lkup_functions.xfr
 * 
 * Change Log:
 * 
 *  Date        Author                  Description
 * ---------------------------------------------------------------------------------------------------------------------------------------
 *  2016/08/10  Paul Thompson           Initial version
 *  2016/10/11  Paul Thompson           Switched to cli_hash_lkup_types.dml
 *                                      Added get functions and global lookup variables
 *  2016/11/11  Paul Thompson           Removed cli_ from lookup file prefix, shifted to PUB_CLINICAL_[MFS/SERIAL]_REFDATA
 *  2016/11/11  Paul Thompson           Added usage of indexes (when available) and also lookups on serial partitions
 ******************************************************************************************************************************************/

include "~$PUB_CLINICAL_DML/cli_msg_types.dml";
include "~$PUB_CLINICAL_DML/cli_hash_lkup_types.dml";

constant cli_string_t  PUB_CLINICAL_SERIAL_REFDATA  parameter;
constant cli_string_t  PUB_CLINICAL_MFS_REFDATA     parameter;

cli_string_t out :: get_cag_lkup_path() inline =
begin
  out :1: if (number_of_partitions() == 1) PUB_CLINICAL_SERIAL_REFDATA + '/cag.dat';
  out  ::        this_partition_path( PUB_CLINICAL_MFS_REFDATA    + '/cag.dat' );
end;

cli_string_t out :: get_cag_indx_path(cli_string_t lkup_path, cli_string_t index_nm) inline =
begin
  out :1: re_replace(lkup_path, '\\.dat$', '.' + index_nm + '.idx');
end;

/****************************/
/* CAG Lookup (natural key) */
/****************************/

type cag_lkup_t =
record
  lookup_identifier_type  id             = -1;
  cag_hash_lkup_t         RecordFormat() = allocate_with_defaults();
  string('')              key()          = {cag.carrier_id; cag.carrier_acct_id; cag.employer_group_id};
  
  // Optional function field. This an example technical repository
  // location referenced using dollar substitution in PDL.
  // You can specify a different technical repository location.
//string('') eme_dataset_location() = "$DATA_LOOKUP/lookup.dat"; 
end;

let cag_lkup_t GLKUP_CAG = allocate_with_nulls();

cag_lkup_t out :: load_cag_lkup() inline =
begin
  if (GLKUP_CAG.id == lookup_not_loaded())
  begin
    let lkup_path  = get_cag_lkup_path();
    let indx_path  = get_cag_indx_path(lkup_path, 'cag');
    let indx_found = file_information(indx_path).found;
    
    GLKUP_CAG = if (indx_found) lookup_load(lkup_path, indx_path)
                else            lookup_load(lkup_path);
  end;
  
  out :: GLKUP_CAG;
end;

cag_t out :: get_cag(carrier_id, carrier_acct_id, employer_group_id) inline =
begin
  let cag_lkup_t lkup = load_cag_lkup();
  out :: lookup(lkup, carrier_id, carrier_acct_id, employer_group_id).cag;
end;

/******************************/
/* CAG Lookup (surrogate key) */
/******************************/

type cag_sk_lkup_t =
record
  lookup_identifier_type  id             = -1; 
  cag_hash_lkup_t         RecordFormat() = allocate_with_defaults();
  string('')              key()          = {cag.cli_cag_id}; 
  
  // Optional function field. This an example technical repository
  // location referenced using dollar substitution in PDL.
  // You can specify a different technical repository location.
//string('') eme_dataset_location() = "$DATA_LOOKUP/lookup.dat"; 
end;

let cag_sk_lkup_t GLKUP_CAG_SK = allocate_with_nulls();

cag_sk_lkup_t out :: load_cag_sk_lkup() inline =
begin
  if (GLKUP_CAG_SK.id == lookup_not_loaded())
  begin
    let lkup_path  = get_cag_lkup_path();
    let indx_path  = get_cag_indx_path(lkup_path, 'cag_sk');
    let indx_found = file_information(indx_path).found;
    
    GLKUP_CAG_SK = if (indx_found) lookup_load(lkup_path, indx_path)
                   else            lookup_load(lkup_path);
  end;
  
  out :: GLKUP_CAG_SK;
end;

cag_t out :: get_cag_by_sk(cli_cag_id) inline =
begin
  let cag_sk_lkup_t lkup = load_cag_sk_lkup();
  out :: lookup(lkup, cli_cag_id).cag;
end;

/********************************************/
/* CAG Lookup (hierarchical surrogate keys) */
/********************************************/

type cag_hier_sk_lkup_t =
record
  lookup_identifier_type  id             = -1; 
  cag_hash_lkup_t         RecordFormat() = allocate_with_defaults();
  string('')              key()          = { cag.cli_carrier_id; cag.cli_carrier_acct_id; cag.cli_employer_group_id}; 
  
  // Optional function field. This an example technical repository
  // location referenced using dollar substitution in PDL.
  // You can specify a different technical repository location.
//string('') eme_dataset_location() = "$DATA_LOOKUP/lookup.dat"; 
end;

let cag_hier_sk_lkup_t GLKUP_CAG_HIER_SK = allocate_with_nulls();

cag_hier_sk_lkup_t out :: load_cag_hier_sk_lkup() inline =
begin
  if (GLKUP_CAG_HIER_SK.id == lookup_not_loaded())
  begin
    let lkup_path  = get_cag_lkup_path();
    let indx_path  = get_cag_indx_path(lkup_path, 'cag_hier_sk');
    let indx_found = file_information(indx_path).found;
    
    GLKUP_CAG_HIER_SK = if (indx_found) lookup_load(lkup_path, indx_path)
                        else            lookup_load(lkup_path);
  end;
  
  out :: GLKUP_CAG_HIER_SK;
end;

cag_t out :: get_cag_by_hier_sk(cli_carrier_id, cli_carrier_acct_id, cli_employer_group_id) inline =
begin
  let cag_hier_sk_lkup_t lkup = load_cag_hier_sk_lkup();
  out :: lookup(lkup, cli_carrier_id, cli_carrier_acct_id, cli_employer_group_id).cag;
end;
