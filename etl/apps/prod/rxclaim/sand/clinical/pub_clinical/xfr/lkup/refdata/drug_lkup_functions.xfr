/******************************************************************************************************************************************
 * pub_clinical -> $PUB_CLINICAL_LKUP_XFR/refdata/drug_lkup_functions.xfr
 * 
 * Change Log:
 * 
 *  Date        Author                  Description
 * ---------------------------------------------------------------------------------------------------------------------------------------
 *  2016/11/12  Paul Thompson           Initial version
 ******************************************************************************************************************************************/

include "~$PUB_CLINICAL_DML/cli_msg_types.dml";
include "~$PUB_CLINICAL_DML/cli_hash_lkup_types.dml";

constant cli_string_t  PUB_CLINICAL_SERIAL_REFDATA  parameter;
constant cli_string_t  PUB_CLINICAL_MFS_REFDATA     parameter;

cli_string_t out :: get_drug_lkup_path() inline =
begin
  out :1: if (this_partition() == -1) PUB_CLINICAL_SERIAL_REFDATA + '/drug.dat';
  out  ::        this_partition_path( PUB_CLINICAL_MFS_REFDATA    + '/drug.dat' );
end;

cli_string_t out :: get_drug_indx_path(cli_string_t lkup_path, cli_string_t index_nm) inline =
begin
  out :1: re_replace(lkup_path, '\\.dat$', '.' + index_nm + '.idx');
end;

/************************************************/
/* DRUG Lookup (ids surrogate key) */
/************************************************/

type drug_lkup_t =
record
  lookup_identifier_type  id             = -1; 
  drug_hash_lkup_t         RecordFormat() = allocate_with_defaults();
  string('')              key()          = {drug.drug_nm_extn_id};
  
  // Optional function field. This an example technical repository
  // location referenced using dollar substitution in PDL.
  // You can specify a different technical repository location.
  //string('') eme_dataset_location() = "$DATA_LOOKUP/lookup.dat"; 
end;

let drug_lkup_t GLKUP_DRUG = allocate_with_nulls();

drug_lkup_t out :: load_drug_lkup() inline =
begin
  if (GLKUP_DRUG.id == lookup_not_loaded())
  begin
    let lkup_path  = get_drug_lkup_path();
    let indx_path  = get_drug_indx_path(lkup_path, 'drug');
    let indx_found = file_information(indx_path).found;
    
    GLKUP_DRUG = if (indx_found) lookup_load(lkup_path, indx_path)
                 else            lookup_load(lkup_path);
  end;
  
  out :: GLKUP_DRUG;
end;

drug_t out :: get_drug(drug_nm_extn_id) inline =
begin
  let drug_lkup_t lkup = load_drug_lkup();
  out :: lookup(lkup, drug_nm_extn_id).drug;
end;
