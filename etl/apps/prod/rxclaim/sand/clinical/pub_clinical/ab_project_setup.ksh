# DO NOT EDIT THIS FILE
# This file is automatically generated by the Ab Initio Graphical Development Environment.
# 
# USAGE
#        . ab_project_setup.ksh $PWD
#        . <pathname_of_sandbox>/ab_project_setup.ksh <pathname_of_sandbox>
# 
# DESCRIPTION
#        This script allows other scripts to get access to the parameters of the sandbox.

# Begin Ab Initio script guard top
: ${_ab_uname:=`uname`}
# Make sure we are in ksh.
if whence print > /dev/null 2>&1; then
# End Ab Initio script guard top
# Begin Ab Initio shell utility functions

: ${_ab_uname:=`uname`}

function __AB_INVOKE_PROJECT
{
  export __AB_PROJECT_INVOKED=true
  typeset _AB_PROJECT_KSH="$1" ; shift
  typeset _AB_PROJECT_DIR="$1" ; shift
  typeset _AB_DEFINE_OR_EXECUTE="$1" ; shift
  typeset _AB_START_OR_END="$1" ; shift
  # Check that the project exists:
  if [ ! -r "$_AB_PROJECT_KSH" ] ; then
    print -r -u2 Warning: Cannot find common sandbox script: "$_AB_PROJECT_KSH"
    if [ ! -z "${_AB_CALLING_PROJECT:=}" ] ; then
      print -r -u2 Please check the common sandbox settings for the calling project: "$_AB_CALLING_PROJECT"
    fi
  fi
  if [ $# -gt 0 ] ; then
    . "$_AB_PROJECT_KSH" "$_AB_PROJECT_DIR" "$_AB_DEFINE_OR_EXECUTE" "$_AB_START_OR_END"  "$@"
  else
    . "$_AB_PROJECT_KSH" "$_AB_PROJECT_DIR" "$_AB_DEFINE_OR_EXECUTE" "$_AB_START_OR_END" 
  fi;
}

function __AB_DOTIT
{
  if [ $# -gt 0 ] ; then
    .  "$@"
  fi
}

function __AB_QUOTEIT {
  typeset queue q qq qed lotsaqs s trail
  q="'"
  qq='"'
  if [ X"$1" = X"" ] ; then
    print $q$q
    return
  fi
  lotsaqs=${q}${qq}${q}${qq}${q}
  if [ ${#1} -ge 10000 ]; then
    print -r -- "$1" | sed "s/$q/$lotsaqs/g; 1s/^/$q/; \$s/\$/$q/"
  else
    queue=${1%$q}
    if [ X"$queue" != X"$1" ] ; then
      trail="${qq}${q}${qq}" 
    else 
      trail=""
    fi
    oldIFS="$IFS"
    IFS=$q
    set -- $queue
    IFS="$oldIFS"
    print -rn "$q$1"
    shift
    for s; do
      print -rn "$lotsaqs$s"
    done
    print -r $q$trail
  fi
}

function __AB_dirname {
    case $_ab_uname in
    Windows_* | CYGWIN_* )
        typeset d='' p="$1"
        # Strip drive letter colon, if present, and put it into d.
        case $p in
        [A-Za-z]:* )
            d=${p%%:*}:
            p=${p#??}
            ;;
        esac
        # Remove trailing separators, though not the last character in the
        # pathname.
        while : true; do
            case $p in
            ?*[/\\] )
                p=${p%[/\\]} ;;
            * )
                break ;;
            esac
        done
        if [[ "$p" = ?*[/\\]* ]] ; then
            print -r -- "$d${p%[/\\]*}"
        elif [[ "$p" = [/\\]* ]] ; then
            print "$d/"
        else
            print "$d." 
        fi
        ;;
    * ) # Unix
        typeset p="$1"
        # Remove trailing separators, though not the last character in the
        # pathname.
        while : true; do
            case $p in
            ?*/ )
                p="${p%/}" ;;
            * )
                break ;;
            esac
        done
        case $p in
        ?*/* )
            print -r -- "${p%/*}" ;;
        /* )
            print / ;;
        * )
            print . ;;
        esac
        ;;
    esac
}

function __AB_concat_pathname {
    case $_ab_uname in
    Windows_* | CYGWIN_* )
        # Does not handle all cases of concatenating partially absolute
        # pathnames, those with only one of a drive letter or an initial
        # separator.
        case $2 in
        [/\\]* | [A-Za-z]:* )
            print -r -- "$2"
            ;;
        * )
            case $1 in
            # Assume that empty string means ".".  Avoid adding a
            # redundant separator.
            '' | *[/\\] )
                print -r -- "$1$2" ;;
            * )
                print -r -- "$1/$2" ;;
            esac
            ;;
        esac
        ;;
    * ) # Unix
        case $2 in
        /* )
            print -r -- "$2"
            ;;
        * )
            case $1 in
            # Assume that empty string means ".".  Avoid adding a
            # redundant separator.
            '' | */ )
                print -r -- "$1$2" ;;
            * )
                print -r -- "$1/$2" ;;
            esac
            ;;
        esac
        ;;
    esac
}

function __AB_COND {
if [ X"$1" = X0  -o X"$1" = Xfalse -o X"$1" = XFalse -o X"$1" = XF -o X"$1" = Xf ] ; then
  print "0"
else
  print "1"
fi
}

# End Ab Initio shell utility functions
export __AB_ERROR;__AB_ERROR=0
if [ X"${1}" != X"" ]; then
   export PUB_CLINICAL_DIR;   PUB_CLINICAL_DIR="${1}"
   shift
fi
if [ X"${PUB_CLINICAL_DIR:-}" = X"" ]; then
   print -r -- 'PUB_CLINICAL_DIR is undefined.  Pass its value as the first argument to this script'
   export __AB_ERROR;   __AB_ERROR=1
fi
case $_ab_uname in
CYGWIN_* )
   PUB_CLINICAL_DIR="${PUB_CLINICAL_DIR:+$(cygpath -m "$PUB_CLINICAL_DIR")}"
esac
if [ X"${__AB_ERROR}" != X1 ]; then
   _AB_CALLING_PROJECT=""
   if [ $# -gt 0 ]; then
      __AB_INVOKE_PROJECT "${PUB_CLINICAL_DIR}"/.project.ksh "${PUB_CLINICAL_DIR}" define start "$@"
   else
      __AB_INVOKE_PROJECT "${PUB_CLINICAL_DIR}"/.project.ksh "${PUB_CLINICAL_DIR}" define start
   fi
fi
# The following function undefines all of the current project variables
function unset_project_env {
   _AB_CALLING_PROJECT=""
   if [ $# -gt 0 ]; then
      __AB_INVOKE_PROJECT "${PUB_CLINICAL_DIR}"/.project.ksh "${PUB_CLINICAL_DIR}" undefine start "$@"
   else
      __AB_INVOKE_PROJECT "${PUB_CLINICAL_DIR}"/.project.ksh "${PUB_CLINICAL_DIR}" undefine start
   fi
};
# Begin Ab Initio script guard bottom
else
    case $_ab_uname in
        Windows_* | OS/390 ) _ab_good_shell=sh ;;
        * )                  _ab_good_shell=ksh ;;
    esac
    echo "The current shell${BASH:+ (bash)} is not supported; use $_ab_good_shell" >&2
    false    # Effectively return an error status from the dotted script
fi
# End Ab Initio script guard bottom
