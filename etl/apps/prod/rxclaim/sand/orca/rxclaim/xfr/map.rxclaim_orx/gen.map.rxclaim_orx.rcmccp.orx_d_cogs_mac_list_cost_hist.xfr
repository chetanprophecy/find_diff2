/*   Do not edit. Generated file - BRE 3.2.6.4;;Default deployment;   */
include '~$AI_XFR/bre_helper.map.xfr';
let string(int) bzt_0_6c54cc0a_59cdfe34_5e94_0 = $RUN_ID;

/*@
dependency_analysis:
[
  [out0.cost_hist.chg_tm,[transform],in0.kmabtm]
  [out0.cost_hist.chg_dt,[transform],in0.kmbmdt]
  [out0.cost_hist.mac_stat,[passthrough],in0.kmins2]
  [out0.cost_hist.mac_gpi,[passthrough],in0.kmvnc2]
  [out0.cost_hist.mac_list_cost_hist_sk,[transform],]
  [out0.cost_hist.chg_pgm_nm,[passthrough],in0.kmaevn]
  [out0.cost_hist.mac_ndc_pkg_cd,[passthrough],in0.kmvsc2]
  [out0.cost_hist.mac_thru_dt_ref,[transform],in0.kmjmdt]
  [out0.cost_hist.mac_ndc_labeler_id,[passthrough],in0.kmvqc2]
  [out0.cost_hist.car_carrier_id,[passthrough],in0.kmaacd]
  [out0.cost_hist.mac_from_dt_ref,[transform],in0.kmjldt]
  [out0.cost_hist.mac_cost1,[passthrough],in0.kmpwpr]
  [out0.cost_hist.mac_gppc,[passthrough],in0.kmvoc2]
  [out0.cost_hist.mac_from_dt,[transform],in0.kmjldt]
  [out0.cost_hist.mac_seq_nbr,[passthrough],in0.kmhzn1]
  [out0.cost_hist.add_dt,[transform],in0.kmc2dt]
  [out0.cost_hist.mac_thru_dt,[transform],in0.kmjmdt]
  [out0.cost_hist.mac_ndc_prod_cd,[passthrough],in0.kmvrc2]
  [out0.cost_hist.mac_list,[passthrough],in0.kmj5s2]
  [out0.cost_hist.chg_user_nm,[passthrough],in0.kmadvn]
  [out0.cost_hist.ndc11,[transform],in0.kmvsc2,
     in0.kmvrc2,
     in0.kmvqc2]
  [out0.cost_hist.src_env_sk,[passthrough],in0.dxf_src_sys_id]
  [out0.*,in0.*]
]
metrics:
{
  dependencies:
  [
     [out0.cost_hist.chg_tm,'cost_hist.chg_tm',1,0]
     [out0.cost_hist.chg_dt,'cost_hist.chg_dt',1,0]
     [out0.cost_hist.mac_stat,'cost_hist.mac_stat',1,0]
     [out0.cost_hist.mac_gpi,'cost_hist.mac_gpi',1,0]
     [out0.cost_hist.mac_list_cost_hist_sk,'cost_hist.mac_list_cost_hist_sk',1,0]
     [out0.cost_hist.chg_pgm_nm,'cost_hist.chg_pgm_nm',1,0]
     [out0.cost_hist.mac_ndc_pkg_cd,'cost_hist.mac_ndc_pkg_cd',1,0]
     [out0.cost_hist.mac_thru_dt_ref,'cost_hist.mac_thru_dt_ref',1,0]
     [out0.cost_hist.mac_ndc_labeler_id,'cost_hist.mac_ndc_labeler_id',1,0]
     [out0.cost_hist.car_carrier_id,'cost_hist.car_carrier_id',1,0]
     [out0.cost_hist.mac_from_dt_ref,'cost_hist.mac_from_dt_ref',1,0]
     [out0.cost_hist.mac_cost1,'cost_hist.mac_cost1',1,0]
     [out0.cost_hist.mac_gppc,'cost_hist.mac_gppc',1,0]
     [out0.dxf_src_rec_cnt,'DXF Source Record Count',1,0]
     [out0.cost_hist.mac_from_dt,'cost_hist.mac_from_dt',1,0]
     [out0.cost_hist.mac_seq_nbr,'cost_hist.mac_seq_nbr',1,0]
     [out0.dxf_src_sys_id,'DXF Source System ID',1,0]
     [out0.cost_hist.add_dt,'cost_hist.add_dt',1,0]
     [out0.cost_hist.mac_thru_dt,'cost_hist.mac_thru_dt',1,0]
     [out0.cost_hist.mac_ndc_prod_cd,'cost_hist.mac_ndc_prod_cd',1,0]
     [out0.dxf_src_file_name,'DXF Source File Name',1,0]
     [out0.cost_hist.mac_list,'cost_hist.mac_list',1,0]
     [out0.cost_hist.chg_user_nm,'cost_hist.chg_user_nm',1,0]
     [out0.cost_hist.ndc11,'cost_hist.ndc11',1,0]
     [out0.cost_hist.src_env_sk,'cost_hist.src_env_sk',1,0]
     [out0.dxf_src_dataset_id,'DXF Source Dataset ID',1,0]
  ]
  impacts:
  [
     [in0.kmvqc2,'kmvqc2',2,2]
     [in0.kmvnc2,'kmvnc2',1,1]
     [in0.kmins2,'kmins2',1,1]
     [in0.kmaacd,'kmaacd',1,1]
     [in0.kmaevn,'kmaevn',1,1]
     [in0.kmbmdt,'kmbmdt',1,1]
     [in0.kmc2dt,'kmc2dt',1,1]
     [in0.kmadvn,'kmadvn',1,1]
     [in0.dxf_src_dataset_id,'DXF Source Dataset ID',1,1]
     [in0.kmabtm,'kmabtm',1,1]
     [in0.kmvoc2,'kmvoc2',1,1]
     [in0.kmpwpr,'kmpwpr',1,1]
     [in0.kmvsc2,'kmvsc2',2,2]
     [in0.dxf_src_file_name,'DXF Source File Name',1,1]
     [in0.dxf_src_rec_cnt,'DXF Source Record Count',1,1]
     [in0.dxf_src_sys_id,'DXF Source System ID',2,2]
     [in0.kmjmdt,'kmjmdt',6,2]
     [in0.kmjldt,'kmjldt',5,2]
     [in0.kmhzn1,'kmhzn1',1,1]
     [in0.kmvrc2,'kmvrc2',2,2]
     [in0.kmj5s2,'kmj5s2',1,1]
  ]
}
@*/

out0::reformat(in0)=
begin
let decimal("\x01",0) cost_hist_mac_list_cost_hist_sk = -1;
let string("\x01",charset="iso-8859-15", maximum_length=30) cost_hist_car_carrier_id = fail_if_error(in0.kmaacd);
let string("\x01",charset="iso-8859-15", maximum_length=10) cost_hist_mac_list = fail_if_error(in0.kmj5s2);
let string("\x01",charset="iso-8859-15", maximum_length=14) cost_hist_mac_gpi = fail_if_error(in0.kmvnc2);
let string("\x01",charset="iso-8859-15", maximum_length=8) cost_hist_mac_gppc = fail_if_error(in0.kmvoc2);
let string("\x01",charset="iso-8859-15", maximum_length=5) cost_hist_mac_ndc_labeler_id = fail_if_error(in0.kmvqc2);
let string("\x01",charset="iso-8859-15", maximum_length=4) cost_hist_mac_ndc_prod_cd = fail_if_error(in0.kmvrc2);
let string("\x01",charset="iso-8859-15", maximum_length=2) cost_hist_mac_ndc_pkg_cd = fail_if_error(in0.kmvsc2);
let string("\x01",charset="iso-8859-15", maximum_length=11) cost_hist_ndc11 = fail_if_error(string_concat(str1= in0.kmvqc2, str2= in0.kmvrc2 , str3= in0.kmvsc2));
let decimal("\x01",0, maximum_length=6, sign_reserved) cost_hist_mac_seq_nbr = fail_if_error(in0.kmhzn1);
let string("\x01",charset="iso-8859-15", maximum_length=1) cost_hist_mac_stat = fail_if_error(in0.kmins2);
let date("YYYYMMDD")("\x01") cost_hist_mac_from_dt;
let decimal("\x01",0) cost_hist_mac_from_dt_ref = fail_if_error((if (sql_and((string_length(string_lrtrim(in0.kmjldt)) member [vector 8]),is_valid(((date("YYYYMMDD"))string_lrtrim(in0.kmjldt)))))
   in0.kmjldt
 else
   ((decimal(""))(in0.kmjldt+19000000))));
let date("YYYYMMDD")("\x01") cost_hist_mac_thru_dt;
let decimal("\x01",0) cost_hist_mac_thru_dt_ref = fail_if_error((if (sql_and((string_length(string_lrtrim(in0.kmjmdt)) member [vector 8]),is_valid(((date("YYYYMMDD"))string_lrtrim(in0.kmjmdt)))))
   in0.kmjmdt
 else
   ((decimal(""))(in0.kmjmdt+19000000))));
let decimal("\x01".5, maximum_length=17, sign_reserved) cost_hist_mac_cost1 = fail_if_error(in0.kmpwpr);
let date("YYYYMMDD")("\x01") cost_hist_add_dt;
let string("\x01",charset="iso-8859-15", maximum_length=10) cost_hist_chg_user_nm = fail_if_error(in0.kmadvn);
let date("YYYYMMDD")("\x01") cost_hist_chg_dt;
let datetime("HH24:MI:SS.NNNNNN")("\x01") cost_hist_chg_tm;
let string("\x01",charset="iso-8859-15", maximum_length=10) cost_hist_chg_pgm_nm = fail_if_error(in0.kmaevn);
let decimal("\x01",0) cost_hist_src_env_sk = fail_if_error(in0.dxf_src_sys_id);



/*   Default value   */
cost_hist_chg_tm=fail_if_error(time_check(in0.kmabtm));

/*   Default value   */
cost_hist_chg_dt=fail_if_error(date_check(in0.kmbmdt));

/*   Default value   */
cost_hist_mac_from_dt=fail_if_error(date_check(in0.kmjldt));

/*   Default value   */
cost_hist_add_dt=fail_if_error(date_check(in0.kmc2dt));

/*   Default value   */
cost_hist_mac_thru_dt=fail_if_error(if(date_check(in0.kmjmdt) == '19000101') (date("YYYYMMDD")) "99991231" else date_check(in0.kmjmdt));

  out0.cost_hist.mac_list_cost_hist_sk::cost_hist_mac_list_cost_hist_sk;
  out0.cost_hist.car_carrier_id::cost_hist_car_carrier_id;
  out0.cost_hist.mac_list::cost_hist_mac_list;
  out0.cost_hist.mac_gpi::cost_hist_mac_gpi;
  out0.cost_hist.mac_gppc::cost_hist_mac_gppc;
  out0.cost_hist.mac_ndc_labeler_id::cost_hist_mac_ndc_labeler_id;
  out0.cost_hist.mac_ndc_prod_cd::cost_hist_mac_ndc_prod_cd;
  out0.cost_hist.mac_ndc_pkg_cd::cost_hist_mac_ndc_pkg_cd;
  out0.cost_hist.ndc11::cost_hist_ndc11;
  out0.cost_hist.mac_seq_nbr::cost_hist_mac_seq_nbr;
  out0.cost_hist.mac_stat::cost_hist_mac_stat;
  out0.cost_hist.mac_from_dt::cost_hist_mac_from_dt;
  out0.cost_hist.mac_from_dt_ref::cost_hist_mac_from_dt_ref;
  out0.cost_hist.mac_thru_dt::cost_hist_mac_thru_dt;
  out0.cost_hist.mac_thru_dt_ref::cost_hist_mac_thru_dt_ref;
  out0.cost_hist.mac_cost1::cost_hist_mac_cost1;
  out0.cost_hist.add_dt::cost_hist_add_dt;
  out0.cost_hist.chg_user_nm::cost_hist_chg_user_nm;
  out0.cost_hist.chg_dt::cost_hist_chg_dt;
  out0.cost_hist.chg_tm::cost_hist_chg_tm;
  out0.cost_hist.chg_pgm_nm::cost_hist_chg_pgm_nm;
  out0.cost_hist.src_env_sk::cost_hist_src_env_sk;
  out0.*::in0.*;

end;
