/*   Do not edit. Generated file - BRE 3.2.6.4;;Default deployment;   */
include '~$AI_XFR/bre_helper.map.xfr';


/*@
    Name:bzt_11_97d014ac_575e5aea_5a70_0
    BizHidden:true
@*/
/*   lookup PLN_Plan   */
out0::bzt_11_97d014ac_575e5aea_5a70_0(in0,in1)=
begin
let record
  little endian integer(8) dxf_src_dataset_id = 0;
  little endian integer(4) dxf_src_rec_cnt = 0;
  little endian integer(2) dxf_src_sys_id = 0;
  string(unsigned integer(1)) dxf_src_file_name = "";
  string("\x01", maximum_length=10) adaecd;
  decimal("\x01", maximum_length=10) adakdt, ada1dt = NULL("");
  string("\x01", maximum_length=25) adbotx = NULL("");
  string("\x01", maximum_length=1) adctst = NULL("");
  string("\x01", maximum_length=8) adnxcd = NULL("");
  string("\x01", maximum_length=10) adcct3 = NULL("");
  string("\x01", maximum_length=5) rxt_src_envrt_id;
  string("\x01", maximum_length=30) rxt_src_envrt_nm = NULL("");
  datetime("YYYYMMDDHH24MISS")("\x01") rxt_create_dttm = NULL("");
  string("\x01", maximum_length=20) rxt_create_uid = NULL("");
  decimal("\x01", maximum_length=16) rxt_create_run_id = NULL("");
  string("\x01", maximum_length=2) rxt_rec_stat_cd = NULL("");
  string(1) newline = "\n";
end __bzt_local_res__;
__bzt_local_res__ = fail_if_error(lookup("PLN_Plan",in0,in1));
  out0::__bzt_local_res__;
end;


/*@
    Name:bzt_10_97d014ac_575e5aea_5a70_0
    BizHidden:true
@*/
/*   lookup DRD_DUR_Response_Data   */
out0::bzt_10_97d014ac_575e5aea_5a70_0(in0,in1,in2)=
begin
let record
  little endian integer(8) dxf_src_dataset_id = 0;
  little endian integer(4) dxf_src_rec_cnt = 0;
  little endian integer(2) dxf_src_sys_id = 0;
  string(unsigned integer(1)) dxf_src_file_name = "";
  decimal("\x01", maximum_length=18) d3p2nb;
  decimal("\x01", maximum_length=6) d3oinb, d3jjnb;
  string("\x01", maximum_length=2) d3l7st = NULL("");
  string("\x01", maximum_length=1) d3l1st = NULL(""), d3l2st = NULL("");
  decimal("\x01", maximum_length=11) d3aeda = NULL("");
  decimal("\x01".3, maximum_length=18) d3jgnb = NULL("");
  string("\x01", maximum_length=1) d3l3st = NULL(""), d3l8st = NULL("");
  string("\x01", maximum_length=30) d3lvtx = NULL("");
  string("\x01", maximum_length=1) d3aeh6 = NULL(""), d3afh6 = NULL("");
  decimal("\x01", maximum_length=5) d3jdhr = NULL("");
  string("\x01", maximum_length=8) d3nkcd = NULL("");
  decimal("\x01", maximum_length=18) d3iqhr = NULL("");
  decimal("\x01", maximum_length=6) d3irhr = NULL("");
  decimal("\x01", maximum_length=5) d3ithr = NULL("");
  decimal("\x01", maximum_length=4) d3bzik = NULL(""), d3b0ik = NULL("");
  decimal("\x01", maximum_length=5) d3ishr = NULL("");
  string("\x01", maximum_length=1) d3z5ha = NULL("");
  decimal("\x01", maximum_length=5) d3iohr = NULL(""), d3iphr = NULL("");
  string("\x01", maximum_length=100) d3r2ip = NULL("");
  string("\x01", maximum_length=10) d3akvn = NULL("");
  decimal("\x01", maximum_length=10) d3c2dt = NULL("");
  decimal("\x01", maximum_length=9) d3adtm = NULL("");
  string("\x01", maximum_length=10) d3alvn = NULL(""), d3advn = NULL("");
  decimal("\x01", maximum_length=10) d3bmdt = NULL("");
  decimal("\x01", maximum_length=9) d3abtm = NULL("");
  string("\x01", maximum_length=10) d3aevn = NULL("");
  string("\x01", maximum_length=1) claimsts;
  string("\x01", maximum_length=5) rxt_src_envrt_id;
  string("\x01", maximum_length=30) rxt_src_envrt_nm = NULL("");
  datetime("YYYYMMDDHH24MISS")("\x01") rxt_create_dttm = NULL("");
  string("\x01", maximum_length=20) rxt_create_uid = NULL("");
  decimal("\x01", maximum_length=16) rxt_create_run_id = NULL("");
  string("\x01", maximum_length=2) rxt_rec_stat_cd = NULL("");
  string(1) newline = "\n";
end __bzt_local_res__;
__bzt_local_res__ = fail_if_error(lookup("DRD_DUR_Response_Data",in0,in1,in2));
  out0::__bzt_local_res__;
end;


/*@
    Name:bzt_7_97d014ac_575e5aea_5a70_0
    BizHidden:true
@*/
/*   lookup DRD_DUR_Response_Data   */
out0::bzt_7_97d014ac_575e5aea_5a70_0(in0,in1,in2)=
begin
let record
  little endian integer(8) dxf_src_dataset_id = 0;
  little endian integer(4) dxf_src_rec_cnt = 0;
  little endian integer(2) dxf_src_sys_id = 0;
  string(unsigned integer(1)) dxf_src_file_name = "";
  decimal("\x01", maximum_length=18) d3p2nb;
  decimal("\x01", maximum_length=6) d3oinb, d3jjnb;
  string("\x01", maximum_length=2) d3l7st = NULL("");
  string("\x01", maximum_length=1) d3l1st = NULL(""), d3l2st = NULL("");
  decimal("\x01", maximum_length=11) d3aeda = NULL("");
  decimal("\x01".3, maximum_length=18) d3jgnb = NULL("");
  string("\x01", maximum_length=1) d3l3st = NULL(""), d3l8st = NULL("");
  string("\x01", maximum_length=30) d3lvtx = NULL("");
  string("\x01", maximum_length=1) d3aeh6 = NULL(""), d3afh6 = NULL("");
  decimal("\x01", maximum_length=5) d3jdhr = NULL("");
  string("\x01", maximum_length=8) d3nkcd = NULL("");
  decimal("\x01", maximum_length=18) d3iqhr = NULL("");
  decimal("\x01", maximum_length=6) d3irhr = NULL("");
  decimal("\x01", maximum_length=5) d3ithr = NULL("");
  decimal("\x01", maximum_length=4) d3bzik = NULL(""), d3b0ik = NULL("");
  decimal("\x01", maximum_length=5) d3ishr = NULL("");
  string("\x01", maximum_length=1) d3z5ha = NULL("");
  decimal("\x01", maximum_length=5) d3iohr = NULL(""), d3iphr = NULL("");
  string("\x01", maximum_length=100) d3r2ip = NULL("");
  string("\x01", maximum_length=10) d3akvn = NULL("");
  decimal("\x01", maximum_length=10) d3c2dt = NULL("");
  decimal("\x01", maximum_length=9) d3adtm = NULL("");
  string("\x01", maximum_length=10) d3alvn = NULL(""), d3advn = NULL("");
  decimal("\x01", maximum_length=10) d3bmdt = NULL("");
  decimal("\x01", maximum_length=9) d3abtm = NULL("");
  string("\x01", maximum_length=10) d3aevn = NULL("");
  string("\x01", maximum_length=1) claimsts;
  string("\x01", maximum_length=5) rxt_src_envrt_id;
  string("\x01", maximum_length=30) rxt_src_envrt_nm = NULL("");
  datetime("YYYYMMDDHH24MISS")("\x01") rxt_create_dttm = NULL("");
  string("\x01", maximum_length=20) rxt_create_uid = NULL("");
  decimal("\x01", maximum_length=16) rxt_create_run_id = NULL("");
  string("\x01", maximum_length=2) rxt_rec_stat_cd = NULL("");
  string(1) newline = "\n";
end __bzt_local_res__;
__bzt_local_res__ = fail_if_error(lookup("DRD_DUR_Response_Data",in0,in1,in2));
  out0::__bzt_local_res__;
end;


out0::reformat(in0)=
begin
let int bzt_3 = 0;
let int bzt_4 = 0;
let int bzt_5 = 0;
let int bzt_6 = 0;
let decimal('') bzt_8;
let decimal("\x01", maximum_length=6) bzt_9;
let decimal("\x01",0) cdur_events_cag_sk = -1;
let decimal("\x01",0) cdur_events_phr_sk = -1;
let decimal("\x01",0) cdur_events_prod_sk = -1;
let decimal("\x01",0) cdur_events_mbr_sk = -1;
let decimal("\x01",0) cdur_events_pbr_sk = -1;
let decimal("\x01",0) cdur_events_gpi_sk = -1;
let string("\x01",charset="iso-8859-15", maximum_length=30) cdur_events_carrier_id = fail_if_error(in0.carrierid);
let string("\x01",charset="iso-8859-15", maximum_length=40) cdur_events_account_id = fail_if_error(in0.accountid);
let string("\x01",charset="iso-8859-15", maximum_length=30) cdur_events_employer_group_id = fail_if_error((if (sql_and(is_blank(string_lrtrim(in0.groupid)),(in0.claimsts!="R")))
   in0.groupnbr
 else
   in0.groupid));
let decimal("\x01",0) cdur_events_claim_nbr = fail_if_error(in0.rxclaimnbr);
let decimal("\x01",0) cdur_events_claim_seq_nbr;
let string("\x01",charset="iso-8859-15", maximum_length=1) cdur_events_claim_stat_id = fail_if_error(in0.claimsts);
let decimal("\x01",0) cdur_events_claim_stat_sk = -1;
let string("\x01",charset="iso-8859-15", maximum_length=12) cdur_events_rx_nbr = fail_if_error(in0.rxnumber);
let string("\x01",charset="iso-8859-15", maximum_length=2) cdur_events_refill_nbr = fail_if_error(in0.refill);
let decimal("\x01",0) cdur_events_sbm_yr;
let decimal("\x01",0) cdur_events_sbm_mn;
let date("YYYYMMDD")("\x01") cdur_events_sbm_dt;
let date("YYYYMMDD")("\x01") cdur_events_filled_dt;
let decimal("\x01",0) cdur_events_sbm_dt_sk = -1;
let decimal("\x01",0) cdur_events_filled_dt_sk = -1;
let decimal("\x01",0) cdur_events_rej_cd1_sk = -1;
let decimal("\x01",0) cdur_events_rej_cd2_sk = -1;
let decimal("\x01",0) cdur_events_rej_cd3_sk = -1;
let decimal("\x01",0) cdur_events_dur_rsp_cd_cntr;
let string("\x01",charset="iso-8859-15", maximum_length=2) cdur_events_dur_srvc_cd_rsn;
let string("\x01",charset="iso-8859-15", maximum_length=1) cdur_events_dur_clinical_sign_flg;
let string("\x01",charset="iso-8859-15", maximum_length=1) cdur_events_dur_oth_phr_ind;
let date("YYYYMMDD")("\x01") cdur_events_dur_prev_fill_dt;
let decimal("\x01".3, maximum_length=10, sign_reserved) cdur_events_dur_prev_fill_qty;
let string("\x01",charset="iso-8859-15", maximum_length=1) cdur_events_dur_db_ind;
let string("\x01",charset="iso-8859-15", maximum_length=1) cdur_events_dur_oth_pbr_ind;
let string("\x01",charset="iso-8859-15", maximum_length=30) cdur_events_dur_free_txt_msg;
let string("\x01",charset="iso-8859-15", maximum_length=1) cdur_events_dur_rsp_flg;
let string("\x01",charset="iso-8859-15", maximum_length=8) cdur_events_dur_table_nm;
let decimal("\x01",0) cdur_events_dur_cnflct_det_cnt;
let decimal("\x01",0) cdur_events_dur_cnflct_ret_cnt;
let string("\x01",charset="iso-8859-15", maximum_length=8) cdur_events_dur_srvc_nm;
let decimal("\x01",0) cdur_events_cnflct_claim_nbr;
let decimal("\x01",0) cdur_events_cnflct_claim_seq_nbr;
let string("\x01",charset="iso-8859-15", maximum_length=1) cdur_events_cnflct_claim_stat_id;
let decimal("\x01",0) cdur_events_cnflct_prod_sk = -1;
let string("\x01",charset="iso-8859-15", maximum_length=1) cdur_events_dur_user_ovrd_flg;
let decimal("\x01",0) cdur_events_dur_doc_level;
let decimal("\x01",0) cdur_events_dur_onset;
let decimal("\x01",0) cdur_events_dur_dup_cnt;
let string("\x01",charset="iso-8859-15", maximum_length=1) cdur_events_dur_dup_alwd_flg;
let string("\x01",charset="iso-8859-15", maximum_length=40) cdur_events_dur_msg;
let decimal("\x01".2, maximum_length=11, sign_reserved) cdur_events_app_ingred_cost_paid = fail_if_error(in0.phringrcst);
let decimal("\x01".2, maximum_length=11, sign_reserved) cdur_events_app_dispensing_fee = fail_if_error(in0.phrdispfee);
let decimal("\x01".2, maximum_length=11, sign_reserved) cdur_events_app_sales_tax_paid = fail_if_error(in0.phrslstax);
let decimal("\x01".2, maximum_length=11, sign_reserved) cdur_events_app_patient_pay_amt = fail_if_error(in0.phrpatpay);
let decimal("\x01".2, maximum_length=11, sign_reserved) cdur_events_app_due_amt = fail_if_error(in0.phrdueamt);
let decimal("\x01".2, maximum_length=11, sign_reserved) cdur_events_clr_ingred_cost_paid = fail_if_error(in0.cltingrcst);
let decimal("\x01".2, maximum_length=11, sign_reserved) cdur_events_clr_dispensing_fee = fail_if_error(in0.cltdispfee);
let decimal("\x01".2, maximum_length=11, sign_reserved) cdur_events_clr_sales_tax_paid = fail_if_error(in0.cltslstax);
let decimal("\x01".2, maximum_length=11, sign_reserved) cdur_events_clr_patient_pay_amt = fail_if_error(in0.cltpatpay);
let decimal("\x01".2, maximum_length=11, sign_reserved) cdur_events_clr_due_amt = fail_if_error(in0.cltdueamt);
let decimal("\x01",0) cdur_events_days_of_supply = fail_if_error(in0.dayssupply);
let decimal("\x01".3, maximum_length=13, sign_reserved) cdur_events_drug_quantity = fail_if_error(in0.decimalqty);
let string("\x01",charset="iso-8859-15", maximum_length=1) cdur_events_recent_clm_flg = "-";
let decimal("\x01",0) cdur_events_src_env_sk = fail_if_error(in0.rxt_src_envrt_id);
let string("\x01",charset="iso-8859-15", maximum_length=30) cag_carrier_id = fail_if_error(in0.carrierid);
let string("\x01",charset="iso-8859-15", maximum_length=40) cag_account_id = fail_if_error(in0.accountid);
let string("\x01",charset="iso-8859-15", maximum_length=30) cag_employer_group_id = fail_if_error((if (sql_and(is_blank(string_lrtrim(in0.groupid)),(in0.claimsts!="R")))
   in0.groupnbr
 else
   in0.groupid));
let string("\x01",charset="iso-8859-15", maximum_length=1) claim_sts_claim_stat_id = fail_if_error(in0.claimsts);
let string("\x01",charset="iso-8859-15", maximum_length=20) cnflct_prod_prod_id = fail_if_error(if(in0.compoundcd member  [vector  '2','9']) "-" else in0.productid);
let string("\x01",charset="iso-8859-15", maximum_length=2) cnflct_prod_prod_id_qlfr_cd = fail_if_error(if(in0.compoundcd member  [vector  '2','9']) "-" else in0.prodtypcde);
let string("\x01",charset="iso-8859-15", maximum_length=14) d_gpi_gpi_id = fail_if_error(in0.gpinumber);
let date("YYYYMMDD")("\x01") filled_date_cal_day_dt;
let string("\x01",charset="iso-8859-15", maximum_length=30) membr_carrier_id = fail_if_error(in0.carrierid);
let string("\x01",charset="iso-8859-15", maximum_length=40) membr_account_id = fail_if_error(in0.accountid);
let string("\x01",charset="iso-8859-15", maximum_length=30) membr_employer_group_id = fail_if_error((if (sql_and(is_blank(string_lrtrim(in0.groupid)),(in0.claimsts!="R")))
   in0.groupnbr
 else
   in0.groupid));
let string("\x01",charset="iso-8859-15", maximum_length=20) membr_mbr_id = fail_if_error(in0.memberid);
let string("\x01",charset="iso-8859-15", maximum_length=12) pharmacy_phr_id = fail_if_error(in0.srvprovid);
let string("\x01",charset="iso-8859-15", maximum_length=15) prescrbr_pbr_id = fail_if_error(in0.prescriber);
let string("\x01",charset="iso-8859-15", maximum_length=2) prescrbr_pbr_id_qlfr = fail_if_error(in0.prescridql);
let string("\x01",charset="iso-8859-15", maximum_length=3) prescrbr_pbr_id_st_cd = fail_if_error(in0.prsstate);
let decimal("\x01",0) prescrbr_src_env_sk = fail_if_error(in0.rxt_src_envrt_id);
let string("\x01",charset="iso-8859-15", maximum_length=20) product_prod_id = fail_if_error(in0.productid);
let string("\x01",charset="iso-8859-15", maximum_length=2) product_prod_id_qlfr_cd = fail_if_error(in0.prodtypcde);
let string("\x01",charset="iso-8859-15", maximum_length=3) reject_cd1_rej_cd = fail_if_error(in0.rejcde1);
let string("\x01",charset="iso-8859-15", maximum_length=3) reject_cd2_rej_cd = fail_if_error(in0.rejcde2);
let string("\x01",charset="iso-8859-15", maximum_length=3) reject_cd3_rej_cd = fail_if_error(in0.rejcde3);
let date("YYYYMMDD")("\x01") sbm_date_cal_day_dt;



/*   Rule:Compute cdur_events.claim_seq_nbr  (#1)   */
if(first_defined(fail_if_error((is_null(in0.clmseqnbr) ==0)),0))begin
  cdur_events_claim_seq_nbr=if(in0.clmseqnbr<0) in0.clmseqnbr else (1000 - in0.clmseqnbr);
end

/*   Rule:Compute cdur_events.sbm_yr  (#2)   */
if(first_defined(fail_if_error(((length_of(in0.datesbm)) ==8) && ((is_valid(YYYYMMDD(in0.datesbm))) ==1)),0))begin
  cdur_events_sbm_yr=string_substring(in0.datesbm,1,4);
end
else if(first_defined(fail_if_error(((length_of(in0.datesbm) member [vector 6,7])) && ((is_valid(YYYYMMDD(19000000+in0.datesbm))) ==1)),0))begin
  cdur_events_sbm_yr=string_substring((19000000 + in0.datesbm),1,4);
end

/*   Rule:Compute cdur_events.sbm_mn  (#3)   */
if(first_defined(fail_if_error(((length_of(in0.datesbm)) ==8) && ((is_valid(YYYYMMDD(in0.datesbm))) ==1)),0))begin
  cdur_events_sbm_mn=string_substring(in0.datesbm,5,2);
end
else if(first_defined(fail_if_error(((length_of(in0.datesbm) member [vector 6,7])) && ((is_valid(YYYYMMDD(19000000 + in0.datesbm))) ==1)),0))begin
  cdur_events_sbm_mn=string_substring((19000000 + in0.datesbm),5,2);
end

/*   Rule:Compute cdur_events.sbm_dt  (#4)   */
if(first_defined(fail_if_error(((length_of(in0.datesbm)) ==8) && ((is_valid(YYYYMMDD(in0.datesbm))) ==1)),0))begin
  bzt_3=1;
  cdur_events_sbm_dt=YYYYMMDD(in0.datesbm);
end
else if(first_defined(fail_if_error(((length_of(in0.datesbm) member [vector 6,7])) && ((is_valid(YYYYMMDD(19000000 + in0.datesbm))) ==1)),0))begin
  bzt_3=1;
  cdur_events_sbm_dt=YYYYMMDD(19000000 + in0.datesbm);
end

/*   Default value   */
if(!bzt_3)begin
  cdur_events_sbm_dt=fail_if_error(YYYYMMDD(19000101));
end

/*   Rule:Compute cdur_events.filled_dt  (#5)   */
if(first_defined(fail_if_error(((length_of(in0.dtefilled)) ==8) && ((is_valid(YYYYMMDD(in0.dtefilled))) ==1)),0))begin
  bzt_4=1;
  cdur_events_filled_dt=YYYYMMDD(in0.dtefilled);
end
else if(first_defined(fail_if_error(((length_of(in0.dtefilled) member [vector 6,7])) && ((is_valid(YYYYMMDD(19000000 + in0.dtefilled))) ==1)),0))begin
  bzt_4=1;
  cdur_events_filled_dt=YYYYMMDD(19000000 + in0.dtefilled);
end

/*   Default value   */
if(!bzt_4)begin
  cdur_events_filled_dt=fail_if_error(YYYYMMDD(19000101));
end

/*   Rule:Compute cdur_events.dur_msg  (#6)   */
bzt_8 = fail_if_error(!is_null(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3jjnb));
bzt_9 = fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3jjnb);
if(first_defined(fail_if_error((bzt_8 ==1)),0))begin
  if(first_defined(fail_if_error((bzt_9 ==1)),0))begin
     cdur_events_dur_msg=in0.message1;
  end
  else if(first_defined(fail_if_error((bzt_9 ==2)),0))begin
     cdur_events_dur_msg=in0.message2;
  end
  else if(first_defined(fail_if_error((bzt_9 ==3)),0))begin
     cdur_events_dur_msg=in0.message3;
  end
end

/*   Rule:Compute filled_date.cal_day_dt  (#7)   */
if(first_defined(fail_if_error(((length_of(in0.dtefilled)) ==8) && ((is_valid(YYYYMMDD(in0.dtefilled))) ==1)),0))begin
  bzt_5=1;
  filled_date_cal_day_dt=YYYYMMDD(in0.dtefilled);
end
else if(first_defined(fail_if_error(((length_of(in0.dtefilled) member [vector 6,7])) && ((is_valid(YYYYMMDD(19000000 + in0.dtefilled))) ==1)),0))begin
  bzt_5=1;
  filled_date_cal_day_dt=YYYYMMDD(19000000 + in0.dtefilled);
end

/*   Default value   */
if(!bzt_5)begin
  filled_date_cal_day_dt=fail_if_error(YYYYMMDD(19000101));
end

/*   Rule:Compute sbm_date.cal_day_dt  (#8)   */
if(first_defined(fail_if_error(((length_of(in0.datesbm)) ==8) && ((is_valid(YYYYMMDD(in0.datesbm))) ==1)),0))begin
  bzt_6=1;
  sbm_date_cal_day_dt=YYYYMMDD(in0.datesbm);
end
else if(first_defined(fail_if_error(((length_of(in0.datesbm) member [vector 6,7])) && ((is_valid(YYYYMMDD(19000000 + in0.datesbm))) ==1)),0))begin
  bzt_6=1;
  sbm_date_cal_day_dt=YYYYMMDD(19000101);
end

/*   Default value   */
if(!bzt_6)begin
  sbm_date_cal_day_dt=fail_if_error(YYYYMMDD(19000101));
end

/*   Default value   */
cdur_events_dur_db_ind=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3l3st);

/*   Default value   */
cdur_events_dur_prev_fill_qty=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3jgnb);

/*   Default value   */
cdur_events_dur_dup_alwd_flg=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3z5ha);

/*   Default value   */
cdur_events_dur_srvc_nm=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3nkcd);

/*   Default value   */
cdur_events_dur_prev_fill_dt=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3aeda);

/*   Default value   */
cdur_events_dur_oth_pbr_ind=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3lvtx);

/*   Default value   */
cdur_events_dur_dup_cnt=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3ishr);

/*   Default value   */
cdur_events_cnflct_claim_nbr=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3iqhr);

/*   Default value   */
cdur_events_dur_oth_phr_ind=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr,in0.clmseqnbr,in0.rxt_src_envrt_id).d3l2st);

/*   Default value   */
cdur_events_dur_user_ovrd_flg=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3afh6);

/*   Default value   */
cdur_events_dur_rsp_cd_cntr=fail_if_error(bzt_10_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr,in0.clmseqnbr,in0.rxt_src_envrt_id).d3jjnb);

/*   Default value   */
cdur_events_dur_doc_level=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3bzik);

/*   Default value   */
cdur_events_dur_onset=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3b0ik);

/*   Default value   */
cdur_events_dur_rsp_flg=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3aeh6);

/*   Default value   */
cdur_events_dur_free_txt_msg=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3lvtx);

/*   Default value   */
cdur_events_cnflct_claim_seq_nbr=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3irhr);

/*   Default value   */
cdur_events_dur_table_nm=fail_if_error(bzt_11_97d014ac_575e5aea_5a70_0(in0.fnlplancde,in0.fnlplandte).adnxcd);

/*   Default value   */
cdur_events_dur_cnflct_det_cnt=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3iohr);

/*   Default value   */
cdur_events_cnflct_claim_stat_id=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3afh6);

/*   Default value   */
cdur_events_dur_srvc_cd_rsn=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3l7st);

/*   Default value   */
cdur_events_dur_clinical_sign_flg=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr,in0.clmseqnbr,in0.rxt_src_envrt_id).d3l1st);

/*   Default value   */
cdur_events_dur_cnflct_ret_cnt=fail_if_error(bzt_7_97d014ac_575e5aea_5a70_0(in0.rxclaimnbr, in0.clmseqnbr,in0.rxt_src_envrt_id).d3iphr);

  out0.cdur_events.cag_sk::cdur_events_cag_sk;
  out0.cdur_events.phr_sk::cdur_events_phr_sk;
  out0.cdur_events.prod_sk::cdur_events_prod_sk;
  out0.cdur_events.mbr_sk::cdur_events_mbr_sk;
  out0.cdur_events.pbr_sk::cdur_events_pbr_sk;
  out0.cdur_events.gpi_sk::cdur_events_gpi_sk;
  out0.cdur_events.carrier_id::cdur_events_carrier_id;
  out0.cdur_events.account_id::cdur_events_account_id;
  out0.cdur_events.employer_group_id::cdur_events_employer_group_id;
  out0.cdur_events.claim_nbr::cdur_events_claim_nbr;
  out0.cdur_events.claim_seq_nbr::cdur_events_claim_seq_nbr;
  out0.cdur_events.claim_stat_id::cdur_events_claim_stat_id;
  out0.cdur_events.claim_stat_sk::cdur_events_claim_stat_sk;
  out0.cdur_events.rx_nbr::cdur_events_rx_nbr;
  out0.cdur_events.refill_nbr::cdur_events_refill_nbr;
  out0.cdur_events.sbm_yr::cdur_events_sbm_yr;
  out0.cdur_events.sbm_mn::cdur_events_sbm_mn;
  out0.cdur_events.sbm_dt::cdur_events_sbm_dt;
  out0.cdur_events.filled_dt::cdur_events_filled_dt;
  out0.cdur_events.sbm_dt_sk::cdur_events_sbm_dt_sk;
  out0.cdur_events.filled_dt_sk::cdur_events_filled_dt_sk;
  out0.cdur_events.rej_cd1_sk::cdur_events_rej_cd1_sk;
  out0.cdur_events.rej_cd2_sk::cdur_events_rej_cd2_sk;
  out0.cdur_events.rej_cd3_sk::cdur_events_rej_cd3_sk;
  out0.cdur_events.dur_rsp_cd_cntr::cdur_events_dur_rsp_cd_cntr;
  out0.cdur_events.dur_srvc_cd_rsn::cdur_events_dur_srvc_cd_rsn;
  out0.cdur_events.dur_clinical_sign_flg::cdur_events_dur_clinical_sign_flg;
  out0.cdur_events.dur_oth_phr_ind::cdur_events_dur_oth_phr_ind;
  out0.cdur_events.dur_prev_fill_dt::cdur_events_dur_prev_fill_dt;
  out0.cdur_events.dur_prev_fill_qty::cdur_events_dur_prev_fill_qty;
  out0.cdur_events.dur_db_ind::cdur_events_dur_db_ind;
  out0.cdur_events.dur_oth_pbr_ind::cdur_events_dur_oth_pbr_ind;
  out0.cdur_events.dur_free_txt_msg::cdur_events_dur_free_txt_msg;
  out0.cdur_events.dur_rsp_flg::cdur_events_dur_rsp_flg;
  out0.cdur_events.dur_table_nm::cdur_events_dur_table_nm;
  out0.cdur_events.dur_cnflct_det_cnt::cdur_events_dur_cnflct_det_cnt;
  out0.cdur_events.dur_cnflct_ret_cnt::cdur_events_dur_cnflct_ret_cnt;
  out0.cdur_events.dur_srvc_nm::cdur_events_dur_srvc_nm;
  out0.cdur_events.cnflct_claim_nbr::cdur_events_cnflct_claim_nbr;
  out0.cdur_events.cnflct_claim_seq_nbr::cdur_events_cnflct_claim_seq_nbr;
  out0.cdur_events.cnflct_claim_stat_id::cdur_events_cnflct_claim_stat_id;
  out0.cdur_events.cnflct_prod_sk::cdur_events_cnflct_prod_sk;
  out0.cdur_events.dur_user_ovrd_flg::cdur_events_dur_user_ovrd_flg;
  out0.cdur_events.dur_doc_level::cdur_events_dur_doc_level;
  out0.cdur_events.dur_onset::cdur_events_dur_onset;
  out0.cdur_events.dur_dup_cnt::cdur_events_dur_dup_cnt;
  out0.cdur_events.dur_dup_alwd_flg::cdur_events_dur_dup_alwd_flg;
  out0.cdur_events.dur_msg::cdur_events_dur_msg;
  out0.cdur_events.app_ingred_cost_paid::cdur_events_app_ingred_cost_paid;
  out0.cdur_events.app_dispensing_fee::cdur_events_app_dispensing_fee;
  out0.cdur_events.app_sales_tax_paid::cdur_events_app_sales_tax_paid;
  out0.cdur_events.app_patient_pay_amt::cdur_events_app_patient_pay_amt;
  out0.cdur_events.app_due_amt::cdur_events_app_due_amt;
  out0.cdur_events.clr_ingred_cost_paid::cdur_events_clr_ingred_cost_paid;
  out0.cdur_events.clr_dispensing_fee::cdur_events_clr_dispensing_fee;
  out0.cdur_events.clr_sales_tax_paid::cdur_events_clr_sales_tax_paid;
  out0.cdur_events.clr_patient_pay_amt::cdur_events_clr_patient_pay_amt;
  out0.cdur_events.clr_due_amt::cdur_events_clr_due_amt;
  out0.cdur_events.days_of_supply::cdur_events_days_of_supply;
  out0.cdur_events.drug_quantity::cdur_events_drug_quantity;
  out0.cdur_events.recent_clm_flg::cdur_events_recent_clm_flg;
  out0.cdur_events.src_env_sk::cdur_events_src_env_sk;
  out0.cag.carrier_id::cag_carrier_id;
  out0.cag.account_id::cag_account_id;
  out0.cag.employer_group_id::cag_employer_group_id;
  out0.claim_sts.claim_stat_id::claim_sts_claim_stat_id;
  out0.cnflct_prod.prod_id::cnflct_prod_prod_id;
  out0.cnflct_prod.prod_id_qlfr_cd::cnflct_prod_prod_id_qlfr_cd;
  out0.d_gpi.gpi_id::d_gpi_gpi_id;
  out0.filled_date.cal_day_dt::filled_date_cal_day_dt;
  out0.membr.carrier_id::membr_carrier_id;
  out0.membr.account_id::membr_account_id;
  out0.membr.employer_group_id::membr_employer_group_id;
  out0.membr.mbr_id::membr_mbr_id;
  out0.pharmacy.phr_id::pharmacy_phr_id;
  out0.prescrbr.pbr_id::prescrbr_pbr_id;
  out0.prescrbr.pbr_id_qlfr::prescrbr_pbr_id_qlfr;
  out0.prescrbr.pbr_id_st_cd::prescrbr_pbr_id_st_cd;
  out0.prescrbr.src_env_sk::prescrbr_src_env_sk;
  out0.product.prod_id::product_prod_id;
  out0.product.prod_id_qlfr_cd::product_prod_id_qlfr_cd;
  out0.reject_cd1.rej_cd::reject_cd1_rej_cd;
  out0.reject_cd2.rej_cd::reject_cd2_rej_cd;
  out0.reject_cd3.rej_cd::reject_cd3_rej_cd;
  out0.sbm_date.cal_day_dt::sbm_date_cal_day_dt;
  out0.*::in0.*;

end;
