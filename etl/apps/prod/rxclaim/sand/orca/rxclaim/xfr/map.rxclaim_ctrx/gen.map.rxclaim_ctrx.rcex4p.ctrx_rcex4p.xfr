/*   Do not edit. Generated file - BRE 3.2.6.4;;Default deployment;   */
include '~$AI_XFR/bre_helper.map.xfr';
let string(int) bzt_0_6c54cc0a_57cd3e22_760d_0 = $RUN_ID;

/*@
dependency_analysis:
[
  [out0.rcex4p.src_env_sk,[passthrough],in0.rxt_src_envrt_id]
  [out0.*,in0.*]
]
metrics:
{
  dependencies:
  [
     [out0.rcex4p.amzsst,'rcex4p.amzsst',1,0]
     [out0.rcex4p.ams6nb,'rcex4p.ams6nb',1,0]
     [out0.rcex4p.ambjqu,'rcex4p.ambjqu',1,0]
     [out0.rcex4p.amc6ai,'rcex4p.amc6ai',1,0]
     [out0.rcex4p.amxfhx,'rcex4p.amxfhx',1,0]
     [out0.rcex4p.ambkqu,'rcex4p.ambkqu',1,0]
     [out0.dxf_src_dataset_id,'DXF Source Dataset ID',1,0]
     [out0.rcex4p.amrmh9,'rcex4p.amrmh9',1,0]
     [out0.rcex4p.ambiqu,'rcex4p.ambiqu',1,0]
     [out0.rcex4p.amc4ai,'rcex4p.amc4ai',1,0]
     [out0.rcex4p.amc5ai,'rcex4p.amc5ai',1,0]
     [out0.dxf_src_file_name,'DXF Source File Name',1,0]
     [out0.rcex4p.amo6h9,'rcex4p.amo6h9',1,0]
     [out0.rcex4p.amp2nb,'rcex4p.amp2nb',1,0]
     [out0.dxf_src_rec_cnt,'DXF Source Record Count',1,0]
     [out0.rcex4p.src_env_sk,'rcex4p.src_env_sk',1,0]
     [out0.dxf_src_sys_id,'DXF Source System ID',1,0]
  ]
  impacts:
  [
     [in0.amc6ai,'amc6ai',1,1]
     [in0.amc4ai,'amc4ai',1,1]
     [in0.amzsst,'amzsst',1,1]
     [in0.dxf_src_file_name,'DXF Source File Name',1,1]
     [in0.ams6nb,'ams6nb',1,1]
     [in0.amc5ai,'amc5ai',1,1]
     [in0.amo6h9,'amo6h9',1,1]
     [in0.dxf_src_sys_id,'DXF Source System ID',1,1]
     [in0.amrmh9,'amrmh9',1,1]
     [in0.amp2nb,'amp2nb',1,1]
     [in0.dxf_src_dataset_id,'DXF Source Dataset ID',1,1]
     [in0.rxt_src_envrt_id,'rxt_src_envrt_id',1,1]
     [in0.amxfhx,'amxfhx',1,1]
     [in0.dxf_src_rec_cnt,'DXF Source Record Count',1,1]
     [in0.ambkqu,'ambkqu',1,1]
     [in0.ambjqu,'ambjqu',1,1]
     [in0.ambiqu,'ambiqu',1,1]
  ]
}
@*/

out0::reformat(in0)=
begin
let decimal('') DXF_Source_Record_Count = fail_if_error(in0.dxf_src_rec_cnt);
let decimal("\x01", maximum_length=18) rcex4p_amp2nb = fail_if_error(in0.amp2nb);
let decimal("\x01", maximum_length=6) rcex4p_ams6nb = fail_if_error(in0.ams6nb);
let string("\x01", maximum_length=1) rcex4p_amzsst = fail_if_error(in0.amzsst);
let string("\x01", maximum_length=1) rcex4p_amc6ai = fail_if_error(in0.amc6ai);
let decimal("\x01".2, maximum_length=15) rcex4p_ambiqu = fail_if_error(in0.ambiqu);
let decimal("\x01".2, maximum_length=15) rcex4p_ambjqu = fail_if_error(in0.ambjqu);
let string("\x01", maximum_length=1) rcex4p_amc5ai = fail_if_error(in0.amc5ai);
let string("\x01", maximum_length=1) rcex4p_amo6h9 = fail_if_error(in0.amo6h9);
let decimal("\x01".2, maximum_length=15) rcex4p_amxfhx = fail_if_error(in0.amxfhx);
let string("\x01", maximum_length=1) rcex4p_amc4ai = fail_if_error(in0.amc4ai);
let decimal("\x01".2, maximum_length=11) rcex4p_ambkqu = fail_if_error(in0.ambkqu);
let string("\x01", maximum_length=1) rcex4p_amrmh9 = fail_if_error(in0.amrmh9);
let decimal("\x01",0) rcex4p_src_env_sk = fail_if_error(in0.rxt_src_envrt_id);



  out0.dxf_src_rec_cnt::DXF_Source_Record_Count;
  out0.rcex4p.amp2nb::rcex4p_amp2nb;
  out0.rcex4p.ams6nb::rcex4p_ams6nb;
  out0.rcex4p.amzsst::rcex4p_amzsst;
  out0.rcex4p.amc6ai::rcex4p_amc6ai;
  out0.rcex4p.ambiqu::rcex4p_ambiqu;
  out0.rcex4p.ambjqu::rcex4p_ambjqu;
  out0.rcex4p.amc5ai::rcex4p_amc5ai;
  out0.rcex4p.amo6h9::rcex4p_amo6h9;
  out0.rcex4p.amxfhx::rcex4p_amxfhx;
  out0.rcex4p.amc4ai::rcex4p_amc4ai;
  out0.rcex4p.ambkqu::rcex4p_ambkqu;
  out0.rcex4p.amrmh9::rcex4p_amrmh9;
  out0.rcex4p.src_env_sk::rcex4p_src_env_sk;
  out0.*::in0.*;

end;
