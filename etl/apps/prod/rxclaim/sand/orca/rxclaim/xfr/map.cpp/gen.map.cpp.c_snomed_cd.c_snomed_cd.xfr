/*   Do not edit. Generated file - BRE 3.2.6.4;;Default deployment;   */
include '~$AI_XFR/bre_helper.map.xfr';
let string(int) bzt_0_6c54cc0a_5818773c_71ec_7 = $RUN_ID;

/*@
dependency_analysis:
[
  [out0.c_snomed_cd.eff_dt,[passthrough],in0.eff_dt]
  [out0.c_snomed_cd.emtm_case_stage,[passthrough],in0.emtm_case_stage]
  [out0.c_snomed_cd.snomed_ct_concept,[passthrough],in0.snomed_ct_concept]
  [out0.c_snomed_cd.medication_related,[passthrough],in0.medication_related]
  [out0.c_snomed_cd.snomed_ct_id,[passthrough],in0.snomed_ct_id]
  [out0.c_snomed_cd.src_env_sk,[transform],]
  [out0.c_snomed_cd.end_dt,[passthrough],in0.end_dt]
  [out0.c_snomed_cd.cpp_updated_by,[passthrough],in0.updated_by]
  [out0.c_snomed_cd.cpp_created_by,[passthrough],in0.created_by]
  [out0.c_snomed_cd.snomed_cd_id,[passthrough],in0.snomed_cd_id]
  [out0.c_snomed_cd.active_flag,[passthrough],in0.active_flag]
  [out0.c_snomed_cd.cpp_snomed_cd_sk,[transform],]
  [out0.c_snomed_cd.cpp_update_ts,[transform],in0.create_timestamp,
     in0.update_timestamp]
  [out0.c_snomed_cd.cpp_create_ts,[passthrough],in0.create_timestamp]
  [out0.c_snomed_cd.category,[passthrough],in0.category]
  [out0.*,in0.*]
]
metrics:
{
  dependencies:
  [
     [out0.c_snomed_cd.eff_dt,'c_snomed_cd.eff_dt',1,0]
     [out0.c_snomed_cd.emtm_case_stage,'c_snomed_cd.emtm_case_stage',1,0]
     [out0.c_snomed_cd.snomed_ct_concept,'c_snomed_cd.snomed_ct_concept',1,0]
     [out0.c_snomed_cd.medication_related,'c_snomed_cd.medication_related',1,0]
     [out0.c_snomed_cd.snomed_ct_id,'c_snomed_cd.snomed_ct_id',1,0]
     [out0.c_snomed_cd.src_env_sk,'c_snomed_cd.src_env_sk',1,0]
     [out0.c_snomed_cd.end_dt,'c_snomed_cd.end_dt',1,0]
     [out0.c_snomed_cd.cpp_updated_by,'c_snomed_cd.cpp_updated_by',1,0]
     [out0.c_snomed_cd.cpp_created_by,'c_snomed_cd.cpp_created_by',1,0]
     [out0.c_snomed_cd.snomed_cd_id,'c_snomed_cd.snomed_cd_id',1,0]
     [out0.c_snomed_cd.active_flag,'c_snomed_cd.active_flag',1,0]
     [out0.c_snomed_cd.cpp_snomed_cd_sk,'c_snomed_cd.cpp_snomed_cd_sk',1,0]
     [out0.dxf_src_rec_cnt,'DXF Source Record Count',1,0]
     [out0.dxf_src_sys_id,'DXF Source System ID',1,0]
     [out0.dxf_src_file_name,'DXF Source File Name',1,0]
     [out0.c_snomed_cd.cpp_update_ts,'c_snomed_cd.cpp_update_ts',1,0]
     [out0.c_snomed_cd.cpp_create_ts,'c_snomed_cd.cpp_create_ts',1,0]
     [out0.dxf_src_dataset_id,'DXF Source Dataset ID',1,0]
     [out0.c_snomed_cd.category,'c_snomed_cd.category',1,0]
  ]
  impacts:
  [
     [in0.created_by,'created_by',1,1]
     [in0.update_timestamp,'update_timestamp',1,1]
     [in0.snomed_ct_id,'snomed_ct_id',1,1]
     [in0.create_timestamp,'create_timestamp',2,2]
     [in0.updated_by,'updated_by',1,1]
     [in0.snomed_ct_concept,'snomed_ct_concept',1,1]
     [in0.end_dt,'end_dt',1,1]
     [in0.active_flag,'active_flag',1,1]
     [in0.dxf_src_dataset_id,'DXF Source Dataset ID',1,1]
     [in0.category,'category',1,1]
     [in0.dxf_src_file_name,'DXF Source File Name',1,1]
     [in0.snomed_cd_id,'snomed_cd_id',1,1]
     [in0.eff_dt,'eff_dt',1,1]
     [in0.dxf_src_rec_cnt,'DXF Source Record Count',1,1]
     [in0.dxf_src_sys_id,'DXF Source System ID',1,1]
     [in0.medication_related,'medication_related',1,1]
     [in0.emtm_case_stage,'emtm_case_stage',1,1]
  ]
}
@*/

out0::reformat(in0)=
begin
let decimal("\x01",0) c_snomed_cd_cpp_snomed_cd_sk = -1;
let decimal("\x01",0, maximum_length=39, sign_reserved) c_snomed_cd_snomed_cd_id = fail_if_error(in0.snomed_cd_id);
let utf8 string("\x01", maximum_length=16000) c_snomed_cd_snomed_ct_concept = fail_if_error(in0.snomed_ct_concept);
let utf8 string("\x01", maximum_length=200) c_snomed_cd_snomed_ct_id = fail_if_error(in0.snomed_ct_id);
let utf8 string("\x01", maximum_length=60) c_snomed_cd_category = fail_if_error(in0.category);
let utf8 string("\x01", maximum_length=8) c_snomed_cd_medication_related = fail_if_error(in0.medication_related);
let datetime("YYYYMMDD HH24:MI:SS")("\x01") c_snomed_cd_eff_dt = fail_if_error(in0.eff_dt);
let datetime("YYYYMMDD HH24:MI:SS")("\x01") c_snomed_cd_end_dt = fail_if_error(in0.end_dt);
let utf8 string("\x01", maximum_length=300) c_snomed_cd_emtm_case_stage = fail_if_error(in0.emtm_case_stage);
let string("\x01",charset="iso-8859-15", maximum_length=1) c_snomed_cd_active_flag = fail_if_error(in0.active_flag);
let datetime("YYYYMMDD HH24:MI:SS")("\x01") c_snomed_cd_cpp_update_ts = fail_if_error(first_defined(in0.update_timestamp,in0.create_timestamp));
let utf8 string("\x01", maximum_length=80) c_snomed_cd_cpp_updated_by = fail_if_error(in0.updated_by);
let datetime("YYYYMMDD HH24:MI:SS")("\x01") c_snomed_cd_cpp_create_ts = fail_if_error(in0.create_timestamp);
let utf8 string("\x01", maximum_length=80) c_snomed_cd_cpp_created_by = fail_if_error(in0.created_by);
let decimal("\x01",0) c_snomed_cd_src_env_sk = 710;



  out0.c_snomed_cd.cpp_snomed_cd_sk::c_snomed_cd_cpp_snomed_cd_sk;
  out0.c_snomed_cd.snomed_cd_id::c_snomed_cd_snomed_cd_id;
  out0.c_snomed_cd.snomed_ct_concept::c_snomed_cd_snomed_ct_concept;
  out0.c_snomed_cd.snomed_ct_id::c_snomed_cd_snomed_ct_id;
  out0.c_snomed_cd.category::c_snomed_cd_category;
  out0.c_snomed_cd.medication_related::c_snomed_cd_medication_related;
  out0.c_snomed_cd.eff_dt::c_snomed_cd_eff_dt;
  out0.c_snomed_cd.end_dt::c_snomed_cd_end_dt;
  out0.c_snomed_cd.emtm_case_stage::c_snomed_cd_emtm_case_stage;
  out0.c_snomed_cd.active_flag::c_snomed_cd_active_flag;
  out0.c_snomed_cd.cpp_update_ts::c_snomed_cd_cpp_update_ts;
  out0.c_snomed_cd.cpp_updated_by::c_snomed_cd_cpp_updated_by;
  out0.c_snomed_cd.cpp_create_ts::c_snomed_cd_cpp_create_ts;
  out0.c_snomed_cd.cpp_created_by::c_snomed_cd_cpp_created_by;
  out0.c_snomed_cd.src_env_sk::c_snomed_cd_src_env_sk;
  out0.*::in0.*;

end;
