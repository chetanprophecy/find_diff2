/*   Do not edit. Generated file - BRE 4.0.2.18;;Default deployment;   */
include '~$AI_XFR/bre_helper.map.xfr';

/*@ BizHidden:true @*/
constant string(int) RUN_ID parameter  = allocate_with_defaults();

out0::Map_rxclaim_mssql_audit_call_notes_to_the_f_audit_call_notes_ILM_documentation(in)=
begin

out0.audit_call.audit_claim_seq_nbr::depends_on(
         in.audited_seq
         );


out0.audit_call.audit_fraud_violation_reason_id::depends_on(
         in.fraud_violation_reason_id
         );


out0.audit_call.phr_contact_nm::depends_on(
         in.pharmacy_contact_name
         );


out0.audit_call.zero_reclaim::depends_on(
         in.zero_reclaim
         );


out0.audit_call.adjust_claim_seq_nbr::depends_on(
         in.adjusted_seq
         );


out0.audit_call.phr_adjust_amt::depends_on(
         in.phr_adjust_amount
         );


out0.audit_call.number_of_calls::depends_on(
         in.number_of_calls
         );


out0.audit_call.comments::depends_on(
         in.comments
         );


out0.audit_call.created_by::depends_on(
         in.created_by
         );


out0.audit_call.audit_type_id::depends_on(
         in.audit_type_id
         );


out0.audit_call.audit_call_note_id::depends_on(
         in.call_note_id
         );


out0.audit_call.audit_category_id::depends_on(
         in.audit_category_id
         );


out0.audit_call.src_env_sk::depends_on(
         in.dxf_src_sys_id
         );


out0.audit_call.clt_adjust_amt::depends_on(
         in.client_adj_amount
         );


out0.audit_call.claim_nbr_encrp::depends_on(
         in.claim_number
         );


out0.audit_call.audit_nonfraud_violation_reason_id::depends_on(
         in.non_fraud_violation_reason_id
         );


out0.audit_call.number_of_emails::depends_on(
         in.number_of_emails
         );


out0.audit_call.created_dt::depends_on(
         in.created_date
         );


out0.audit_call.rxclaim_instance_ind::depends_on(
         in.dw_src_env_sk
         );


out0.audit_call.audit_fraud_type_id::depends_on(
         in.fraud_type_id
         );


out0.audit_call.audit_payment_type_id::depends_on(
         in.payment_type_id
         );


out0.audit_call.adjust_claim_nbr::depends_on(
         in.adjusted_claim_number
         );


out0.audit_call.audit_fraud_perpetrator_id::depends_on(
         in.fraud_perpetrator_id
         );


out0.audit_call.claim_nbr::depends_on(
         in.claim_number
         );

out0.*::in.*;
end;

/*@
dependency_analysis_function:Map_rxclaim_mssql_audit_call_notes_to_the_f_audit_call_notes_ILM_documentation
metrics:
{
  dependencies:
  [
     [out0.audit_call.audit_claim_seq_nbr,'audit_call.audit_claim_seq_nbr',1,0]
     [out0.audit_call.audit_fraud_violation_reason_id,'audit_call.audit_fraud_violation_reason_id',1,0]
     [out0.audit_call.phr_contact_nm,'audit_call.phr_contact_nm',1,0]
     [out0.audit_call.zero_reclaim,'audit_call.zero_reclaim',1,0]
     [out0.audit_call.adjust_claim_seq_nbr,'audit_call.adjust_claim_seq_nbr',1,0]
     [out0.audit_call.phr_adjust_amt,'audit_call.phr_adjust_amt',1,0]
     [out0.audit_call.number_of_calls,'audit_call.number_of_calls',1,0]
     [out0.audit_call.comments,'audit_call.comments',1,0]
     [out0.audit_call.created_by,'audit_call.created_by',1,0]
     [out0.audit_call.audit_type_id,'audit_call.audit_type_id',1,0]
     [out0.audit_call.audit_call_note_id,'audit_call.audit_call_note_id',1,0]
     [out0.audit_call.audit_category_id,'audit_call.audit_category_id',1,0]
     [out0.audit_call.src_env_sk,'audit_call.src_env_sk',1,0]
     [out0.audit_call.clt_adjust_amt,'audit_call.clt_adjust_amt',1,0]
     [out0.dxf_src_rec_cnt,'DXF Source Record Count',1,0]
     [out0.audit_call.claim_nbr_encrp,'audit_call.claim_nbr_encrp',1,1]
     [out0.audit_call.audit_nonfraud_violation_reason_id,'audit_call.audit_nonfraud_violation_reason_id',1,0]
     [out0.audit_call.number_of_emails,'audit_call.number_of_emails',1,0]
     [out0.dxf_src_sys_id,'DXF Source System ID',1,0]
     [out0.audit_call.created_dt,'audit_call.created_dt',1,0]
     [out0.dxf_src_file_name,'DXF Source File Name',1,0]
     [out0.audit_call.rxclaim_instance_ind,'audit_call.rxclaim_instance_ind',1,0]
     [out0.audit_call.audit_fraud_type_id,'audit_call.audit_fraud_type_id',1,0]
     [out0.audit_call.audit_payment_type_id,'audit_call.audit_payment_type_id',1,0]
     [out0.audit_call.adjust_claim_nbr,'audit_call.adjust_claim_nbr',1,0]
     [out0.audit_call.audit_fraud_perpetrator_id,'audit_call.audit_fraud_perpetrator_id',1,0]
     [out0.dxf_src_dataset_id,'DXF Source Dataset ID',1,0]
     [out0.audit_call.claim_nbr,'audit_call.claim_nbr',6,0]
  ]
  impacts:
  [
     [in0.created_by,'created_by',1,1]
     [in0.comments,'comments',1,1]
     [in0.audit_category_id,'audit_category_id',1,1]
     [in0.zero_reclaim,'zero_reclaim',2,1]
     [in0.audited_seq,'audited_seq',1,1]
     [in0.adjusted_claim_number,'adjusted_claim_number',1,1]
     [in0.number_of_emails,'number_of_emails',1,1]
     [in0.claim_number,'claim_number',1,2]
     [in0.phr_adjust_amount,'phr_adjust_amount',1,1]
     [in0.dw_src_env_sk,'dw_src_env_sk',1,1]
     [in0.dxf_src_dataset_id,'DXF Source Dataset ID',1,1]
     [in0.fraud_violation_reason_id,'fraud_violation_reason_id',1,1]
     [in0.audit_type_id,'audit_type_id',1,1]
     [in0.number_of_calls,'number_of_calls',1,1]
     [in0.call_note_id,'call_note_id',1,1]
     [in0.adjusted_seq,'adjusted_seq',1,1]
     [in0.dxf_src_file_name,'DXF Source File Name',1,1]
     [in0.dxf_src_rec_cnt,'DXF Source Record Count',1,1]
     [in0.dxf_src_sys_id,'DXF Source System ID',2,2]
     [in0.pharmacy_contact_name,'pharmacy_contact_name',2,1]
     [in0.payment_type_id,'payment_type_id',1,1]
     [in0.fraud_perpetrator_id,'fraud_perpetrator_id',1,1]
     [in0.non_fraud_violation_reason_id,'non_fraud_violation_reason_id',1,1]
     [in0.client_adj_amount,'client_adj_amount',1,1]
     [in0.fraud_type_id,'fraud_type_id',1,1]
     [in0.created_date,'created_date',1,1]
  ]
}
@*/

out0::reformat(in0)=
begin
let decimal("\x01",0) audit_call_audit_call_note_id = fail_if_error(in0.call_note_id);
let decimal("\x01",0) audit_call_claim_nbr = fail_if_error((decimal(''))(re_replace(string_filter_out(in0.claim_number,'!"#$%&()*+,-.//:;<=>?@[\\]^_`{|}~'),"[ |']+","")));
let string("\x01",charset="iso-8859-15", maximum_length=1) audit_call_zero_reclaim = fail_if_error(if(!is_null(in0.zero_reclaim)) 
	if(in0.zero_reclaim== 0) 
		'0' 
	else 
		'1'
else '0');
let decimal("\x01",0) audit_call_audit_payment_type_id = fail_if_error(in0.payment_type_id);
let string("\x01",charset="iso-8859-15", maximum_length=50) audit_call_phr_contact_nm = fail_if_error(if(!is_null(in0.pharmacy_contact_name)) re_replace(in0.pharmacy_contact_name,"\\r|\\n"," ") else "");
let decimal("\x01",0) audit_call_audit_category_id = fail_if_error(in0.audit_category_id);
let decimal("\x01",0) audit_call_number_of_calls = fail_if_error(in0.number_of_calls);
let decimal("\x01",0) audit_call_number_of_emails = fail_if_error(in0.number_of_emails);
let decimal("\x01",0) audit_call_audit_type_id = fail_if_error(in0.audit_type_id);
let decimal("\x01",0) audit_call_audit_fraud_type_id = fail_if_error(in0.fraud_type_id);
let decimal("\x01",0) audit_call_audit_fraud_violation_reason_id = fail_if_error(in0.fraud_violation_reason_id);
let decimal("\x01",0) audit_call_audit_fraud_perpetrator_id = fail_if_error(in0.fraud_perpetrator_id);
let decimal("\x01",0) audit_call_audit_nonfraud_violation_reason_id = fail_if_error(in0.non_fraud_violation_reason_id);
let string("\x01",charset="iso-8859-15", maximum_length=155) audit_call_comments = fail_if_error(string_lrtrim(in0.comments));
let datetime("YYYYMMDD HH24:MI:SS")("\x01") audit_call_created_dt = fail_if_error(in0.created_date);
let string("\x01",charset="iso-8859-15", maximum_length=30) audit_call_created_by = fail_if_error(in0.created_by);
let decimal("\x01".3, maximum_length=22, sign_reserved) audit_call_phr_adjust_amt = fail_if_error(in0.phr_adjust_amount);
let decimal("\x01",0) audit_call_src_env_sk = fail_if_error(in0.dxf_src_sys_id);
let decimal("\x01".3, maximum_length=22, sign_reserved) audit_call_clt_adjust_amt = fail_if_error(in0.client_adj_amount);
let decimal("\x01",0) audit_call_adjust_claim_nbr = fail_if_error((decimal(''))(in0.adjusted_claim_number));
let decimal("\x01",0) audit_call_audit_claim_seq_nbr = fail_if_error(in0.audited_seq);
let decimal("\x01",0) audit_call_adjust_claim_seq_nbr = fail_if_error(in0.adjusted_seq);
let decimal("\x01",0) audit_call_rxclaim_instance_ind = fail_if_error(in0.dw_src_env_sk);
let decimal("\x01",0) audit_call_claim_nbr_encrp;



/*   Default value   */
audit_call_claim_nbr_encrp=fail_if_error(if(audit_call_claim_nbr>0) (decimal(''))(string_concat(string_substring((decimal(''))audit_call_claim_nbr,1,2),ff3_encrypt_idwdata((decimal(''))audit_call_claim_nbr))) 
else  (decimal(''))(string_concat(string_substring((decimal(''))audit_call_claim_nbr,1,3),ff3_encrypt_idwdata(decimal_strip(math_abs((decimal(''))audit_call_claim_nbr))))));

  out0.audit_call.audit_call_note_id::audit_call_audit_call_note_id;
  out0.audit_call.claim_nbr::audit_call_claim_nbr;
  out0.audit_call.zero_reclaim::audit_call_zero_reclaim;
  out0.audit_call.audit_payment_type_id::audit_call_audit_payment_type_id;
  out0.audit_call.phr_contact_nm::audit_call_phr_contact_nm;
  out0.audit_call.audit_category_id::audit_call_audit_category_id;
  out0.audit_call.number_of_calls::audit_call_number_of_calls;
  out0.audit_call.number_of_emails::audit_call_number_of_emails;
  out0.audit_call.audit_type_id::audit_call_audit_type_id;
  out0.audit_call.audit_fraud_type_id::audit_call_audit_fraud_type_id;
  out0.audit_call.audit_fraud_violation_reason_id::audit_call_audit_fraud_violation_reason_id;
  out0.audit_call.audit_fraud_perpetrator_id::audit_call_audit_fraud_perpetrator_id;
  out0.audit_call.audit_nonfraud_violation_reason_id::audit_call_audit_nonfraud_violation_reason_id;
  out0.audit_call.comments::audit_call_comments;
  out0.audit_call.created_dt::audit_call_created_dt;
  out0.audit_call.created_by::audit_call_created_by;
  out0.audit_call.phr_adjust_amt::audit_call_phr_adjust_amt;
  out0.audit_call.src_env_sk::audit_call_src_env_sk;
  out0.audit_call.clt_adjust_amt::audit_call_clt_adjust_amt;
  out0.audit_call.adjust_claim_nbr::audit_call_adjust_claim_nbr;
  out0.audit_call.audit_claim_seq_nbr::audit_call_audit_claim_seq_nbr;
  out0.audit_call.adjust_claim_seq_nbr::audit_call_adjust_claim_seq_nbr;
  out0.audit_call.rxclaim_instance_ind::audit_call_rxclaim_instance_ind;
  out0.audit_call.claim_nbr_encrp::audit_call_claim_nbr_encrp;
  out0.*::in0.*;
end;
