/*   Do not edit. Generated file - BRE 3.2.6.4;;Default deployment;   */
include '~$AI_XFR/bre_helper.map.xfr';
let string(int) bzt_0_6c54cc0a_5834419a_5b0f_16 = $RUN_ID;

/*@
dependency_analysis:
[
  [out0.c_cntrct_pbp.cpp_updated_by,[passthrough],in0.updated_by]
  [out0.c_cntrct_pbp.cpp_created_by,[passthrough],in0.created_by]
  [out0.c_cntrct_pbp.cli_carrier_id,[passthrough],in0.cli_carrier_id]
  [out0.c_cntrct_pbp.pbp_id,[passthrough],in0.pbp_id]
  [out0.c_cntrct_pbp.src_env_sk,[transform],]
  [out0.c_cntrct_pbp.contract_num,[passthrough],in0.contract_num]
  [out0.c_cntrct_pbp.cli_acct_id,[passthrough],in0.cli_acct_id]
  [out0.c_cntrct_pbp.pdp_start_dt,[passthrough],in0.pdp_start_dt]
  [out0.c_cntrct_pbp.pdp_end_dt,[passthrough],in0.pdp_end_dt]
  [out0.c_cntrct_pbp.cpp_create_ts,[passthrough],in0.create_timestamp]
  [out0.c_cntrct_pbp.cpp_update_ts,[transform],in0.create_timestamp,
     in0.update_timestamp]
  [out0.c_cntrct_pbp.plan_eff_dt,[passthrough],in0.plan_eff_dt]
  [out0.c_cntrct_pbp.cpp_contract_pbp_sk,[transform],]
  [out0.*,in0.*]
]
metrics:
{
  dependencies:
  [
     [out0.c_cntrct_pbp.cpp_updated_by,'c_cntrct_pbp.cpp_updated_by',1,0]
     [out0.c_cntrct_pbp.cpp_created_by,'c_cntrct_pbp.cpp_created_by',1,0]
     [out0.c_cntrct_pbp.cli_carrier_id,'c_cntrct_pbp.cli_carrier_id',1,0]
     [out0.c_cntrct_pbp.pbp_id,'c_cntrct_pbp.pbp_id',1,0]
     [out0.c_cntrct_pbp.carrier_id,'c_cntrct_pbp.carrier_id',1,0]
     [out0.c_cntrct_pbp.plan_cd,'c_cntrct_pbp.plan_cd',1,0]
     [out0.c_cntrct_pbp.src_env_sk,'c_cntrct_pbp.src_env_sk',1,0]
     [out0.c_cntrct_pbp.contract_num,'c_cntrct_pbp.contract_num',1,0]
     [out0.c_cntrct_pbp.stts_cd,'c_cntrct_pbp.stts_cd',1,0]
     [out0.c_cntrct_pbp.emplyr_group_id,'c_cntrct_pbp.emplyr_group_id',1,0]
     [out0.c_cntrct_pbp.cli_acct_id,'c_cntrct_pbp.cli_acct_id',1,0]
     [out0.c_cntrct_pbp.pdp_start_dt,'c_cntrct_pbp.pdp_start_dt',1,0]
     [out0.dxf_src_rec_cnt,'DXF Source Record Count',1,0]
     [out0.c_cntrct_pbp.pdp_end_dt,'c_cntrct_pbp.pdp_end_dt',1,0]
     [out0.c_cntrct_pbp.sequence_num,'c_cntrct_pbp.sequence_num',1,0]
     [out0.dxf_src_sys_id,'DXF Source System ID',1,0]
     [out0.dxf_src_file_name,'DXF Source File Name',1,0]
     [out0.c_cntrct_pbp.cpp_create_ts,'c_cntrct_pbp.cpp_create_ts',1,0]
     [out0.c_cntrct_pbp.cpp_update_ts,'c_cntrct_pbp.cpp_update_ts',1,0]
     [out0.c_cntrct_pbp.acct_id,'c_cntrct_pbp.acct_id',1,0]
     [out0.c_cntrct_pbp.cli_emplyr_group_id,'c_cntrct_pbp.cli_emplyr_group_id',1,0]
     [out0.c_cntrct_pbp.plan_eff_dt,'c_cntrct_pbp.plan_eff_dt',1,0]
     [out0.c_cntrct_pbp.cpp_contract_pbp_sk,'c_cntrct_pbp.cpp_contract_pbp_sk',1,0]
     [out0.dxf_src_dataset_id,'DXF Source Dataset ID',1,0]
  ]
  impacts:
  [
     [in0.created_by,'created_by',1,1]
     [in0.update_timestamp,'update_timestamp',1,1]
     [in0.plan_eff_dt,'plan_eff_dt',1,1]
     [in0.create_timestamp,'create_timestamp',2,2]
     [in0.updated_by,'updated_by',1,1]
     [in0.contract_num,'contract_num',1,1]
     [in0.plan_cd,'plan_cd',1,1]
     [in0.pdp_start_dt,'pdp_start_dt',1,1]
     [in0.carrier_id,'carrier_id',1,1]
     [in0.sequence_num,'sequence_num',1,1]
     [in0.dxf_src_dataset_id,'DXF Source Dataset ID',1,1]
     [in0.cli_acct_id,'cli_acct_id',1,1]
     [in0.stts_cd,'stts_cd',1,1]
     [in0.cli_emplyr_group_id,'cli_emplyr_group_id',1,1]
     [in0.dxf_src_file_name,'DXF Source File Name',1,1]
     [in0.emplyr_group_id,'emplyr_group_id',1,1]
     [in0.dxf_src_rec_cnt,'DXF Source Record Count',1,1]
     [in0.dxf_src_sys_id,'DXF Source System ID',1,1]
     [in0.acct_id,'acct_id',1,1]
     [in0.cli_carrier_id,'cli_carrier_id',1,1]
     [in0.pdp_end_dt,'pdp_end_dt',1,1]
     [in0.pbp_id,'pbp_id',1,1]
  ]
}
@*/

out0::reformat(in0)=
begin
let decimal("\x01",0) c_cntrct_pbp_cpp_contract_pbp_sk = -1;
let decimal("\x01",0, maximum_length=39, sign_reserved) c_cntrct_pbp_cli_carrier_id = fail_if_error(in0.cli_carrier_id);
let decimal("\x01",0, maximum_length=39, sign_reserved) c_cntrct_pbp_cli_acct_id = fail_if_error(in0.cli_acct_id);
let decimal("\x01",0, maximum_length=39, sign_reserved) c_cntrct_pbp_cli_emplyr_group_id = fail_if_error(in0.cli_emplyr_group_id);
let string("\x01",charset="iso-8859-15", maximum_length=30) c_cntrct_pbp_carrier_id = fail_if_error(in0.carrier_id);
let string("\x01",charset="iso-8859-15", maximum_length=40) c_cntrct_pbp_acct_id = fail_if_error(in0.acct_id);
let string("\x01",charset="iso-8859-15", maximum_length=30) c_cntrct_pbp_emplyr_group_id = fail_if_error(in0.emplyr_group_id);
let datetime("YYYYMMDD HH24:MI:SS")("\x01") c_cntrct_pbp_plan_eff_dt = fail_if_error(in0.plan_eff_dt);
let decimal("\x01",0, maximum_length=39, sign_reserved) c_cntrct_pbp_sequence_num = fail_if_error(in0.sequence_num);
let datetime("YYYYMMDD HH24:MI:SS")("\x01") c_cntrct_pbp_pdp_start_dt = fail_if_error(in0.pdp_start_dt);
let utf8 string("\x01", maximum_length=20) c_cntrct_pbp_contract_num = fail_if_error(in0.contract_num);
let utf8 string("\x01", maximum_length=12) c_cntrct_pbp_pbp_id = fail_if_error(in0.pbp_id);
let utf8 string("\x01", maximum_length=40) c_cntrct_pbp_plan_cd = fail_if_error(in0.plan_cd);
let datetime("YYYYMMDD HH24:MI:SS")("\x01") c_cntrct_pbp_pdp_end_dt = fail_if_error(in0.pdp_end_dt);
let string("\x01",charset="iso-8859-15", maximum_length=1) c_cntrct_pbp_stts_cd = fail_if_error(in0.stts_cd);
let datetime("YYYYMMDD HH24:MI:SS")("\x01") c_cntrct_pbp_cpp_update_ts = fail_if_error(first_defined(in0.update_timestamp,in0.create_timestamp));
let utf8 string("\x01", maximum_length=80) c_cntrct_pbp_cpp_updated_by = fail_if_error(in0.updated_by);
let datetime("YYYYMMDD HH24:MI:SS")("\x01") c_cntrct_pbp_cpp_create_ts = fail_if_error(in0.create_timestamp);
let utf8 string("\x01", maximum_length=80) c_cntrct_pbp_cpp_created_by = fail_if_error(in0.created_by);
let decimal("\x01",0) c_cntrct_pbp_src_env_sk = 710;



  out0.c_cntrct_pbp.cpp_contract_pbp_sk::c_cntrct_pbp_cpp_contract_pbp_sk;
  out0.c_cntrct_pbp.cli_carrier_id::c_cntrct_pbp_cli_carrier_id;
  out0.c_cntrct_pbp.cli_acct_id::c_cntrct_pbp_cli_acct_id;
  out0.c_cntrct_pbp.cli_emplyr_group_id::c_cntrct_pbp_cli_emplyr_group_id;
  out0.c_cntrct_pbp.carrier_id::c_cntrct_pbp_carrier_id;
  out0.c_cntrct_pbp.acct_id::c_cntrct_pbp_acct_id;
  out0.c_cntrct_pbp.emplyr_group_id::c_cntrct_pbp_emplyr_group_id;
  out0.c_cntrct_pbp.plan_eff_dt::c_cntrct_pbp_plan_eff_dt;
  out0.c_cntrct_pbp.sequence_num::c_cntrct_pbp_sequence_num;
  out0.c_cntrct_pbp.pdp_start_dt::c_cntrct_pbp_pdp_start_dt;
  out0.c_cntrct_pbp.contract_num::c_cntrct_pbp_contract_num;
  out0.c_cntrct_pbp.pbp_id::c_cntrct_pbp_pbp_id;
  out0.c_cntrct_pbp.plan_cd::c_cntrct_pbp_plan_cd;
  out0.c_cntrct_pbp.pdp_end_dt::c_cntrct_pbp_pdp_end_dt;
  out0.c_cntrct_pbp.stts_cd::c_cntrct_pbp_stts_cd;
  out0.c_cntrct_pbp.cpp_update_ts::c_cntrct_pbp_cpp_update_ts;
  out0.c_cntrct_pbp.cpp_updated_by::c_cntrct_pbp_cpp_updated_by;
  out0.c_cntrct_pbp.cpp_create_ts::c_cntrct_pbp_cpp_create_ts;
  out0.c_cntrct_pbp.cpp_created_by::c_cntrct_pbp_cpp_created_by;
  out0.c_cntrct_pbp.src_env_sk::c_cntrct_pbp_src_env_sk;
  out0.*::in0.*;

end;
