/*   Do not edit. Generated file - BRE 3.2.6.4;;Default deployment;   */
include '~$AI_XFR/bre_helper.map.xfr';

/*@
dependency_analysis:
[
  [out0.plan_restric.prr_seq_nbr,[passthrough],in0.bmwcal]
  [out0.plan_restric.prr_qlfr_cd,[passthrough],in0.bmfth7]
  [out0.d_pln.pln_cd,[transform],in0.bmaecd]
  [out0.plan_restric.pln_sk,[transform],]
  [out0.plan_restric.msg_cd,[passthrough],in0.bmajhb]
  [out0.d_pln.pln_eff_dt,[transform],in0.bmakdt]
  [out0.plan_restric.prr_stat_cd,[passthrough],in0.bmk6ak]
  [out0.plan_restric.prr_eff_dt,[transform],in0.bmixce]
  [out0.plan_restric.prr_sk,[transform],]
  [out0.d_pln.src_env_sk,[passthrough],in0.dxf_src_sys_id]
  [out0.plan_restric.msg_type_cd,[passthrough],in0.bmreh6]
  [out0.plan_restric.prr_thru_dt,[transform],in0.bmiyce]
  [out0.plan_restric.schedule_id,[passthrough],in0.bmfdho]
  [out0.plan_restric.due_amt_basis_cd,[passthrough],in0.bmc6s3]
  [out0.plan_restric.src_env_sk,[passthrough],in0.dxf_src_sys_id]
  [out0.plan_restric.max_due_amt,[passthrough],in0.bma2va]
  [out0.*,in0.*]
]
metrics:
{
  dependencies:
  [
     [out0.plan_restric.prr_seq_nbr,'plan_restric.prr_seq_nbr',1,0]
     [out0.plan_restric.prr_qlfr_cd,'plan_restric.prr_qlfr_cd',1,0]
     [out0.d_pln.pln_cd,'d_pln.pln_cd',1,0]
     [out0.plan_restric.pln_sk,'plan_restric.pln_sk',1,0]
     [out0.plan_restric.msg_cd,'plan_restric.msg_cd',1,0]
     [out0.d_pln.pln_eff_dt,'d_pln.pln_eff_dt',3,2]
     [out0.plan_restric.prr_stat_cd,'plan_restric.prr_stat_cd',1,0]
     [out0.plan_restric.prr_eff_dt,'plan_restric.prr_eff_dt',3,2]
     [out0.plan_restric.prr_sk,'plan_restric.prr_sk',1,0]
     [out0.dxf_src_rec_cnt,'DXF Source Record Count',1,0]
     [out0.d_pln.src_env_sk,'d_pln.src_env_sk',1,0]
     [out0.dxf_src_sys_id,'DXF Source System ID',1,0]
     [out0.plan_restric.msg_type_cd,'plan_restric.msg_type_cd',1,0]
     [out0.plan_restric.prr_thru_dt,'plan_restric.prr_thru_dt',3,2]
     [out0.dxf_src_file_name,'DXF Source File Name',1,0]
     [out0.plan_restric.schedule_id,'plan_restric.schedule_id',1,0]
     [out0.plan_restric.due_amt_basis_cd,'plan_restric.due_amt_basis_cd',1,0]
     [out0.dxf_src_dataset_id,'DXF Source Dataset ID',1,0]
     [out0.plan_restric.src_env_sk,'plan_restric.src_env_sk',1,0]
     [out0.plan_restric.max_due_amt,'plan_restric.max_due_amt',1,0]
  ]
  impacts:
  [
     [in0.bmixce,'bmixce',6,3]
     [in0.bmreh6,'bmreh6',1,1]
     [in0.bmfth7,'bmfth7',1,1]
     [in0.dxf_src_dataset_id,'DXF Source Dataset ID',1,1]
     [in0.bmajhb,'bmajhb',1,1]
     [in0.bmaecd,'bmaecd',1,1]
     [in0.dxf_src_file_name,'DXF Source File Name',1,1]
     [in0.bmfdho,'bmfdho',1,1]
     [in0.bmc6s3,'bmc6s3',1,1]
     [in0.dxf_src_rec_cnt,'DXF Source Record Count',1,1]
     [in0.dxf_src_sys_id,'DXF Source System ID',3,3]
     [in0.bmakdt,'bmakdt',6,3]
     [in0.bmwcal,'bmwcal',1,1]
     [in0.bmiyce,'bmiyce',6,3]
     [in0.bmk6ak,'bmk6ak',1,1]
     [in0.bma2va,'bma2va',1,1]
  ]
}
@*/

out0::reformat(in0)=
begin
let int bzt_0 = 0;
let int bzt_1 = 0;
let int bzt_2 = 0;
let decimal("\x01",0) plan_restric_prr_sk = -1;
let decimal("\x01",0) plan_restric_pln_sk = -1;
let string("\x01",charset="iso-8859-15", maximum_length=1) plan_restric_prr_qlfr_cd = fail_if_error(in0.bmfth7);
let decimal("\x01",0) plan_restric_prr_seq_nbr = fail_if_error(in0.bmwcal);
let string("\x01",charset="iso-8859-15", maximum_length=1) plan_restric_prr_stat_cd = fail_if_error(in0.bmk6ak);
let date("YYYYMMDD")("\x01") plan_restric_prr_eff_dt;
let date("YYYYMMDD")("\x01") plan_restric_prr_thru_dt;
let decimal("\x01".2, maximum_length=12, sign_reserved) plan_restric_max_due_amt = fail_if_error(in0.bma2va);
let string("\x01",charset="iso-8859-15", maximum_length=1) plan_restric_due_amt_basis_cd = fail_if_error(in0.bmc6s3);
let string("\x01",charset="iso-8859-15", maximum_length=10) plan_restric_msg_cd = fail_if_error(in0.bmajhb);
let string("\x01",charset="iso-8859-15", maximum_length=1) plan_restric_msg_type_cd = fail_if_error(in0.bmreh6);
let string("\x01",charset="iso-8859-15", maximum_length=10) plan_restric_schedule_id = fail_if_error(in0.bmfdho);
let decimal("\x01",0) plan_restric_src_env_sk = fail_if_error(in0.dxf_src_sys_id);
let string("\x01",charset="iso-8859-15", maximum_length=10) d_pln_pln_cd = fail_if_error(string_lrtrim(in0.bmaecd));
let date("YYYYMMDD")("\x01") d_pln_pln_eff_dt;
let decimal("\x01",0) d_pln_src_env_sk = fail_if_error(in0.dxf_src_sys_id);



/*   Rule:Compute d_pln.pln_eff_dt  (#1)   */
if(first_defined(fail_if_error(((sql_and((length_of(in0.bmakdt) member [vector 6,7]),is_valid(YYYYMMDD((19000000+in0.bmakdt))))) ==1) && ((sql_and((length_of(in0.bmakdt) member [vector 8]),is_valid(YYYYMMDD(in0.bmakdt)))) ==0)),0))begin
  bzt_0=1;
  d_pln_pln_eff_dt=YYYYMMDD(19000000 + in0.bmakdt);
end
else if(first_defined(fail_if_error(((sql_and((length_of(in0.bmakdt) member [vector 6,7]),is_valid(YYYYMMDD((19000000+in0.bmakdt))))) ==0) && ((sql_and((length_of(in0.bmakdt) member [vector 8]),is_valid(YYYYMMDD(in0.bmakdt)))) ==1)),0))begin
  bzt_0=1;
  d_pln_pln_eff_dt=YYYYMMDD(in0.bmakdt);
end

/*   Default value   */
if(!bzt_0)begin
  d_pln_pln_eff_dt=fail_if_error(YYYYMMDD(19000101));
end

/*   Rule:Compute plan_restric.prr_eff_dt  (#2)   */
if(first_defined(fail_if_error(((sql_and((length_of(in0.bmixce) member [vector 6,7]),is_valid(YYYYMMDD((19000000+in0.bmixce))))) ==1) && ((sql_and((length_of(in0.bmixce) member [vector 8]),is_valid(YYYYMMDD(in0.bmixce)))) ==0)),0))begin
  bzt_1=1;
  plan_restric_prr_eff_dt=YYYYMMDD(19000000 + in0.bmixce);
end
else if(first_defined(fail_if_error(((sql_and((length_of(in0.bmixce) member [vector 6,7]),is_valid(YYYYMMDD((19000000+in0.bmixce))))) ==0) && ((sql_and((length_of(in0.bmixce) member [vector 8]),is_valid(YYYYMMDD(in0.bmixce)))) ==1)),0))begin
  bzt_1=1;
  plan_restric_prr_eff_dt=YYYYMMDD(in0.bmixce);
end

/*   Default value   */
if(!bzt_1)begin
  plan_restric_prr_eff_dt=fail_if_error(YYYYMMDD(19000101));
end

/*   Rule:Compute plan_restric.prr_thru_dt  (#3)   */
if(first_defined(fail_if_error(((sql_and((length_of(in0.bmiyce) member [vector 6,7]),is_valid(YYYYMMDD((19000000+in0.bmiyce))))) ==1) && ((sql_and((length_of(in0.bmiyce) member [vector 8]),is_valid(YYYYMMDD(in0.bmiyce)))) ==0)),0))begin
  bzt_2=1;
  plan_restric_prr_thru_dt=YYYYMMDD(19000000 + in0.bmiyce);
end
else if(first_defined(fail_if_error(((sql_and((length_of(in0.bmiyce) member [vector 6,7]),is_valid(YYYYMMDD((19000000+in0.bmiyce))))) ==0) && ((sql_and((length_of(in0.bmiyce) member [vector 8]),is_valid(YYYYMMDD(in0.bmiyce)))) ==1)),0))begin
  bzt_2=1;
  plan_restric_prr_thru_dt=YYYYMMDD(in0.bmiyce);
end

/*   Default value   */
if(!bzt_2)begin
  plan_restric_prr_thru_dt=fail_if_error(YYYYMMDD(19000101));
end

  out0.plan_restric.prr_sk::plan_restric_prr_sk;
  out0.plan_restric.pln_sk::plan_restric_pln_sk;
  out0.plan_restric.prr_qlfr_cd::plan_restric_prr_qlfr_cd;
  out0.plan_restric.prr_seq_nbr::plan_restric_prr_seq_nbr;
  out0.plan_restric.prr_stat_cd::plan_restric_prr_stat_cd;
  out0.plan_restric.prr_eff_dt::plan_restric_prr_eff_dt;
  out0.plan_restric.prr_thru_dt::plan_restric_prr_thru_dt;
  out0.plan_restric.max_due_amt::plan_restric_max_due_amt;
  out0.plan_restric.due_amt_basis_cd::plan_restric_due_amt_basis_cd;
  out0.plan_restric.msg_cd::plan_restric_msg_cd;
  out0.plan_restric.msg_type_cd::plan_restric_msg_type_cd;
  out0.plan_restric.schedule_id::plan_restric_schedule_id;
  out0.plan_restric.src_env_sk::plan_restric_src_env_sk;
  out0.d_pln.pln_cd::d_pln_pln_cd;
  out0.d_pln.pln_eff_dt::d_pln_pln_eff_dt;
  out0.d_pln.src_env_sk::d_pln_src_env_sk;
  out0.*::in0.*;

end;
