include "/~$PUB_DXF_XFR/dataset_id.xfr";
include "/~$PUB_DXF_XFR/sys_id.xfr";
include "/~$PUB_DXF_XFR/standardize.xfr";
include "/~$PUB_DXF_DML/dxf_job_event_text.dml";

let long dxf_src_sys_id = name_to_sys_id($"SOURCE_LOGICAL_NAME");
let long dxf_src_dataset_id = /* if ( this_partition() == 0 ) get_dataset_id("$DATASET_ID_LOOKUP_PATH") else */ 0;  /* The index into the Source Process table. */
let long stride = number_of_partitions();
let long dxf_src_rec_cnt = this_partition() - stride + 1; /* The number of records processed from this source.  Also used as a record number on each source record. */
let string(unsigned integer(1)) dxf_src_file_name = $"INPUT_FILE_PATH" + "/" + $"INPUT_FILE_PATTERN";
let start_time = now();


out :: length(in) =
begin
  out :: length_of(in.ListPropertiesUser.Row);
end;



/* Add Source ID and Record Number.  Remove trailing blanks from strings. */
out :: normalize(in, index) =
begin
 let string("") v_max_rank;
 let int v_max_rank_index;
 let string('\0')[big endian integer(4)]v_UserGroup=allocate_with_defaults();
 let string('\0')[big endian integer(4)]v_rank=allocate_with_defaults();
        for (let int i=0,i < length_of(in.ListPropertiesUser.Row[index].UserGroup))
        begin
                v_UserGroup =         vector_append(v_UserGroup,(if(string_substring(in.ListPropertiesUser.Row[index].UserGroup[i],1,2)=="WA") "Web Analyst"
                                      else if(string_substring(in.ListPropertiesUser.Row[index].UserGroup[i],1,2)=="WP") "Web Professional" 
                                      else if(string_substring(in.ListPropertiesUser.Row[index].UserGroup[i],1,2)=="WR") "Web Reporter" 
                                      else "Unknown"));
                v_rank =              vector_append(v_rank,(if (v_UserGroup[i]=="Web Analyst")"2" else if (v_UserGroup[i]=="Web Professional")"3" else if (v_UserGroup[i]=="Web Reporter")"1" else "0"));                             
                v_max_rank =          (vector_max(vector_sort_dedup_first(v_rank)));
                v_max_rank_index =    vector_bsearch(v_rank,v_max_rank);
        end


  out.Login :: string_lrtrim(in.ListPropertiesUser.Row[index].Login);
  out.FullName :: string_lrtrim(in.ListPropertiesUser.Row[index].FullName);
  out.Enabled :: string_lrtrim(in.ListPropertiesUser.Row[index].Enabled);
  out.UserGroup :: string_lrtrim(v_UserGroup[v_max_rank_index]);
  out.(*, name == "dxf_src_sys_id") :1: dxf_src_sys_id;
  out.(*, name == "dxf_src_dataset_id") :2: dxf_src_dataset_id;
  out.(*, name == "dxf_src_rec_cnt") :3: dxf_src_rec_cnt;
  out.(*, name == "dxf_src_file_name") :4: dxf_src_file_name;
  out.(*, form == "string") :5: string_trim_no_empty(in.*);
  out.* :: in.*;
end;

/* Write the Source ID and Record Count to the log. */
log_event :: final_log_output() =
begin
  let dxf_job_event_text_t job_info = [record
    dxf_src_dataset_id  dxf_src_dataset_id,  // Only set in partition 0.
    dxf_src_file_name   dxf_src_file_name,
    dxf_src_rec_cnt     dxf_src_rec_cnt,
    dataset_start_dttm  start_time,
    dataset_end_dttm    now(),
  ];

  log_event.event_type :: "DXF Job Log: 0"; // We need to include a fake dataset ID for the rollup key that follows.
  log_event.event_text :: job_info.as_event_text();
end;
