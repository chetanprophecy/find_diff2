!prototype|P|||$AI_MP/util/d_cag_table_unload_test.mp
TABLE_QUERY||||select * from orx_idw_dm_prd..d_member limit 2
TABLE_DML||||$DB_RXCLAIM_DML/rxclaim/rxclaim.d_member.dml
FILE_NAME||||$AI_SERIAL/sb_d_member_test.dat.gz
FILE_DML||||$PUB_DATAHUB_DML/ids_common/ids_common.d_member.dml
SOURCE_TABLE_LIST||||# Schema Name Unqualified Table Name  Fields\nclmprdext     rcex1p                  rxclaimnbr,clmseqnbr,claimsts,carrierid,scarrierid,carrproc,accountid,acctbencde,versionnbr,groupid,groupplan,grpclibenf,groupsic,clmrespsts,memberid,mbrlstnme,mbrfstnme,mbrmdinit,mbrprsncde,mbrrelcde,mbrsex,mbrbirth,mbrage,mbrzip,socsecnbr,durkey,durflag,mbrfamlyid,mbrfamlind,mbrfamltyp,cobind,mbrplan,mbrprodcde,mbrridercd,carenetid,carequalid,carefacid,carefacnam,mbrpcphys,pprsfstnme,pprslstnme,pprsmdinit,pprsspccde,mbraltinfl,mbraltincd,mbraltinid,mbrmeddte,mbrmedtype,mbrhiccde,cardholder,patlastnme,patfrstnme,personcde,relationcd,sexcode,birthdte,eligclarif,custloc,prmcareprv,prmcareprq,facilityid,othcoverag,binnumber,processor,groupnbr,transcde,datesbm,timesbm,orgpdsbmdt,rvdatesbm,clmcounter,genericctr,formlryctr,rxnumber,rxnumberql,refill,dispstatus,dtefilled,compoundcd,prodtypcde,productid,productkey,metricqty,decimalqty,dayssupply,psc,writtendte,nbrflsauth,origincde,sbmclarcd1,pamcnbr,pamccde,prauthnbr,prauthrsn,prauthfdte,prauthtdte,labelname,prodname,drugmfgrid,drugmfgr,gpinumber,genericnme,prdpacuom,prdpacsize,ddid,gcn,gcnseq,kdc,ahfs,drugdeacod,rxotcind,multsrccde,genindover,prdreimind,brndtrdnme,fdatheraeq,metricstrg,drgstrguom,adminroute,dosageform,mntdrugcde,thrdpartyx,drgunitdos,sbmunitdos,altprodtyp,altprodcde,srxnetwrk,srxnettype,rxnetwork,rxnetwrknm,rxnetcarr,regioncde,phraffil,netprior,nettype,netseq,paycntr,phrndclst,phrgpilst,srvprovid,srvprovidq,npiprov,prvncpdpid,sbmsrvprid,sbmsrvprql,srvprovnme,provlockql,provlockid,storenbr,affiliatin,payeeid,disprclass,disprother,pharmzip,presnetwid,prescriber,prescridql,npiprescr,prescdeaid,preslstnme,presfstnme,presmdinit,presspccde,presspccdq,fnlplancde,fnlplandte,planqual,plnndclist,plngpilist,plnpndclst,plnpgpilst,plandrugst,planfrmlry,plnfnlpsch,phrdcschid,phrdcschsq,cltdcschid,cltdcschsq,phrdccscid,phrdccscsq,cltdccscid,cltdccscsq,phrprtscid,cltprtscid,phrrmschid,cltrmschid,prdpflstid,prfprdscid,formulary,formlrflag,tiervalue,contherapy,message1,message2,message3,rejcnt,rejcde1,rejcde2,rejcde3,rjcplanid,durconflct,durintervn,duroutcome,lvlservice,diagnosis,diagnosisq,rvdurcnflc,rvdurintrv,rvduroutcm,rvlvlservc,drgcnflct1,severity1,othrpharm1,dteprvfil1,qtyprvfil1,database1,othrpresc1,freetext1,drgcnflct2,severity2,othrpharm2,dteprvfil2,qtyprvfil2,database2,othrpresc2,freetext2,drgcnflct3,severity3,othrpharm3,dteprvfil3,qtyprvfil3,database3,othrpresc3,freetext3,feetype,awpunitcst,wacunitcst,geapuntcst,ctypeucost,basiscost,priceqty,prodayssup,proqty,rvincntvsb,sbmingrcst,sbmdispfee,sbmpslstax,sbmfslstax,sbmslstax,sbmpatpay,sbmamtdue,sbmincentv,sbmproffee,sbmtothamt,sbmopamtct,sbmopamtql,usualncust,denialdte,othrpayor,calingrcst,caldispfee,calpstax,calfstax,calslstax,calpatpay,caldueamt,calwithhld,calfcopay,calpcopay,calcopay,calprodsel,calatrtax,calexcebft,calincentv,calatrded,calcob,caltothamt,calproffee,calothpaya,calcostsrc,caladmnfee,phringrcst,phrdispfee,phrppstax,phrfstax,phrslstax,phrpatpay,phrdueamt,phrwithhld,phrpprcs,phrprcst,phrptps,unused1,phrcopaysc,phrcopayss,phrfcopay,phrpcopay,phrcopay,phrprodsel,phratrtax,phrexcebft,phrincentv,phratrded,phrcob,phrtothamt,phrproffee,phrothpaya,phrcostsrc,phrcosttyp,phrprctype,phrrate,posingrcst,posdispfee,pospslstax,posfslstax,posslstax,pospatpay,posdueamt,poswithhld,poscopay,posprodsel,posatrtax,posexcebft,posincentv,posatrded,postothamt,posproffee,posothpaya,poscostsrc,clientflag,cltingrcst,cltdispfee,cltslstax,cltpatpay,cltdueamt,cltwithhld,cltprcs,cltprcst,cltptps,unused2,cltcopays,cltcopayss,cltfcopay,cltpcopay,cltcopay,cltprodsel,cltpstax,cltfstax,cltatrtax,cltexcebft,cltincentv,cltatrded,clttothamt,cltproffee,cltcob,cltothpaya,cltcostsrc,cltcosttyp,cltprctype,cltrate,cltprscstp,cltprschnm,cltprocfee,cltpatstax,cltplnstax,cltprvnsel,cltpscbrnd,cltpscnonp,cltpscbrnp,cltcovgap,cltingcstc,cltdspfeec,rspprocfee,rsppatstax,rspplnstax,rspprvnsel,rsppscbrnd,rsppscnonp,rsppscbrnp,rspcovgap,rspingcstc,rspdspfeec,payertype,rspreimbur,rspingrcst,rspdispfee,rsppslstax,rspfslstax,rspslstax,rsppatpay,rspdueamt,rspfcopay,rsppcopay,rspcopay,rspprodsel,rspatrtax,rspexcebft,rspincentv,rspatrded,rsptothamt,rspprofee,rspothpaya,rspaccuded,rsprembft,rspremded,rspplanid,inddedptd,inddedrem,famdedptd,famdedrem,dedsched,dedaccc,dedflag,indlbftut,indlbftptd,indlbftrem,famlbftut,famlbftptd,famlbftrem,lftbftmsch,lftbftaccc,lftbftflag,indbftut,indbmaxptd,fambftut,fambmaxptd,indbmaxrem,fambmaxrem,bftmaxschd,bftmaxaccc,bftmaxflag,indoopptd,famoopptd,indooprem,famooprem,oopsched,oopaccc,oopflag,contribut,contbasis,contsched,contacccd,contflag,rxtflag,reimbursmt,clmorigin,hldclmflag,hldclmdays,partdflag,cobextflg,paextflg,hsaextind,ffpmedrmst,ffpmedpxst,ffpmedmsst,incidentid,etcnbr,dteinjury,adduser,chguser,dmruserid,prauserid,claimrefid,eobdenov,eobpdov,mantrknbr,manrecvdte,pasauthtyp,pasauthid,pasreqtype,pasreqfrom,pasreqthru,pasbasisrq,pasrepfn,pasrepln,passtreet,pascity,passtate,paszip,paspanbr,pasauthnbr,passdocct,clientdef1,clientdef2,clientdef3,clientdef4,clientdef5,cctreserv1,cctreserv2,cctreserv3,cctreserv4,cctreserv5,cctreserv6,cctreserv7,cctreserv8,cctreserv9,cctresrv10,cctresrv11,cctresrv12,cctresrv13,cctresrv14,userfield,messagecd1,messagecd2,messagecd3,extractdte,batchctrl,clntid,clntsgmnt,clntregion,pprstate,sbmplsrvce,sbmpatresd,chgdate,chgtime,sbmcmpdtyp,sbmclarcd2,sbmclarcd3,adminrtesn,nda,anda,andaor,rxnormcode,mntsource,mntcarpror,mntgpilist,cpqspcprg,cpqspcpgin,cpqspcschd,rxnetwrkql,rxnetprcql,prsstate,sbmrphid,sbmrphidql,plantype,lstqualndc,lstqualgpi,ctschedid,prbasischd,regdisor,drugststbl,transben,pharsrvtyp,benunitcst,sbmmdpdamt,calprocfee,calpatstax,calplnstax,calprvnsel,calpscbrnd,calpscnonp,calpscbrnp,calcovgap,calingcstc,caldspfeec,phrprocfee,phrpatstax,phrplnstax,phrprvnsel,phrpscbrnd,phrpscnonp,phrpscbrnp,phrcovgap,phringcstc,phrdspfeec,posprocfee,pospatstax,posplnstax,posprvnsel,pospscbrnd,pospscnonp,pospscbrnp,poscovgap,posingcstc,posdspfeec,cltptpst,phrptpst,benstgql1,benstgamt1,benstgql2,benstgamt2,benstgql3,benstgamt3,benstgql4,benstgamt4,estgensav,spdacctrem,hlthplnamt,delayrsncd,medcdind,medcdid,medcdagnbr,medcdtcn,fmstier,fmsstatus,fmsdfltind,fmsbenlst,fmslstlvl3,fmslstlvl2,fmslstlvl1,fmsruleset,fmsrule,fmsproccd,newline
SOURCE_DB_LIST||||$[get_matching_db_list(AI_SOURCE_DB_LIST, AI_SOURCE_DB_GROUPS, 'clmprdext', 'clmprdext.rcex1p')]
DO_SOURCE||||0
DO_CLEAN||||1
WHERE_CLAUSE||||clmorigin != 's'
ALTERNATE_SOURCE||||$[ string_concat("rce", (string(""))(datetime("CYYMM"))(datetime('YYYYMMDD'))(datetime('YYYY-MM-DD HH24:MI:SS'))START_CHANGES_TIME)]
FROM_CLAUSE_VEC||||$[ \r\nbegin\r\n\r\nlet string("")[int] from_clause_vec = [vector];\r\nlet decimal("")[int] indexes = [vector];\r\nlet decimal("") curr_table_index = -1;\r\nlet string("")[int] from_clause = [vector];\r\n\r\nif(QUERY_TYPE_ID == "1")\r\n    from_clause_vec = for ( let db in SOURCE_DB_INFO_VEC ) : "  FROM " + string_join(\r\n     for ( let tbl in SOURCE_TABLE_INFO_VEC ) :      \r\n        if ( tbl.table_name member ONLY_IN_FIRST_DB_TABLE_VEC )\r\n          SOURCE_DB_INFO_VEC[0].physical_schema + "." + tbl.table_name + tbl.sql_alias\r\n        else\r\n          db.physical_schema + "." + tbl.table_name + tbl.sql_alias,\r\n    "\\n     , ");\r\nelse if(QUERY_TYPE_ID == "2") begin\r\n    \r\n    for ( let db in SOURCE_DB_INFO_VEC ) \r\n     for(let sys in SOURCE_TABLE_INFO_VEC) \r\n       if(db.logical_schema == sys.schema_name) indexes = vector_append(indexes,index_of(db));\r\n\r\n    for ( let i = 0 , i < length_of(SOURCE_DB_INFO_VEC)/length_of(SOURCE_TABLE_INFO_VEC) ) begin\r\n      from_clause = [vector];\r\n      for ( let tbl in SOURCE_TABLE_INFO_VEC ) begin\r\n        curr_table_index = index_of(tbl);\r\n\r\n      if ( DAILY_FLAG== 'N' and tbl.table_name == "rcex1p" and !is_blank(ALTERNATE_SOURCE) )\r\n          from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index] + i].physical_schema + "." + ALTERNATE_SOURCE + tbl.sql_alias);\r\n       else if ( tbl.table_name member ONLY_IN_FIRST_DB_TABLE_VEC ) \r\n          from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index]].physical_schema + "." + tbl.table_name + tbl.sql_alias);\r\n       else if (string_like(SOURCE_DB_INFO_VEC[indexes[curr_table_index] + i].physical_schema,'%nvm%') and  tbl.table_name == "rcex1p" and DAILY_FLAG== 'Y'  )\r\n          from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index] + i].physical_schema + "." + string_concat("rce", (string(''))(datetime('CYYMM'))datetime_add((datetime('YYYY-MM-DD HH24:MI:SS')) START_CHANGES_TIME , days=-1)) + tbl.sql_alias);\r\n       else \r\n          from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index] + i].physical_schema + "." + tbl.table_name + tbl.sql_alias);\r\n      end\r\n      from_clause_vec = vector_append(from_clause_vec, "  FROM " + string_join(from_clause, "\\n     , "));\r\n    end\r\nend\r\nelse if(QUERY_TYPE_ID == "3") from_clause_vec = [vector];\r\nresult :: from_clause_vec;\r\nend\r\n\r\n\r\n]
READ_TBL_SQL_VEC:sandbox||||$[ \r\nbegin\r\nlet string("") v_local_where_clause_file_location=if(is_blank(SOURCE_SYSTEM_OVERRIDE)) \r\n        string_concat(AI_SERIAL , "/override/get." , SOURCE_LOWER , ".txt") \r\n    else \r\n        string_concat(AI_SERIAL , "/override/get." , SOURCE_SYSTEM_OVERRIDE , "." , string_split(SOURCE_LOWER,".")[1] , ".txt" );\r\n\r\nlet string("") v_local_get_bypass_file_location=if(is_blank(SOURCE_SYSTEM_OVERRIDE)) \r\n        string_concat(AI_SERIAL , "/no_bypass/get." , SOURCE_LOWER , ".txt") \r\n    else \r\n        string_concat(AI_SERIAL , "/no_bypass/get." , SOURCE_SYSTEM_OVERRIDE , "." , string_split(SOURCE_LOWER,".")[1] , ".txt" );\r\n\r\nlet string("") v_where_clause=if(file_information(v_local_where_clause_file_location).found) read_file(v_local_where_clause_file_location) else WHERE_CLAUSE ;\r\nlet string("") v_final_where_clause=if( ( file_information(v_local_get_bypass_file_location).found) && (USE_GET_BYPASS_CTL=="Y") ) v_where_clause  \r\n                                    else if ( (not file_information(v_local_get_bypass_file_location).found) && (USE_GET_BYPASS_CTL=="Y") ) " where 1 = 2 "\r\n                                    else v_where_clause  ;\r\n\r\nlet string("")[int] read_sql_vec = [vector];\r\nlet decimal("")[int] indexes = [vector];\r\nlet string("") read_sql = "";\r\nlet int v_optimize_string_index=string_index(v_final_where_clause,"OPTIMIZE FOR ALL ROWS");\r\n\r\nv_final_where_clause=if( not is_blank(ABLOCAL_EXPR) && ( v_optimize_string_index > 0 )  && not is_blank(v_final_where_clause) )\r\n                          string_concat(string_substring(v_final_where_clause,0,v_optimize_string_index -1 ), "  AND  ABLOCAL() " , "OPTIMIZE FOR ALL ROWS")\r\n                      else v_final_where_clause ;\r\n\r\n\r\nif(QUERY_TYPE_ID == "1" || QUERY_TYPE_ID == "2") read_sql_vec = for ( let from_clause in FROM_CLAUSE_VEC ) :\r\n  "SELECT " + (if ( SELECT_HINT == "" ) "" else SELECT_HINT + "\\n       ") + SELECT_FIELDS + "\\n" +\r\n  from_clause + "\\n" +\r\n\r\n// below if loop is added for nvm\r\n (if (string_like(from_clause,'%nvm%') and DAILY_FLAG == 'Y' ) WHERE_CLAUSE + " and rcex1p.datesbm between " + (string(''))(datetime('YYYYMMDD'))datetime_add((datetime('YYYY-MM-DD HH24:MI:SS')) START_CHANGES_TIME , days=-1)  +\r\n  " and " + (string(''))(datetime('YYYYMMDD'))datetime_add((datetime('YYYY-MM-DD HH24:MI:SS')) END_CHANGES_TIME , days=-1)    + " OPTIMIZE FOR ALL ROWS"\r\n        else WHERE_CLAUSE\r\n)\r\n//  v_final_where_clause \r\n +\r\n  (if ( CLIENT_FILTER_CLAUSE == "" ) "" else "\\n   AND ( " + CLIENT_FILTER_CLAUSE + " )") +\r\n  (if ( v_final_where_clause == "" && not is_blank(ABLOCAL_EXPR ) ) "    WHERE ABLOCAL()" else "") +\r\n  (if ( v_final_where_clause != "" && ABLOCAL_EXPR != "" ) "\\n " else "");\r\nelse if(QUERY_TYPE_ID == "3") begin\r\n  for ( let db in SOURCE_DB_INFO_VEC ) \r\n     for(let sys in SOURCE_TABLE_INFO_VEC) \r\n       if(db.logical_schema == sys.schema_name) indexes = vector_append(indexes,index_of(db));\r\n\r\n  for ( let i = 0 , i < length_of(SOURCE_DB_INFO_VEC)/length_of(SOURCE_TABLE_INFO_VEC) ) begin\r\n    read_sql = SQL;\r\n    for(let index in indexes) \r\n      read_sql = string_replace(read_sql, SOURCE_DB_INFO_VEC[index].logical_schema + ".", SOURCE_DB_INFO_VEC[i + index].physical_schema + ".");\r\n    read_sql_vec = vector_append(read_sql_vec, read_sql);\r\n  end\r\n  \r\n\r\nend\r\n\r\nresult :: read_sql_vec;\r\n\r\n\r\nend\r\n]
DO_PUBLISH_CLEAN_FILE||||1
ENABLE_DEFAULT_RULES||||True
SQL||||SELECT rcex1p.rxclaimnbr, rcex1p.clmseqnbr, rcex1p.claimsts, rcex1p.carrierid, rcex1p.scarrierid, rcex1p.carrproc, rcex1p.accountid, rcex1p.acctbencde, rcex1p.versionnbr, rcex1p.groupid, rcex1p.groupplan, rcex1p.grpclibenf, rcex1p.groupsic, rcex1p.clmrespsts, rcex1p.memberid, rcex1p.mbrlstnme, rcex1p.mbrfstnme, rcex1p.mbrmdinit, rcex1p.mbrprsncde, rcex1p.mbrrelcde, rcex1p.mbrsex, rcex1p.mbrbirth, rcex1p.mbrage, rcex1p.mbrzip, rcex1p.socsecnbr, rcex1p.durkey, rcex1p.durflag, rcex1p.mbrfamlyid, rcex1p.mbrfamlind, rcex1p.mbrfamltyp, rcex1p.cobind, rcex1p.mbrplan, rcex1p.mbrprodcde, rcex1p.mbrridercd, rcex1p.carenetid, rcex1p.carequalid, rcex1p.carefacid, rcex1p.carefacnam, rcex1p.mbrpcphys, rcex1p.pprsfstnme, rcex1p.pprslstnme, rcex1p.pprsmdinit, rcex1p.pprsspccde, rcex1p.mbraltinfl, rcex1p.mbraltincd, rcex1p.mbraltinid, rcex1p.mbrmeddte, rcex1p.mbrmedtype, rcex1p.mbrhiccde, rcex1p.cardholder, rcex1p.patlastnme, rcex1p.patfrstnme, rcex1p.personcde, rcex1p.relationcd, rcex1p.sexcode, rcex1p.birthdte, rcex1p.eligclarif, rcex1p.custloc, rcex1p.prmcareprv, rcex1p.prmcareprq, rcex1p.facilityid, rcex1p.othcoverag, rcex1p.binnumber, rcex1p.processor, rcex1p.groupnbr, rcex1p.transcde, rcex1p.datesbm, rcex1p.timesbm, rcex1p.orgpdsbmdt, rcex1p.rvdatesbm, rcex1p.clmcounter, rcex1p.genericctr, rcex1p.formlryctr, rcex1p.rxnumber, rcex1p.rxnumberql, rcex1p.refill, rcex1p.dispstatus, rcex1p.dtefilled, rcex1p.compoundcd, rcex1p.prodtypcde, rcex1p.productid, rcex1p.productkey, rcex1p.metricqty, rcex1p.decimalqty, rcex1p.dayssupply, rcex1p.psc, rcex1p.writtendte, rcex1p.nbrflsauth, rcex1p.origincde, rcex1p.sbmclarcd1, rcex1p.pamcnbr, rcex1p.pamccde, rcex1p.prauthnbr, rcex1p.prauthrsn, rcex1p.prauthfdte, rcex1p.prauthtdte, rcex1p.labelname, rcex1p.prodname, rcex1p.drugmfgrid, rcex1p.drugmfgr, rcex1p.gpinumber, rcex1p.genericnme, rcex1p.prdpacuom, rcex1p.prdpacsize, rcex1p.ddid, rcex1p.gcn, rcex1p.gcnseq, rcex1p.kdc, rcex1p.ahfs, rcex1p.drugdeacod, rcex1p.rxotcind, rcex1p.multsrccde, rcex1p.genindover, rcex1p.prdreimind, rcex1p.brndtrdnme, rcex1p.fdatheraeq, rcex1p.metricstrg, rcex1p.drgstrguom, rcex1p.adminroute, rcex1p.dosageform, rcex1p.mntdrugcde, rcex1p.thrdpartyx, rcex1p.drgunitdos, rcex1p.sbmunitdos, rcex1p.altprodtyp, rcex1p.altprodcde, rcex1p.srxnetwrk, rcex1p.srxnettype, rcex1p.rxnetwork, rcex1p.rxnetwrknm, rcex1p.rxnetcarr, rcex1p.regioncde, rcex1p.phraffil, rcex1p.netprior, rcex1p.nettype, rcex1p.netseq, rcex1p.paycntr, rcex1p.phrndclst, rcex1p.phrgpilst, rcex1p.srvprovid, rcex1p.srvprovidq, rcex1p.npiprov, rcex1p.prvncpdpid, rcex1p.sbmsrvprid, rcex1p.sbmsrvprql, rcex1p.srvprovnme, rcex1p.provlockql, rcex1p.provlockid, rcex1p.storenbr, rcex1p.affiliatin, rcex1p.payeeid, rcex1p.disprclass, rcex1p.disprother, rcex1p.pharmzip, rcex1p.presnetwid, rcex1p.prescriber, rcex1p.prescridql, rcex1p.npiprescr, rcex1p.prescdeaid, rcex1p.preslstnme, rcex1p.presfstnme, rcex1p.presmdinit, rcex1p.presspccde, rcex1p.presspccdq, rcex1p.fnlplancde, rcex1p.fnlplandte, rcex1p.planqual, rcex1p.plnndclist, rcex1p.plngpilist, rcex1p.plnpndclst, rcex1p.plnpgpilst, rcex1p.plandrugst, rcex1p.planfrmlry, rcex1p.plnfnlpsch, rcex1p.phrdcschid, rcex1p.phrdcschsq, rcex1p.cltdcschid, rcex1p.cltdcschsq, rcex1p.phrdccscid, rcex1p.phrdccscsq, rcex1p.cltdccscid, rcex1p.cltdccscsq, rcex1p.phrprtscid, rcex1p.cltprtscid, rcex1p.phrrmschid, rcex1p.cltrmschid, rcex1p.prdpflstid, rcex1p.prfprdscid, rcex1p.formulary, rcex1p.formlrflag, rcex1p.tiervalue, rcex1p.contherapy, rcex1p.message1, rcex1p.message2, rcex1p.message3, rcex1p.rejcnt, rcex1p.rejcde1, rcex1p.rejcde2, rcex1p.rejcde3, rcex1p.rjcplanid, rcex1p.durconflct, rcex1p.durintervn, rcex1p.duroutcome, rcex1p.lvlservice, rcex1p.diagnosis, rcex1p.diagnosisq, rcex1p.rvdurcnflc, rcex1p.rvdurintrv, rcex1p.rvduroutcm, rcex1p.rvlvlservc, rcex1p.drgcnflct1, rcex1p.severity1, rcex1p.othrpharm1, rcex1p.dteprvfil1, rcex1p.qtyprvfil1, rcex1p.database1, rcex1p.othrpresc1, rcex1p.freetext1, rcex1p.drgcnflct2, rcex1p.severity2, rcex1p.othrpharm2, rcex1p.dteprvfil2, rcex1p.qtyprvfil2, rcex1p.database2, rcex1p.othrpresc2, rcex1p.freetext2, rcex1p.drgcnflct3, rcex1p.severity3, rcex1p.othrpharm3, rcex1p.dteprvfil3, rcex1p.qtyprvfil3, rcex1p.database3, rcex1p.othrpresc3, rcex1p.freetext3, rcex1p.feetype, rcex1p.awpunitcst, rcex1p.wacunitcst, rcex1p.geapuntcst, rcex1p.ctypeucost, rcex1p.basiscost, rcex1p.priceqty, rcex1p.prodayssup, rcex1p.proqty, rcex1p.rvincntvsb, rcex1p.sbmingrcst, rcex1p.sbmdispfee, rcex1p.sbmpslstax, rcex1p.sbmfslstax, rcex1p.sbmslstax, rcex1p.sbmpatpay, rcex1p.sbmamtdue, rcex1p.sbmincentv, rcex1p.sbmproffee, rcex1p.sbmtothamt, rcex1p.sbmopamtct, rcex1p.sbmopamtql, rcex1p.usualncust, rcex1p.denialdte, rcex1p.othrpayor, rcex1p.calingrcst, rcex1p.caldispfee, rcex1p.calpstax, rcex1p.calfstax, rcex1p.calslstax, rcex1p.calpatpay, rcex1p.caldueamt, rcex1p.calwithhld, rcex1p.calfcopay, rcex1p.calpcopay, rcex1p.calcopay, rcex1p.calprodsel, rcex1p.calatrtax, rcex1p.calexcebft, rcex1p.calincentv, rcex1p.calatrded, rcex1p.calcob, rcex1p.caltothamt, rcex1p.calproffee, rcex1p.calothpaya, rcex1p.calcostsrc, rcex1p.caladmnfee, rcex1p.phringrcst, rcex1p.phrdispfee, rcex1p.phrppstax, rcex1p.phrfstax, rcex1p.phrslstax, rcex1p.phrpatpay, rcex1p.phrdueamt, rcex1p.phrwithhld, rcex1p.phrpprcs, rcex1p.phrprcst, rcex1p.phrptps, rcex1p.unused1, rcex1p.phrcopaysc, rcex1p.phrcopayss, rcex1p.phrfcopay, rcex1p.phrpcopay, rcex1p.phrcopay, rcex1p.phrprodsel, rcex1p.phratrtax, rcex1p.phrexcebft, rcex1p.phrincentv, rcex1p.phratrded, rcex1p.phrcob, rcex1p.phrtothamt, rcex1p.phrproffee, rcex1p.phrothpaya, rcex1p.phrcostsrc, rcex1p.phrcosttyp, rcex1p.phrprctype, rcex1p.phrrate, rcex1p.posingrcst, rcex1p.posdispfee, rcex1p.pospslstax, rcex1p.posfslstax, rcex1p.posslstax, rcex1p.pospatpay, rcex1p.posdueamt, rcex1p.poswithhld, rcex1p.poscopay, rcex1p.posprodsel, rcex1p.posatrtax, rcex1p.posexcebft, rcex1p.posincentv, rcex1p.posatrded, rcex1p.postothamt, rcex1p.posproffee, rcex1p.posothpaya, rcex1p.poscostsrc, rcex1p.clientflag, rcex1p.cltingrcst, rcex1p.cltdispfee, rcex1p.cltslstax, rcex1p.cltpatpay, rcex1p.cltdueamt, rcex1p.cltwithhld, rcex1p.cltprcs, rcex1p.cltprcst, rcex1p.cltptps, rcex1p.unused2, rcex1p.cltcopays, rcex1p.cltcopayss, rcex1p.cltfcopay, rcex1p.cltpcopay, rcex1p.cltcopay, rcex1p.cltprodsel, rcex1p.cltpstax, rcex1p.cltfstax, rcex1p.cltatrtax, rcex1p.cltexcebft, rcex1p.cltincentv, rcex1p.cltatrded, rcex1p.clttothamt, rcex1p.cltproffee, rcex1p.cltcob, rcex1p.cltothpaya, rcex1p.cltcostsrc, rcex1p.cltcosttyp, rcex1p.cltprctype, rcex1p.cltrate, rcex1p.cltprscstp, rcex1p.cltprschnm, rcex1p.cltprocfee, rcex1p.cltpatstax, rcex1p.cltplnstax, rcex1p.cltprvnsel, rcex1p.cltpscbrnd, rcex1p.cltpscnonp, rcex1p.cltpscbrnp, rcex1p.cltcovgap, rcex1p.cltingcstc, rcex1p.cltdspfeec, rcex1p.rspprocfee, rcex1p.rsppatstax, rcex1p.rspplnstax, rcex1p.rspprvnsel, rcex1p.rsppscbrnd, rcex1p.rsppscnonp, rcex1p.rsppscbrnp, rcex1p.rspcovgap, rcex1p.rspingcstc, rcex1p.rspdspfeec, rcex1p.payertype, rcex1p.rspreimbur, rcex1p.rspingrcst, rcex1p.rspdispfee, rcex1p.rsppslstax, rcex1p.rspfslstax, rcex1p.rspslstax, rcex1p.rsppatpay, rcex1p.rspdueamt, rcex1p.rspfcopay, rcex1p.rsppcopay, rcex1p.rspcopay, rcex1p.rspprodsel, rcex1p.rspatrtax, rcex1p.rspexcebft, rcex1p.rspincentv, rcex1p.rspatrded, rcex1p.rsptothamt, rcex1p.rspprofee, rcex1p.rspothpaya, rcex1p.rspaccuded, rcex1p.rsprembft, rcex1p.rspremded, rcex1p.rspplanid, rcex1p.inddedptd, rcex1p.inddedrem, rcex1p.famdedptd, rcex1p.famdedrem, rcex1p.dedsched, rcex1p.dedaccc, rcex1p.dedflag, rcex1p.indlbftut, rcex1p.indlbftptd, rcex1p.indlbftrem, rcex1p.famlbftut, rcex1p.famlbftptd, rcex1p.famlbftrem, rcex1p.lftbftmsch, rcex1p.lftbftaccc, rcex1p.lftbftflag, rcex1p.indbftut, rcex1p.indbmaxptd, rcex1p.fambftut, rcex1p.fambmaxptd, rcex1p.indbmaxrem, rcex1p.fambmaxrem, rcex1p.bftmaxschd, rcex1p.bftmaxaccc, rcex1p.bftmaxflag, rcex1p.indoopptd, rcex1p.famoopptd, rcex1p.indooprem, rcex1p.famooprem, rcex1p.oopsched, rcex1p.oopaccc, rcex1p.oopflag, rcex1p.contribut, rcex1p.contbasis, rcex1p.contsched, rcex1p.contacccd, rcex1p.contflag, rcex1p.rxtflag, rcex1p.reimbursmt, rcex1p.clmorigin, rcex1p.hldclmflag, rcex1p.hldclmdays, rcex1p.partdflag, rcex1p.cobextflg, rcex1p.paextflg, rcex1p.hsaextind, rcex1p.ffpmedrmst, rcex1p.ffpmedpxst, rcex1p.ffpmedmsst, rcex1p.incidentid, rcex1p.etcnbr, rcex1p.dteinjury, rcex1p.adduser, rcex1p.chguser, rcex1p.dmruserid, rcex1p.prauserid, rcex1p.claimrefid, rcex1p.eobdenov, rcex1p.eobpdov, rcex1p.mantrknbr, rcex1p.manrecvdte, rcex1p.pasauthtyp, rcex1p.pasauthid, rcex1p.pasreqtype, rcex1p.pasreqfrom, rcex1p.pasreqthru, rcex1p.pasbasisrq, rcex1p.pasrepfn, rcex1p.pasrepln, rcex1p.passtreet, rcex1p.pascity, rcex1p.passtate, rcex1p.paszip, rcex1p.paspanbr, rcex1p.pasauthnbr, rcex1p.passdocct, rcex1p.clientdef1, rcex1p.clientdef2, rcex1p.clientdef3, rcex1p.clientdef4, rcex1p.clientdef5, rcex1p.cctreserv1, rcex1p.cctreserv2, rcex1p.cctreserv3, rcex1p.cctreserv4, rcex1p.cctreserv5, rcex1p.cctreserv6, rcex1p.cctreserv7, rcex1p.cctreserv8, rcex1p.cctreserv9, rcex1p.cctresrv10, rcex1p.cctresrv11, rcex1p.cctresrv12, rcex1p.cctresrv13, rcex1p.cctresrv14, rcex1p.userfield, rcex1p.messagecd1, rcex1p.messagecd2, rcex1p.messagecd3, rcex1p.extractdte, rcex1p.batchctrl, rcex1p.clntid, rcex1p.clntsgmnt, rcex1p.clntregion, rcex1p.pprstate, rcex1p.sbmplsrvce, rcex1p.sbmpatresd, rcex1p.chgdate, rcex1p.chgtime, rcex1p.sbmcmpdtyp, rcex1p.sbmclarcd2, rcex1p.sbmclarcd3, rcex1p.adminrtesn, rcex1p.nda, rcex1p.anda, rcex1p.andaor, rcex1p.rxnormcode, rcex1p.mntsource, rcex1p.mntcarpror, rcex1p.mntgpilist, rcex1p.cpqspcprg, rcex1p.cpqspcpgin, rcex1p.cpqspcschd, rcex1p.rxnetwrkql, rcex1p.rxnetprcql, rcex1p.prsstate, rcex1p.sbmrphid, rcex1p.sbmrphidql, rcex1p.plantype, rcex1p.lstqualndc, rcex1p.lstqualgpi, rcex1p.ctschedid, rcex1p.prbasischd, rcex1p.regdisor, rcex1p.drugststbl, rcex1p.transben, rcex1p.pharsrvtyp, rcex1p.benunitcst, rcex1p.sbmmdpdamt, rcex1p.calprocfee, rcex1p.calpatstax, rcex1p.calplnstax, rcex1p.calprvnsel, rcex1p.calpscbrnd, rcex1p.calpscnonp, rcex1p.calpscbrnp, rcex1p.calcovgap, rcex1p.calingcstc, rcex1p.caldspfeec, rcex1p.phrprocfee, rcex1p.phrpatstax, rcex1p.phrplnstax, rcex1p.phrprvnsel, rcex1p.phrpscbrnd, rcex1p.phrpscnonp, rcex1p.phrpscbrnp, rcex1p.phrcovgap, rcex1p.phringcstc, rcex1p.phrdspfeec, rcex1p.posprocfee, rcex1p.pospatstax, rcex1p.posplnstax, rcex1p.posprvnsel, rcex1p.pospscbrnd, rcex1p.pospscnonp, rcex1p.pospscbrnp, rcex1p.poscovgap, rcex1p.posingcstc, rcex1p.posdspfeec, rcex1p.cltptpst, rcex1p.phrptpst, rcex1p.benstgql1, rcex1p.benstgamt1, rcex1p.benstgql2, rcex1p.benstgamt2, rcex1p.benstgql3, rcex1p.benstgamt3, rcex1p.benstgql4, rcex1p.benstgamt4, rcex1p.estgensav, rcex1p.spdacctrem, rcex1p.hlthplnamt, rcex1p.delayrsncd, rcex1p.medcdind, rcex1p.medcdid, rcex1p.medcdagnbr, rcex1p.medcdtcn, rcex1p.fmstier, rcex1p.fmsstatus, rcex1p.fmsdfltind, rcex1p.fmsbenlst, rcex1p.fmslstlvl3, rcex1p.fmslstlvl2, rcex1p.fmslstlvl1, rcex1p.fmsruleset, rcex1p.fmsrule, rcex1p.fmsproccd FROM clmprdext.RCE12306 rcex1p WHERE clmorigin != 's' and carrierid='PBS7028' AND DATESBM ='20230623'
RUN_ID||||20230627090909
