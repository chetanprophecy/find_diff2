!prototype|P|||${AI_PSET}/get.join.files.interim.pset
DRIVER_SOURCE_NAME||||rxclaim_ctrx.rcmaip
DRIVER_SOURCE_LOGICAL_NAME||||orca_rxclaim
TARGET_NAME||||rxclaim_ctrx.rcmaip_rcmeip
DRIVER_XFR||||/*   Do not edit. Generated file - BRE 3.2.6.4;;Default deployment;   */\nlet decimal('') bzt_0_9e1c560a_5c0f67bf_343a_3 = $DRIVER_START_DATE;\nlet decimal('') bzt_1_9e1c560a_5c0f67bf_343a_3 = $DRIVER_END_DATE;\n\n/*@\ndependency_analysis:\n[\n  [out0.src_env_sk,[passthrough],in0.dxf_src_sys_id]\n  [out0.*,in0.*]\n]\nmetrics:\n{\n  dependencies:\n  [\n     [out0.ahl9dt,'ahl9dt',1,0]\n     [out0.rxt_create_dttm,'rxt_create_dttm',1,0]\n     [out0.ahdyib,'ahdyib',1,0]\n     [out0.ahc5am,'ahc5am',1,0]\n     [out0.ahadvn,'ahadvn',1,0]\n     [out0.ahbmdt,'ahbmdt',1,0]\n     [out0.ahaevn,'ahaevn',1,0]\n     [out0.ahakvn,'ahakvn',1,0]\n     [out0.ahmadt,'ahmadt',1,0]\n     [out0.ahdps3,'ahdps3',1,0]\n     [out0.rxt_src_envrt_id,'rxt_src_envrt_id',1,0]\n     [out0.rxt_create_run_id,'rxt_create_run_id',1,0]\n     [out0.rxt_rec_stat_cd,'rxt_rec_stat_cd',1,0]\n     [out0.ahadcd,'ahadcd',1,0]\n     [out0.ahaccd,'ahaccd',1,0]\n     [out0.filename,'filename',1,0]\n     [out0.ahadtm,'ahadtm',1,0]\n     [out0.dxf_src_dataset_id,'DXF Source Dataset ID',1,0]\n     [out0.newline,'newline',1,0]\n     [out0.dxf_src_file_name,'DXF Source File Name',1,0]\n     [out0.ahaacd,'ahaacd',1,0]\n     [out0.src_env_sk,'src_env_sk',1,0]\n     [out0.dxf_src_rec_cnt,'DXF Source Record Count',1,0]\n     [out0.ahabtm,'ahabtm',1,0]\n     [out0.dxf_src_sys_id,'DXF Source System ID',1,0]\n     [out0.ahdqs3,'ahdqs3',1,0]\n     [out0.ahrjc3,'ahrjc3',1,0]\n     [out0.ahz9n1,'ahz9n1',1,0]\n     [out0.ahc2dt,'ahc2dt',1,0]\n     [out0.rxt_src_envrt_nm,'rxt_src_envrt_nm',1,0]\n     [out0.ahabcd,'ahabcd',1,0]\n     [out0.ahrkc3,'ahrkc3',1,0]\n     [out0.ahalvn,'ahalvn',1,0]\n     [out0.rxt_create_uid,'rxt_create_uid',1,0]\n  ]\n  impacts:\n  [\n     [in0.ahl9dt,'ahl9dt',1,1]\n     [in0.ahdyib,'ahdyib',1,1]\n     [in0.ahc5am,'ahc5am',1,1]\n     [in0.rxt_create_run_id,'rxt_create_run_id',1,1]\n     [in0.dxf_src_file_name,'DXF Source File Name',1,1]\n     [in0.newline,'newline',1,1]\n     [in0.ahadvn,'ahadvn',1,1]\n     [in0.ahbmdt,'ahbmdt',1,1]\n     [in0.ahaevn,'ahaevn',1,1]\n     [in0.ahakvn,'ahakvn',1,1]\n     [in0.ahmadt,'ahmadt',1,1]\n     [in0.ahdps3,'ahdps3',1,1]\n     [in0.ahadcd,'ahadcd',1,1]\n     [in0.dxf_src_sys_id,'DXF Source System ID',2,2]\n     [in0.rxt_src_envrt_nm,'rxt_src_envrt_nm',1,1]\n     [in0.ahaccd,'ahaccd',1,1]\n     [in0.rxt_create_uid,'rxt_create_uid',1,1]\n     [in0.ahadtm,'ahadtm',1,1]\n     [in0.ahaacd,'ahaacd',1,1]\n     [in0.rxt_create_dttm,'rxt_create_dttm',1,1]\n     [in0.filename,'filename',1,1]\n     [in0.dxf_src_dataset_id,'DXF Source Dataset ID',1,1]\n     [in0.rxt_src_envrt_id,'rxt_src_envrt_id',1,1]\n     [in0.dxf_src_rec_cnt,'DXF Source Record Count',1,1]\n     [in0.ahabtm,'ahabtm',1,1]\n     [in0.ahdqs3,'ahdqs3',1,1]\n     [in0.ahrjc3,'ahrjc3',1,1]\n     [in0.ahz9n1,'ahz9n1',1,1]\n     [in0.ahc2dt,'ahc2dt',1,1]\n     [in0.rxt_rec_stat_cd,'rxt_rec_stat_cd',1,1]\n     [in0.ahabcd,'ahabcd',1,1]\n     [in0.ahrkc3,'ahrkc3',1,1]\n     [in0.ahalvn,'ahalvn',1,1]\n  ]\n}\n@*/\n\nout0::reformat(in0)=\nbegin\nlet decimal("\\x01",0) src_env_sk = fail_if_error(in0.dxf_src_sys_id);\n\n\n\n  out0.src_env_sk::src_env_sk;\n  out0.*::in0.*;\n\nend;\n
NON_DRIVER_1_XFR||||/*   Do not edit. Generated file - BRE 3.2.6.4;;Default deployment;   */\nlet decimal('') bzt_0_9e1c560a_5c0f67bf_343a_2 = $NON_DRIVER_1_START_DATE;\nlet decimal('') bzt_1_9e1c560a_5c0f67bf_343a_2 = $NON_DRIVER_1_END_DATE;\n\n/*@\ndependency_analysis:\n[\n  [out0.src_env_sk,[passthrough],in0.dxf_src_sys_id]\n  [out0.*,in0.*]\n]\nmetrics:\n{\n  dependencies:\n  [\n     [out0.alaevn,'alaevn',1,0]\n     [out0.albmdt,'albmdt',1,0]\n     [out0.alc2dt,'alc2dt',1,0]\n     [out0.almlce,'almlce',1,0]\n     [out0.alaccd,'alaccd',1,0]\n     [out0.aladvn,'aladvn',1,0]\n     [out0.almkce,'almkce',1,0]\n     [out0.alabtm,'alabtm',1,0]\n     [out0.rxt_create_dttm,'rxt_create_dttm',1,0]\n     [out0.aladcd,'aladcd',1,0]\n     [out0.rxt_src_envrt_id,'rxt_src_envrt_id',1,0]\n     [out0.src_env_sk,'src_env_sk',1,0]\n     [out0.rxt_create_run_id,'rxt_create_run_id',1,0]\n     [out0.alvqak,'alvqak',1,0]\n     [out0.aladtm,'aladtm',1,0]\n     [out0.alakvn,'alakvn',1,0]\n     [out0.alm1ho,'alm1ho',1,0]\n     [out0.alaacd,'alaacd',1,0]\n     [out0.rxt_rec_stat_cd,'rxt_rec_stat_cd',1,0]\n     [out0.alalvn,'alalvn',1,0]\n     [out0.alabcd,'alabcd',1,0]\n     [out0.alm0ho,'alm0ho',1,0]\n     [out0.alvrak,'alvrak',1,0]\n     [out0.dxf_src_rec_cnt,'DXF Source Record Count',1,0]\n     [out0.dxf_src_sys_id,'DXF Source System ID',1,0]\n     [out0.newline,'newline',1,0]\n     [out0.rxt_src_envrt_nm,'rxt_src_envrt_nm',1,0]\n     [out0.alvpak,'alvpak',1,0]\n     [out0.dxf_src_file_name,'DXF Source File Name',1,0]\n     [out0.alznal,'alznal',1,0]\n     [out0.filename,'filename',1,0]\n     [out0.rxt_create_uid,'rxt_create_uid',1,0]\n     [out0.dxf_src_dataset_id,'DXF Source Dataset ID',1,0]\n  ]\n  impacts:\n  [\n     [in0.alaevn,'alaevn',1,1]\n     [in0.albmdt,'albmdt',1,1]\n     [in0.alc2dt,'alc2dt',1,1]\n     [in0.almlce,'almlce',1,1]\n     [in0.alaccd,'alaccd',1,1]\n     [in0.aladvn,'aladvn',1,1]\n     [in0.almkce,'almkce',1,1]\n     [in0.alabtm,'alabtm',1,1]\n     [in0.aladcd,'aladcd',1,1]\n     [in0.filename,'filename',1,1]\n     [in0.alvqak,'alvqak',1,1]\n     [in0.dxf_src_dataset_id,'DXF Source Dataset ID',1,1]\n     [in0.rxt_create_run_id,'rxt_create_run_id',1,1]\n     [in0.rxt_src_envrt_id,'rxt_src_envrt_id',1,1]\n     [in0.aladtm,'aladtm',1,1]\n     [in0.alakvn,'alakvn',1,1]\n     [in0.alm1ho,'alm1ho',1,1]\n     [in0.alaacd,'alaacd',1,1]\n     [in0.alalvn,'alalvn',1,1]\n     [in0.alabcd,'alabcd',1,1]\n     [in0.alm0ho,'alm0ho',1,1]\n     [in0.dxf_src_file_name,'DXF Source File Name',1,1]\n     [in0.newline,'newline',1,1]\n     [in0.rxt_src_envrt_nm,'rxt_src_envrt_nm',1,1]\n     [in0.alvrak,'alvrak',1,1]\n     [in0.dxf_src_rec_cnt,'DXF Source Record Count',1,1]\n     [in0.dxf_src_sys_id,'DXF Source System ID',2,2]\n     [in0.rxt_rec_stat_cd,'rxt_rec_stat_cd',1,1]\n     [in0.alvpak,'alvpak',1,1]\n     [in0.rxt_create_uid,'rxt_create_uid',1,1]\n     [in0.alznal,'alznal',1,1]\n     [in0.rxt_create_dttm,'rxt_create_dttm',1,1]\n  ]\n}\n@*/\n\nout0::reformat(in0)=\nbegin\nlet decimal("\\x01",0) src_env_sk = fail_if_error(in0.dxf_src_sys_id);\n\n\n\n  out0.src_env_sk::src_env_sk;\n  out0.*::in0.*;\n\nend;\n
NON_DRIVER_2_XFR||||/*   Do not edit. Generated file - BRE 3.2.6.4;;Default deployment;   */\nlet decimal('') bzt_0_9e1c560a_5c0f67bf_343a_0 = $NON_DRIVER_2_START_DATE;\nlet decimal('') bzt_1_9e1c560a_5c0f67bf_343a_0 = $NON_DRIVER_2_END_DATE;\n\n/*@\ndependency_analysis:\n[\n  [out0.*,in0.*]\n]\nmetrics:\n{\n  dependencies:\n  [\n  ]\n  impacts:\n  [\n  ]\n}\n@*/\n\nout0::reformat(in0)=\nbegin\n\n\n\n  out0.*::in0.*;\n\nend;\n
NON_DRIVER_3_XFR||||/*   Do not edit. Generated file - BRE 3.2.6.4;;Default deployment;   */\nlet decimal('') bzt_0_9e1c560a_5c0f67bf_343a_1 = $NON_DRIVER_3_START_DATE;\nlet decimal('') bzt_1_9e1c560a_5c0f67bf_343a_1 = $NON_DRIVER_3_END_DATE;\n\n/*@\ndependency_analysis:\n[\n  [out0.*,in0.*]\n]\nmetrics:\n{\n  dependencies:\n  [\n  ]\n  impacts:\n  [\n  ]\n}\n@*/\n\nout0::reformat(in0)=\nbegin\n\n\n\n  out0.*::in0.*;\n\nend;\n
OVERRIDE_JOIN_KEY||||{alabcd; alaacd; alaccd; aladcd; alznal}
OVERRIDE_JOIN_LEVEL_2_KEY||||{}
OVERRIDE_JOIN_LEVEL_3_KEY||||{}
LOOKUP_FIELDS_KEY||||{}
DRIVER_FILE_TYPE||||Clean
NON_DRIVER_1_SOURCE_NAME||||rxclaim_ctrx.rcmeip
NON_DRIVER_1_FILE_TYPE||||Clean
JOIN_TYPE||||Full Outer Join
JOIN_KEY||||{ahabcd; ahaacd; ahaccd; ahadcd; ahz9n1}
DO_SOURCE||||0
DO_CLEAN||||1
JOIN_XFR:sandbox||||$[\nbegin\nlet join_xfr = if(JOIN_TYPE member [vector "Left Outer Join with ICFF", "Inner Join with ICFF"]) \n                 ""\n               else \n                 make_transform("join", [vector make_arg("in0"), make_arg("in1")], [vector make_arg("out")]);\n                 \nlet rfmt_xfr = if(JOIN_TYPE member [vector "Left Outer Join with ICFF", "Inner Join with ICFF"]) \n                 make_transform("reformat", [vector make_arg("in")], [vector make_arg("out")])\n               else \n                 "";\n                 \nlet join_key = key_info(JOIN_KEY);\nlet override_join_key = key_info(OVERRIDE_JOIN_KEY);\n\nlet in_vec = for(let key in join_key) : "in." + key.field_name;\n\nlet string("") global_vars = if(JOIN_TYPE member [vector "Left Outer Join with ICFF", "Inner Join with ICFF"]) \n"let lookup_identifier_type sec_icff_id = lookup_load('" + NON_DRIVER_1_SEC_FILES_VEC[0] + "', '" + NON_DRIVER_1_SEC_INDEX_VEC[0] + "', 'LKP: DA SEC 1 Template');\nlet bc_lookup_address_type da_address =  allocate_with_defaults();\nlet decimal(\\"\\") match_found =  0;" \n                              else if(JOIN_TYPE member [vector "Left Outer Join with ICFF Lookup","Inner Join with ICFF Lookup"]) \n'include "~$PUB_DXF_XFR/ids/ids_table_properties.xfr";\ninclude "~$PUB_DXF_XFR/common_functions.xfr";\ninclude "~$PUB_DXF_DML/generic_data_types.dml";\n\nlet lookup_identifier_type current_lookup = lookup_not_loaded(); \nlet string("") datafile = "' + NON_DRIVER_1_FILES_VEC[0] + '";\nlet string("") indexfile=this_partition_path(string_replace(datafile,".dat.gz", ".idx")); \n\ntype lookup_record_type = ' + read_file(NON_DRIVER_1_DML_FILE_NAME) + ';' + '\nlet lookup_record_type  lookup_record_value=allocate_with_defaults();\nlet lookup_record_type  lookup_record_value_archive=allocate_with_defaults();' \nelse '' ;  \n                               \n\n/*else if(JOIN_TYPE member [vector "Inner Join with ICFF Lookup"]) \n        'include "~$PUB_DXF_XFR/ids/ids_table_properties.xfr";\n        include "~$PUB_DXF_XFR/common_functions.xfr";\n        include "~$PUB_DXF_DML/generic_data_types.dml";\n\n\n        let lookup_identifier_type current_lookup = lookup_not_loaded(); \n        let string("") datafile = "' + NON_DRIVER_1_FILES_VEC[0] + '";\n        let string("") indexfile=this_partition_path(string_replace(datafile,".dat.gz", ".idx")); \n        type lookup_record_type = ' + read_file(NON_DRIVER_1_DML_FILE_NAME) + ';' + '\n        let lookup_record_type  lookup_record_value=allocate_with_defaults();\n        let lookup_record_type  lookup_record_value_archive=allocate_with_defaults();' + ';' ;*/ ;\n\nif(JOIN_TYPE member [vector "Left Outer Join with ICFF", "Inner Join with ICFF"]) begin\n  rfmt_xfr = add_statement(rfmt_xfr, "  if(lookup_match(sec_icff_id, 'LKP: DA SEC 1 Template', " + string_join(in_vec, ",") + ")) begin \n    da_address = lookup_last(sec_icff_id, 'LKP: DA SEC 1 Template', " + string_join(in_vec, ",") + ").prim_da_address;\n    match_found = 1;\n  end\n  else begin\n    da_address = allocate_with_defaults();\n    match_found = 0;\n  end");\n  \n  for(let key in join_key) \n      rfmt_xfr = add_rules(rfmt_xfr, [vector make_rule("out." + key.field_name, "in." + key.field_name, 1)]);\n      \n  for(let field in string_split(NON_DRIVER_1_OUTPUT_FIELDS , ","))\n    if(vector_search(override_join_key, [record field_name field modifiers [vector]], {field_name}) == -1)\n      rfmt_xfr = add_rules(rfmt_xfr, [vector make_rule("out." + field, "allocate_with_defaults()", 1)]);\n      \n  rfmt_xfr = add_rule(rfmt_xfr, "out.da_address", "da_address");\n  rfmt_xfr = add_rule(rfmt_xfr, "out.match_found", "match_found");\n  rfmt_xfr = add_rule(rfmt_xfr, "out.*", "in.*");\nend\nelse if(JOIN_TYPE member [vector "Left Outer Join with ICFF Lookup","Inner Join with ICFF Lookup"] and PICK_LATEST_REC_ICFF == 'Pick Latest Maching Record') begin\n  rfmt_xfr = '\nout :: reformat( in) =\nbegin \n  let lookup_record_type lookup_record_value = allocate_with_nulls();\n  let lookup_record_type exact_record_value=allocate_with_defaults();\n  let lookup_record_type exact_next_record_value=allocate_with_nulls();\n  \n  let unsigned integer(8) dxf_hk_part1 = in.dxf_hk_part1;\n  let unsigned integer(8) dxf_hk_part2 = in.dxf_hk_part2;\n\n  let decimal("") match_count = 0 ;\n  if (current_lookup == lookup_not_loaded()) \n  current_lookup = lookup_load(this_partition_path(datafile) ,indexfile, "IDS_LKP_TPL"); \n\n  lookup_record_value = if (current_lookup != lookup_not_loaded() ) lookup_last(current_lookup, "IDS_LKP_TPL", dxf_hk_part1) else allocate_with_defaults() ;\n  exact_record_value=allocate_with_defaults();\n  exact_record_value = if (lookup_record_value.dxf_hk_part1 ==0 ) lookup_record_value               // No Match found on half hash key , So this is insert record.\n                      else if  ( dxf_hk_part2 == lookup_record_value.dxf_hk_part2 ) lookup_record_value  //A match is found on dxf part1 as well as dxf part2 keys , this is an exact match in first inetration itself \n                      else                                                                        //A Match is found on half hash key but not on full hash key, find exact match inside iteration  .\n                      begin\n                        match_count=lookup_count(current_lookup, "IDS_LKP_TPL", dxf_hk_part1);\n                          begin block exact_record_match\n                             for (let int k, k < match_count)\n                               begin \n                                exact_next_record_value = if( k == 0 ) lookup_last(current_lookup, "IDS_LKP_TPL", dxf_hk_part1) else lookup_previous(current_lookup,"IDS_LKP_TPL");\n                                 if ( dxf_hk_part2 == exact_next_record_value.dxf_hk_part2 ) \n                                  begin\n                                        exact_record_value = exact_next_record_value;\n                                        exit  exact_record_match;\n                                  end\n                                                                                                 \n                             end\n                          end block exact_record_match\n                       result :: exact_record_value ;\n                       end;\n  out.is_match :: if( exact_record_value.dxf_hk_part1 == 0 and exact_record_value.dxf_hk_part2==0 ) 0 else 1 ;  \n  out.dxf_hk_part1 :1: in.dxf_hk_part1;\n  out.dxf_hk_part2 :2: in.dxf_hk_part2;\\n' +   \n  string_join(for(let field in string_split_no_empty(NON_DRIVER_1_OUTPUT_FIELDS , ",")) : \n    if(vector_search(override_join_key, [record field_name field modifiers [vector]], {field_name}) == -1) "  out." + field + " :: exact_record_value." + field + ";", "\\n")\n  + '\\n  out.* :4: in.* ;\nend ;';\nend\nelse if(JOIN_TYPE member [vector "Left Outer Join with ICFF Lookup","Inner Join with ICFF Lookup"] and PICK_LATEST_REC_ICFF == 'Pick All Matching Records') begin\nrfmt_xfr = 'out::finished(in, index) =\nbegin\n  let lookup_record_type next_rec;\n  let long is_finished;\n  if (current_lookup == lookup_not_loaded()) \n    current_lookup = lookup_load(this_partition_path(datafile) ,indexfile, "IDS_LKP_TPL"); \n    \n  next_rec = if(index == 0) lookup(current_lookup, "IDS_LKP_TPL", in.dxf_hk_part1)\n             else lookup_next(current_lookup,"IDS_LKP_TPL");\n  if(is_null(next_rec))\n    is_finished = 1;\n  else\n  begin\n    is_finished = 0;\n    lookup_record_value = next_rec;\n  end\n  \n  out :: is_finished;\nend;\n\n\nout :: normalize( in, index) =\nbegin\n        //finished() function sets the next record, i.e. global variable lookup_record_type\n\n        //Output the record\n        out.is_match:: if(in.dxf_hk_part2 == lookup_record_value.dxf_hk_part2) 1 else 0 ; \n        out.* :3: lookup_record_value.*;\n        out.dxf_hk_part1 :1: in.dxf_hk_part1;\n        out.dxf_hk_part2 :2: in.dxf_hk_part2;\\n' +   \n        string_join(for(let field in string_split_no_empty(NON_DRIVER_1_OUTPUT_FIELDS , ",")) : \n        if(vector_search(override_join_key, [record field_name field modifiers [vector]], {field_name}) == -1) "  out." + field + " :: lookup_record_value." + field + ";", "\\n")\n        + '\\n  out.* :4: in.* ;\nend;\n\n\n//out::output_select(out)=\n//begin\n//  out :: out.is_match == 1;\n//end;\n';\n\nend \nelse  begin\n  if(join_key != override_join_key)\n    for(let key in join_key) \n      if(key.field_name != override_join_key[index_of(key)].field_name)\n        join_xfr = add_rules(join_xfr, [vector make_rule("out." + key.field_name, "in0." + key.field_name, 1)\n                                          ,make_rule("out." + key.field_name, "in1." + override_join_key[index_of(key)].field_name, 2)\n                                          ]);\n   \n  join_xfr = add_rules(join_xfr, [vector make_rule("out.*", "in0.*", 1)\n                                          ,make_rule("out.*", "in1.*", 2)\n                                          ]);\nend\n\nresult :: if(JOIN_TYPE member [vector "Left Outer Join with ICFF", "Inner Join with ICFF", "Left Outer Join with ICFF Lookup", "Inner Join with ICFF Lookup"]) global_vars + "\\r\\n\\r\\n" + rfmt_xfr \n          else global_vars + "\\r\\n\\r\\n" + join_xfr;\n\n         \nend\n\n]
