!prototype|P|||$AI_PSET/get.iseries.interim.pset
QUERY_TYPE_ID||||2
SOURCE_NAME||||clmprdfil.rctc3p
SOURCE_TABLE_LIST||||# Schema Name Unqualified Table Name  Fields\nclmprdfil     rctc3p                  rip2nb,rioinb,riodcd,riepcd,ril5n1,riencd,rijbcd,rijccd,rijdcd,rilln2,rizhs2,ribms3,riexcd,ria3ha,ria5ha,ria6ha,ria7ha,ria4ha,ria8ha,rihehd,rihahs,rib9hj,ricahj,ricbhj,riatie,riafhi,rio2hu,rib8hj,rigoic,ricchj,riheie,rioahf,rioihj,riojhj,rifsh6,ribgha,riamhg,ribhha,riazhr,rioohb,rin4hr,rin5ia,riythe,ridxhf,ridyhf,riirhf,riy3hf,rivnhf,riyyib,rik3id,riu6hi,riu7hi,riu8hi,rivtid,rizjaq,rizkaq,rit9hj,rirhie,rit0ie,risjie,rit1ie,riqhoc,riqioc,riignb,riksst,riofcd,riojcd,riokcd,riolcd,rikyst,rikzst,riawod,riaxod,rik1st,ris2st,riten2,riigcj,ridmpr,ridnpr,riuop1,ribypc,rikecj,ridopr,ridqpr,riinnb,rik6st,rik5st,rik8st,riognb,rilqst,rii2nb,ris4cd,rissc4,risuc4,riswc4,riusp1,rilgst,ridtpr,rio1c3,rio2c3,riq2c3,riq1c3,rio3c3,rio4c3,rilmdt,rilndt,rioxcd,riasod,riwuhk,riauod,riavod,risnip,risqip,riscip,riwwhk,risoip,rispip,riwvhk,rigupp\nclmprdext     rcex1p                  newline
SOURCE_DB_LIST||||$[get_matching_db_list(AI_SOURCE_DB_LIST, AI_SOURCE_DB_GROUPS, "clmprdfil", "rctc3p") + "\\r\\n" + get_matching_db_list(AI_SOURCE_DB_LIST, AI_SOURCE_DB_GROUPS, "clmprdext", "rcex1p")]
DO_CLEAN||||1
DO_SOURCE||||0
ALTERNATE_SOURCE||||$[ string_concat("rce", (string(""))(datetime("CYYMM"))(datetime('YYYYMMDD'))(datetime('YYYY-MM-DD HH24:MI:SS'))START_CHANGES_TIME)]
START_CHANGES_TIME||||2017-03-01 04:54:52
WHERE_CLAUSE||||$[\r\n  if(is_blank(ALTERNATE_SOURCE))\r\n   "WHERE rcex1p.rxclaimnbr = rctc3p.rip2nb AND rcex1p.clmseqnbr  = rctc3p.rioinb " + \r\n   " OPTIMIZE FOR ALL ROWS"\r\n  else\r\n  "WHERE rcex1p.datesbm between " + string_lrtrim((string(""))(datetime('YYYYMMDD'))(datetime('YYYY-MM-DD HH24:MI:SS')) START_CHANGES_TIME) +\r\n  " and " + string_lrtrim((string(""))(datetime('YYYYMMDD'))(datetime('YYYY-MM-DD HH24:MI:SS')) END_CHANGES_TIME ) + " and rcex1p.rxclaimnbr = rctc3p.rip2nb AND rcex1p.clmseqnbr  = rctc3p.rioinb " +  \r\n  " OPTIMIZE FOR ALL ROWS"\r\n]
FROM_CLAUSE_VEC||||$[ \r\nbegin\r\n\r\nlet string("")[int] from_clause_vec = [vector];\r\nlet decimal("")[int] indexes = [vector];\r\nlet decimal("") curr_table_index = -1;\r\nlet string("")[int] from_clause = [vector];\r\n\r\nif(QUERY_TYPE_ID == "1")\r\n    from_clause_vec = for ( let db in SOURCE_DB_INFO_VEC ) : "  FROM " + string_join(\r\n     for ( let tbl in SOURCE_TABLE_INFO_VEC ) :      \r\n        if ( tbl.table_name member ONLY_IN_FIRST_DB_TABLE_VEC )\r\n          SOURCE_DB_INFO_VEC[0].physical_schema + "." + tbl.table_name + tbl.sql_alias\r\n        else\r\n          db.physical_schema + "." + tbl.table_name + tbl.sql_alias,\r\n    "\\n     , ");\r\nelse if(QUERY_TYPE_ID == "2") begin\r\n    \r\n    for ( let db in SOURCE_DB_INFO_VEC ) \r\n     for(let sys in SOURCE_TABLE_INFO_VEC) \r\n       if(db.logical_schema == sys.schema_name) indexes = vector_append(indexes,index_of(db));\r\n\r\n    for ( let i = 0 , i < length_of(SOURCE_DB_INFO_VEC)/length_of(SOURCE_TABLE_INFO_VEC) ) begin\r\n      from_clause = [vector];\r\n      for ( let tbl in SOURCE_TABLE_INFO_VEC ) begin\r\n        curr_table_index = index_of(tbl);\r\n        if ( tbl.table_name member ONLY_IN_FIRST_DB_TABLE_VEC ) \r\n          from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index]].physical_schema + "." + tbl.table_name + tbl.sql_alias);\r\n        else\r\n          if ( tbl.table_name == "rcex1p" )\r\n            if ( !is_blank(ALTERNATE_SOURCE))\r\n               from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index] + i].physical_schema + "." + ALTERNATE_SOURCE + tbl.sql_alias);\r\n            else\r\n               from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index] + i].physical_schema + "." + tbl.table_name + tbl.sql_alias);\r\n          else\r\n          from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index] + i].physical_schema + "." + tbl.table_name + tbl.sql_alias);\r\n      end\r\n      from_clause_vec = vector_append(from_clause_vec, "  FROM " + string_join(from_clause, "\\n     , "));\r\n    end\r\nend\r\nelse if(QUERY_TYPE_ID == "3") from_clause_vec = [vector];\r\nresult :: from_clause_vec;\r\nend\r\n\r\n\r\n]
CLEAN_FILE_URL||||$[ if ( not DO_CLEAN ) "" else "mfile:" + AI_MFS_PENDING + "/clean." + SOURCE_SYSTEM + "/clean." + SOURCE_LOWER + "." + RUN_ID + ".dat.gz" ]
