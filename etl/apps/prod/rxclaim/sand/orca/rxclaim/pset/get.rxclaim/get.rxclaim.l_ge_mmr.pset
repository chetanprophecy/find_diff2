!prototype|P|||$AI_PSET/get.database.interim.pset
QUERY_TYPE_ID||||3
SOURCE_NAME||||rxclaim.l_ge_mmr
SOURCE_DB_PROJECT||||DB_RXCLAIM
SOURCE_TABLE_LIST||||# Schema Name Unqualified Table Name      Fields\nrxclaim       l_ge_disease_product_xwalk  \nrxclaim       d_cag                       \nrxclaim       d_member                    \nrxclaim       d_member_adjud              \nrxclaim       f_claim_transaction
SOURCE_DBMS_TYPE||||netezza
SOURCE_UNLOAD_INTERFACE||||api
SQL||||WITH VW_RX_DISEASE AS\n(\nSELECT\n DP.PROD_ID                     PROD_ID\n,DP.PROD_SK                     PROD_SK\n,DP.GPI_NO                      GPI_NO\n,DISEASE                        RX_DISEASE\nFROM rxclaim.l_ge_disease_product_xwalk DP\n)\n\n\n,VW_PARMS AS\n(SELECT\n  TO_DATE($'START_CHANGES_TIME', 'DD-MM-YYYY')                                       dPrmSDate,\n TO_DATE($'END_CHANGES_TIME', 'DD-MM-YYYY')                                       dPrmEDate,\n  TO_DATE($'START_CHANGES_TIME', 'DD-MM-YYYY')-$RXA_LKB_DAYS                       dPrmContRxDate,\n  TO_DATE($'START_CHANGES_TIME', 'DD-MM-YYYY')-$RXA_RXMIN_DAYS                     dPrmMinRxDate,\n  (TO_DATE($'END_CHANGES_TIME', 'DD-MM-YYYY') - TO_DATE($'START_CHANGES_TIME', 'DD-MM-YYYY')) + 1   iPrmPrdDays,\n  CAST(.8 AS DOUBLE)                                                dPrmThreshold\n)\n\n,VW_CAG_LIST AS\n(SELECT\n  DC.CAG_SK\n ,DC.CARRIER_NM\n ,DC.CARRIER_ID\n ,DC.CLIENT_NM\n FROM rxclaim.d_cag DC\n WHERE CARRIER_ID IN ($RXA_CAG_ID) \n)\n\n\n,VW_NEW_MBR AS\n(SELECT\n  DM.MBR_ID\n ,DM.MBR_DT_OF_BRTH\n ,DM.MBR_SEX\n ,VRC.RX_DISEASE\n ,MAX(FCT.FILLED_DT) MAX_FILLED_DT\n FROM rxclaim.f_claim_transaction                   FCT\n INNER JOIN rxclaim.D_MEMBER_ADJUD                  DM   ON DM.MBR_ADJUD_SK = FCT.MBR_ADJUD_SK\n INNER JOIN VW_RX_DISEASE                                   VRC  ON VRC.PROD_SK = FCT.PROD_SK\n INNER JOIN VW_CAG_LIST                                     VCL  ON VCL.CAG_SK = FCT.CAG_SK\n CROSS JOIN VW_PARMS                                        VP\n WHERE FCT.FILLED_DT BETWEEN VP.dPrmContRxDate AND VP.dPrmSDate - 1\n GROUP BY\n  DM.MBR_ID\n ,DM.MBR_DT_OF_BRTH\n ,DM.MBR_SEX\n ,VRC.RX_DISEASE\n)\n\n\n,VW_MBR_ADJUD AS\n(SELECT\n  DM.CAG_SK\n ,DM.MBR_ADJUD_SK \n ,DM.MBR_ID\n ,DM.MBR_FAM_ID\n ,DM.MBR_SSN_NBR\n ,DM.MBR_RELSHP_CD\n ,DM.MBR_SEX\n ,DM.MBR_DT_OF_BRTH\n ,DM.MBR_FIRST_NM\n ,DM.MBR_LAST_NM\n FROM rxclaim.d_member_adjud            DM\n INNER JOIN VW_CAG_LIST                         VCL  ON VCL.CAG_SK = DM.CAG_SK\n)\n\n,VW_PRIMARY_MBR AS\n(SELECT\n  DM.CAG_SK\n ,DM.MBR_SK \n ,DM.MBR_FAM_ID\n ,DM.MBR_SSN_NBR\n ,DM.MBR_RELSHP_CD\n ,ROW_NUMBER() OVER (PARTITION BY DM.CAG_SK, DM.MBR_FAM_ID ORDER BY DM.MBR_RELSHP_CD) MBR_FAM_ROWNUM\n FROM rxclaim.d_member                  DM\n INNER JOIN VW_CAG_LIST                         VCL  ON VCL.CAG_SK = DM.CAG_SK\n)\n\n,VW_MAIN_QRY AS\n(\nSELECT \n Q1.CAG_SK\n,Q1.MBR_ID\n,Q1.RX_DISEASE\n,Q1.MBR_DT_OF_BRTH\n,Q1.MBR_SEX\n,Q1.MBR_SSN_NBR\n,Q1.MBR_FAM_ID\n,Q1.MBR_FIRST_NM\n,Q1.MBR_LAST_NM\n,Q1.FV_MBR_FIRST_NM\n,Q1.FV_MBR_LAST_NM\n,Q1.MBR_SK\n,Q1.CLAIM_NBR\n,Q1.CLAIM_SEQ_NBR\n,Q1.CLAIM_STAT_ID\n,Q1.REVRS_CLM_IND\n,Q1.VP_SDATE\n,Q1.VP_EDATE\n,Q1.VP_THRESHOLD\n,Q1.FILLED_DT\n,LEAD(Q1.FILLED_DT,1) OVER (PARTITION BY Q1.CAG_SK, Q1.MBR_ID,Q1.MBR_DT_OF_BRTH,Q1.RX_DISEASE\n                            ORDER BY Q1.FILLED_DT)                                         NEXT_FILLED_DT\n,Q1.DAYS_SPLY\n,Q1.NEW_RX_IND\n,Q1.AVAIL_DAYS\n,Q1.XBOUND_SDATE_IND  \n,Q1.XBOUND_EDATE_IND  \n,Q1.PROD_SK\nFROM (\n    SELECT\n     FCT.CAG_SK                                                                                                                       CAG_SK\n    ,DM.MBR_ID                                                                                                                        MBR_ID\n    ,VRC.RX_DISEASE                                                                                                                   RX_DISEASE\n    ,DM.MBR_DT_OF_BRTH                                                                                                                MBR_DT_OF_BRTH\n    ,DM.MBR_SEX                                                                                                                       MBR_SEX\n    ,FIRST_VALUE(FCT.MBR_SK)      OVER (PARTITION BY FCT.CAG_SK, DM.MBR_ID,DM.MBR_DT_OF_BRTH,DM.MBR_SEX ORDER BY DM.MBR_SSN_NBR DESC) MBR_SK\n    ,FIRST_VALUE(DM.MBR_SSN_NBR)  OVER (PARTITION BY FCT.CAG_SK, DM.MBR_ID,DM.MBR_DT_OF_BRTH,DM.MBR_SEX ORDER BY DM.MBR_SSN_NBR DESC) MBR_SSN_NBR\n    ,FIRST_VALUE(DM.MBR_FAM_ID)   OVER (PARTITION BY FCT.CAG_SK, DM.MBR_ID,DM.MBR_DT_OF_BRTH,DM.MBR_SEX ORDER BY FCT.FILLED_DT  DESC) MBR_FAM_ID\n    ,FIRST_VALUE(DM.MBR_FIRST_NM) OVER (PARTITION BY FCT.CAG_SK, DM.MBR_ID,DM.MBR_DT_OF_BRTH,DM.MBR_SEX ORDER BY FCT.FILLED_DT  DESC) MBR_FIRST_NM\n    ,FIRST_VALUE(DM.MBR_LAST_NM)  OVER (PARTITION BY FCT.CAG_SK, DM.MBR_ID,DM.MBR_DT_OF_BRTH,DM.MBR_SEX ORDER BY FCT.FILLED_DT  DESC) MBR_LAST_NM\n    ,FIRST_VALUE(DM.MBR_FIRST_NM) OVER (PARTITION BY FCT.CAG_SK, DM.MBR_ID,DM.MBR_DT_OF_BRTH,DM.MBR_SEX ORDER BY FCT.FILLED_DT  )     FV_MBR_FIRST_NM\n    ,FIRST_VALUE(DM.MBR_LAST_NM)  OVER (PARTITION BY FCT.CAG_SK, DM.MBR_ID,DM.MBR_DT_OF_BRTH,DM.MBR_SEX ORDER BY FCT.FILLED_DT  )     FV_MBR_LAST_NM\n    ,FCT.CLAIM_NBR                                                                                                                    CLAIM_NBR\n    ,FCT.CLAIM_SEQ_NBR                                                                                                                CLAIM_SEQ_NBR\n    ,FCT.CLAIM_STAT_ID                                                                                                                CLAIM_STAT_ID\n    ,CASE \n     WHEN LEAD(FCT.CLAIM_STAT_ID,1) OVER (PARTITION BY FCT.CAG_SK, DM.MBR_ID,DM.MBR_DT_OF_BRTH,VRC.RX_DISEASE, FCT.CLAIM_NBR \n                                          ORDER BY FCT.CLAIM_SEQ_NBR, FCT.CLAIM_STAT_ID) = 'X' THEN 1\n     WHEN FCT.CLAIM_STAT_ID = 'X' THEN 1\n     ELSE 0                           \n     END                                                                                                                              REVRS_CLM_IND\n    ,VP.dPrmSDate                                                                                                                     VP_SDATE\n    ,VP.dPrmEDate                                                                                                                     VP_EDATE\n    ,VP.dPrmThreshold                                                                                                                 VP_THRESHOLD\n    ,FCT.FILLED_DT                                                                                                                    FILLED_DT\n    ,FCT.DAYS_SPLY                                                                                                                    DAYS_SPLY\n    ,CASE                                                                                                                             \n     WHEN VNM.MBR_ID IS NULL THEN 1\n     ELSE 0\n     END                                                                                                                              NEW_RX_IND\n    ,CASE\n     WHEN FCT.FILLED_DT < VP.dPrmSDate THEN CASE \n                                            WHEN FCT.DAYS_SPLY >= 0 THEN FCT.DAYS_SPLY - (dPrmSDate - FCT.FILLED_DT)\n                                            ELSE                        -(FCT.DAYS_SPLY - (dPrmSDate - FCT.FILLED_DT))\n                                            END\n     ELSE CASE\n         WHEN FCT.FILLED_DT + ABS(FCT.DAYS_SPLY) > VP.dPrmEDate THEN CASE \n                                                                     WHEN FCT.DAYS_SPLY >= 0 THEN (VP.dPrmEDate - FCT.FILLED_DT)+1\n                                                                     ELSE                         -((VP.dPrmEDate - FCT.FILLED_DT)+1)\n                                                                     END\n         ELSE FCT.DAYS_SPLY\n         END\n     END                                                                                                                              AVAIL_DAYS\n    ,CASE WHEN FCT.FILLED_DT < VP.dPrmSDate                 THEN 1 ELSE 0 END                                                         XBOUND_SDATE_IND  \n    ,CASE WHEN FCT.FILLED_DT + FCT.DAYS_SPLY > VP.dPrmEDate THEN 1 ELSE 0 END                                                         XBOUND_EDATE_IND  \n    ,FCT.PROD_SK                                                                                                                      PROD_SK\n    ,ROW_NUMBER() OVER (PARTITION BY DM.MBR_ID, FCT.RX_NBR, REFILL_NBR ORDER BY FILLED_DT)                                            RX_ROWNUM\n     FROM rxclaim.f_claim_transaction                    FCT\n     INNER JOIN VW_PRIMARY_MBR                                   VPM  ON  VPM.MBR_SK = FCT.MBR_SK \n                                                                      AND VPM.CAG_SK = FCT.CAG_SK\n     INNER JOIN VW_MBR_ADJUD                                     DM   ON DM.MBR_ADJUD_SK = FCT.MBR_ADJUD_SK\n     INNER JOIN VW_RX_DISEASE                                    VRC  ON VRC.PROD_SK = FCT.PROD_SK\n\n     LEFT JOIN  VW_NEW_MBR                                       VNM  ON  VNM.MBR_ID = DM.MBR_ID\n                                                                      AND VNM.MBR_DT_OF_BRTH = DM.MBR_DT_OF_BRTH\n                                                                      AND VNM.MBR_SEX = DM.MBR_SEX\n                                                                      AND VNM.RX_DISEASE = VRC.RX_DISEASE\n     CROSS JOIN VW_PARMS                                         VP\n     WHERE FCT.FILLED_DT   >  VP.dPrmSDate - FCT.DAYS_SPLY\n     AND FCT.FILLED_DT     <= VP.dPrmEDate\n    AND FCT.FILLED_DT     >  VP.dPrmMinRxDate\n     AND FCT.SBM_DT BETWEEN VP.dPrmMinRxDate - 10 AND VP.dPrmEDate\n     AND FCT.CLAIM_STAT_ID != 'R'\n  ) Q1   \n  WHERE Q1.REVRS_CLM_IND = 0\n    AND Q1.RX_ROWNUM = 1\n)\n\n\nSELECT\n  CASE ISNULL(VPM.MBR_SSN_NBR,'-')\n  WHEN '-' THEN  CASE ISNULL(Q2.MBR_SSN_NBR,'-') \n                 WHEN '-' THEN  'UNKNOWN'\n                 ELSE Q2.MBR_SSN_NBR\n                 END \n  ELSE VPM.MBR_SSN_NBR  \n  END                                           EMP_SSN_NBR  \n ,TO_CHAR(Q2.MBR_DT_OF_BRTH, 'MM/DD/YYYY')      PAT_DOB\n ,Q2.MBR_SEX                                    GENDER\n ,Q2.MBR_FIRST_NM                               PAT_FIRST\n ,Q2.MBR_LAST_NM                                PAT_LAST\n ,Q2.RX_DISEASE                                 DISEASE_STATE\n ,CASE\n   WHEN ROUND(CAST(Q2.AVAIL_DAYS AS DOUBLE) / CAST((Q2.VP_EDATE - Q2.VP_SDATE + 1) AS DOUBLE),2)  >= ROUND(CAST(Q2.VP_THRESHOLD AS DOUBLE),2) THEN 1\n   ELSE 0\n  END                                           BINARY_ADHERENCE\n ,CASE\n   WHEN CAST(Q2.AVAIL_DAYS AS DOUBLE) >= CAST((Q2.VP_EDATE - Q2.VP_SDATE) AS DOUBLE) THEN ROUND(CAST(1 AS DOUBLE),2)\n   ELSE ROUND(CAST(Q2.AVAIL_DAYS AS DOUBLE) / CAST((Q2.VP_EDATE - Q2.VP_SDATE + 1) AS DOUBLE)  ,2)\n  END                                           MPR\n ,Q2.CAG_SK                                     CAG_SK \n ,Q2.FV_MBR_FIRST_NM                            FV_PAT_FIRST\n ,Q2.FV_MBR_LAST_NM                             FV_PAT_LAST\n ,Q2.MBR_ID                                     MBR_ID\n ,Q2.MBR_SK                                     MBR_SK\n ,Q2.MIN_NEW_RX_IND                             MIN_NEW_RX_IND\n ,Q2.VP_THRESHOLD                               VP_THRESHOLD\n ,Q2.AVAIL_DAYS                                 AVAIL_DAYS\n ,TO_CHAR(Q2.VP_SDATE, 'MM/DD/YYYY')            VP_SDATE\n ,TO_CHAR(Q2.VP_EDATE, 'MM/DD/YYYY')            VP_EDATE\n ,Q2.SUM_XBOUND_SDATE_IND                       SUM_XBOUND_SDATE_IND\n ,Q2.SUM_XBOUND_EDATE_IND                       SUM_XBOUND_EDATE_IND\n ,Q2.SUM_RX_OVERLAP                             SUM_RX_OVERLAP\n ,Q2.MAX_NEW_RX_IND                             MAX_NEW_RX_IND\n ,CASE\n  WHEN  Q2.MBR_FIRST_NM != Q2.FV_MBR_FIRST_NM THEN 1\n  ELSE 0\n  END                                          DIFF_MBR_FIRST_NM_IND\n ,CASE\n  WHEN  Q2.MBR_LAST_NM != Q2.FV_MBR_LAST_NM THEN 1\n  ELSE 0\n  END                                          DIFF_MBR_LAST_NM_IND\nFROM (\n    SELECT\n     Q1.CAG_SK                                          CAG_SK\n    ,Q1.MBR_ID                                          MBR_ID\n    ,Q1.RX_DISEASE                                      RX_DISEASE\n    ,Q1.MBR_DT_OF_BRTH                                  MBR_DT_OF_BRTH\n    ,Q1.MBR_SEX                                         MBR_SEX\n    ,MAX(Q1.MBR_FIRST_NM)                               MBR_FIRST_NM\n    ,MAX(Q1.MBR_LAST_NM)                                MBR_LAST_NM\n    ,MAX(Q1.FV_MBR_FIRST_NM)                            FV_MBR_FIRST_NM\n    ,MAX(Q1.FV_MBR_LAST_NM)                             FV_MBR_LAST_NM\n    ,MIN(Q1.MBR_SK)                                     MBR_SK\n    ,MIN(Q1.MBR_FAM_ID)                                 MBR_FAM_ID\n    ,MIN(Q1.MBR_SSN_NBR)                                MBR_SSN_NBR\n    ,MAX(Q1.VP_THRESHOLD)                               VP_THRESHOLD\n    ,SUM(Q1.AVAIL_DAYS)                                 AVAIL_DAYS\n    ,MAX(Q1.VP_EDATE)                                   VP_EDATE\n    ,MIN(Q1.NEW_RX_IND)                                 MIN_NEW_RX_IND\n    ,CASE MIN(Q1.NEW_RX_IND)\n     WHEN 1 THEN MIN(Q1.FILLED_DT)\n     ELSE MIN(Q1.VP_SDATE)\n     END                                                VP_SDATE\n     ,MAX(Q1.XBOUND_SDATE_IND)                          SUM_XBOUND_SDATE_IND\n     ,MAX(Q1.XBOUND_EDATE_IND)                          SUM_XBOUND_EDATE_IND\n     ,MAX(CASE \n          WHEN Q1.FILLED_DT + Q1.AVAIL_DAYS > Q1.NEXT_FILLED_DT THEN 1\n          ELSE 0\n          END)                                          SUM_RX_OVERLAP\n     ,MAX(Q1.NEW_RX_IND)                                MAX_NEW_RX_IND\n    FROM VW_MAIN_QRY                           Q1\n    GROUP BY\n     Q1.CAG_SK         \n    ,Q1.MBR_ID         \n    ,Q1.MBR_DT_OF_BRTH \n    ,Q1.MBR_SEX        \n    ,Q1.RX_DISEASE     \n) Q2\nLEFT JOIN  VW_PRIMARY_MBR   VPM  ON  VPM.CAG_SK         = Q2.CAG_SK \n                                 AND VPM.MBR_FAM_ID     = Q2.MBR_FAM_ID\n                                 AND VPM.MBR_FAM_ROWNUM = 1;
DO_CLEAN||||1
START_CHANGES_TIME||||01-01-2017
END_CHANGES_TIME||||01-04-2017
