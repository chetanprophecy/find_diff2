!prototype|P|||$AI_PSET/get.iseries.interim.pset
QUERY_TYPE_ID||||2
SOURCE_NAME||||clmprdext.rcex3p
SOURCE_SYSTEM_OVERRIDE||||rxclaim_ctrx
SOURCE_TABLE_LIST||||# Schema Name Unqualified Table Name  Fields\nclmprdext     rcex3p                  rxclaimnbr,clmseqnbr,claimsts,carrierid,accountid,groupid,memberid,incidentid,dteinjury,sbmcaridnb,sbmclmref,sbmempname,sbmempaddr,sbmempcity,sbmempst,sbmempzip,sbmempphn,altprodtyp,altprodcod,prescridql,prescriber,diagcodeql,diagcode,injuryfrdt,injurytodt,inccaridnb,incclmref,incempname,incempaddr,incempcity,incempst,incempzip,incstate,referstat,adjustname,adjustphne,plancode,planeffdt,urfeeamt,stfeeamt,calcuc,userdeffld,incmbrwkph,incmbrwkex,incempolid,incmconbr,incasgnmnt,incactvyid,incactvydt,incstscode,inckenddte,inccovcode,increhabfl,inccovtype,incfundtyp,inchcapper,incnccicde,incdatedth,inclstpddt,incsrcflag,increlated,incdatelmt,incacctype,sbmpatssn,cardholder,apprvdicd9,datesbm,dtefilled,cltphanbr,newline
SOURCE_DB_LIST||||$[get_matching_db_list(AI_SOURCE_DB_LIST, AI_SOURCE_DB_GROUPS, 'clmprdext', 'clmprdext.rcex3p')]
DO_SOURCE||||0
DO_CLEAN||||1
WHERE_CLAUSE||||$[if(DAILY_FLAG != "Y")\r\n    if (CARRIER_ID_MIN == "*")\r\n    "WHERE  1=1 and rcex3p.datesbm between " + string_lrtrim((string(""))(date("YYYYMMDD"))(datetime('YYYY-MM-DD HH24:MI:SS'))START_CHANGES_TIME ) + \r\n    " and " + string_lrtrim((string(""))(date("YYYYMMDD")) (datetime('YYYY-MM-DD HH24:MI:SS'))END_CHANGES_TIME ) +\r\n    " "\r\n    else\r\n    "WHERE  1=1 and rcex3p.datesbm between " + string_lrtrim((string(""))(date("YYYYMMDD"))(datetime('YYYY-MM-DD HH24:MI:SS'))START_CHANGES_TIME ) + \r\n    " and " + string_lrtrim((string(""))(date("YYYYMMDD")) (datetime('YYYY-MM-DD HH24:MI:SS'))END_CHANGES_TIME ) +\r\n    " and rcex3p.carrierid between '" + CARRIER_ID_MIN + "' and '" + CARRIER_ID_MAX +\r\n    "' OPTIMIZE FOR ALL ROWS "\r\nelse  "where 1=1"\r\n]
ALTERNATE_SOURCE||||rce32312
FROM_CLAUSE_VEC||||$[ \r\nbegin\r\n\r\nlet string("")[int] from_clause_vec = [vector];\r\nlet decimal("")[int] indexes = [vector];\r\nlet decimal("") curr_table_index = -1;\r\nlet string("")[int] from_clause = [vector];\r\n\r\nif(QUERY_TYPE_ID == "1")\r\n    from_clause_vec = for ( let db in SOURCE_DB_INFO_VEC ) : "  FROM " + string_join(\r\n     for ( let tbl in SOURCE_TABLE_INFO_VEC ) :      \r\n        if ( tbl.table_name member ONLY_IN_FIRST_DB_TABLE_VEC )\r\n          SOURCE_DB_INFO_VEC[0].physical_schema + "." + tbl.table_name + tbl.sql_alias\r\n        else\r\n          db.physical_schema + "." + tbl.table_name + tbl.sql_alias,\r\n    "\\n     , ");\r\nelse if(QUERY_TYPE_ID == "2") begin\r\n    \r\n    for ( let db in SOURCE_DB_INFO_VEC ) \r\n     for(let sys in SOURCE_TABLE_INFO_VEC) \r\n       if(db.logical_schema == sys.schema_name) indexes = vector_append(indexes,index_of(db));\r\n\r\n    for ( let i = 0 , i < length_of(SOURCE_DB_INFO_VEC)/length_of(SOURCE_TABLE_INFO_VEC) ) begin\r\n      from_clause = [vector];\r\n      for ( let tbl in SOURCE_TABLE_INFO_VEC ) begin\r\n        curr_table_index = index_of(tbl);\r\n\r\n      if ( DAILY_FLAG== 'N' and tbl.table_name == "rcex3p" and !is_blank(ALTERNATE_SOURCE) )\r\n          from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index] + i].physical_schema + "." + ALTERNATE_SOURCE + tbl.sql_alias);\r\n       else if ( tbl.table_name member ONLY_IN_FIRST_DB_TABLE_VEC ) \r\n          from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index]].physical_schema + "." + tbl.table_name + tbl.sql_alias);\r\n       else if (string_like(SOURCE_DB_INFO_VEC[indexes[curr_table_index] + i].physical_schema,'%nvm%') and  tbl.table_name == "rcex3p" and DAILY_FLAG== 'Y'  )\r\n          from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index] + i].physical_schema + "." + ALTERNATE_SOURCE + tbl.sql_alias);\r\n       else \r\n          from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index] + i].physical_schema + "." + tbl.table_name + tbl.sql_alias);\r\n      end\r\n      from_clause_vec = vector_append(from_clause_vec, "  FROM " + string_join(from_clause, "\\n     , "));\r\n    end\r\nend\r\nelse if(QUERY_TYPE_ID == "3") from_clause_vec = [vector];\r\nresult :: from_clause_vec;\r\nend\r\n\r\n\r\n]
READ_TBL_SQL_VEC:sandbox||||$[ \r\nbegin\r\nlet string("") v_local_where_clause_file_location=if(is_blank(SOURCE_SYSTEM_OVERRIDE)) \r\n        string_concat(AI_SERIAL , "/override/get." , SOURCE_LOWER , ".txt") \r\n    else \r\n        string_concat(AI_SERIAL , "/override/get." , SOURCE_SYSTEM_OVERRIDE , "." , string_split(SOURCE_LOWER,".")[1] , ".txt" );\r\n\r\nlet string("") v_local_get_bypass_file_location=if(is_blank(SOURCE_SYSTEM_OVERRIDE)) \r\n        string_concat(AI_SERIAL , "/no_bypass/get." , SOURCE_LOWER , ".txt") \r\n    else \r\n        string_concat(AI_SERIAL , "/no_bypass/get." , SOURCE_SYSTEM_OVERRIDE , "." , string_split(SOURCE_LOWER,".")[1] , ".txt" );\r\n\r\nlet string("") v_where_clause=if(file_information(v_local_where_clause_file_location).found) read_file(v_local_where_clause_file_location) else WHERE_CLAUSE ;\r\nlet string("") v_final_where_clause=if( ( file_information(v_local_get_bypass_file_location).found) && (USE_GET_BYPASS_CTL=="Y") ) v_where_clause  \r\n                                    else if ( (not file_information(v_local_get_bypass_file_location).found) && (USE_GET_BYPASS_CTL=="Y") ) " where 1 = 2 "\r\n                                    else v_where_clause  ;\r\n\r\nlet string("")[int] read_sql_vec = [vector];\r\nlet decimal("")[int] indexes = [vector];\r\nlet string("") read_sql = "";\r\nlet int v_optimize_string_index=string_index(v_final_where_clause,"OPTIMIZE FOR ALL ROWS");\r\n\r\nv_final_where_clause=if( not is_blank(ABLOCAL_EXPR) && ( v_optimize_string_index > 0 )  && not is_blank(v_final_where_clause) )\r\n                          string_concat(string_substring(v_final_where_clause,0,v_optimize_string_index -1 ), "  AND  ABLOCAL() " , "OPTIMIZE FOR ALL ROWS")\r\n                      else v_final_where_clause ;\r\n\r\n\r\nif(QUERY_TYPE_ID == "1" || QUERY_TYPE_ID == "2") read_sql_vec = for ( let from_clause in FROM_CLAUSE_VEC ) :\r\n  "SELECT " + (if ( SELECT_HINT == "" ) "" else SELECT_HINT + "\\n       ") + SELECT_FIELDS + "\\n" +\r\n  from_clause + "\\n" +\r\n// below if loop is added for nvm\r\n (if (string_like(from_clause,'%nvm%') and DAILY_FLAG == 'Y' ) WHERE_CLAUSE + " and rcex3p.datesbm between " + (string(''))(datetime('YYYYMMDD'))datetime_add((datetime('YYYY-MM-DD HH24:MI:SS')) START_CHANGES_TIME , days=-1)  +\r\n  " and " + (string(''))(datetime('YYYYMMDD'))datetime_add((datetime('YYYY-MM-DD HH24:MI:SS')) END_CHANGES_TIME , days=-1)    + " OPTIMIZE FOR ALL ROWS"\r\n        else WHERE_CLAUSE\r\n)\r\n+\r\n // v_final_where_clause +\r\n  (if ( CLIENT_FILTER_CLAUSE == "" ) "" else "\\n   AND ( " + CLIENT_FILTER_CLAUSE + " )") +\r\n  (if ( v_final_where_clause == "" && not is_blank(ABLOCAL_EXPR ) ) "    WHERE ABLOCAL()" else "") +\r\n  (if ( v_final_where_clause != "" && ABLOCAL_EXPR != "" ) "\\n " else "");\r\nelse if(QUERY_TYPE_ID == "3") begin\r\n  for ( let db in SOURCE_DB_INFO_VEC ) \r\n     for(let sys in SOURCE_TABLE_INFO_VEC) \r\n       if(db.logical_schema == sys.schema_name) indexes = vector_append(indexes,index_of(db));\r\n\r\n  for ( let i = 0 , i < length_of(SOURCE_DB_INFO_VEC)/length_of(SOURCE_TABLE_INFO_VEC) ) begin\r\n    read_sql = SQL;\r\n    for(let index in indexes) \r\n      read_sql = string_replace(read_sql, SOURCE_DB_INFO_VEC[index].logical_schema + ".", SOURCE_DB_INFO_VEC[i + index].physical_schema + ".");\r\n    read_sql_vec = vector_append(read_sql_vec, read_sql);\r\n  end\r\n  \r\n\r\nend\r\n\r\nresult :: read_sql_vec;\r\n\r\n\r\nend\r\n]
DO_PUBLISH_CLEAN_FILE||||1
