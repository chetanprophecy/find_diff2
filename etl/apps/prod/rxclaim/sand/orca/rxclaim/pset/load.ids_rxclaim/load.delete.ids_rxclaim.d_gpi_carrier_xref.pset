!prototype|P|||$AI_MP/load.icff.delete.mp
ILM_NAME|l|||nonspec_d_gpi_carrier_xref
TARGET_NAME||||ids_rxclaim.d_gpi_carrier_xref
IDENTIFY_DELETES||||1
RUN_ID||||0
APP_NM||||rxclaim
TRUNCATE_AND_LOAD||||False
DIM_CDC_XFR||||$[\r\nif(not (TRUNCATE_AND_LOAD && INPUT_FILE_DRIVING_MASK == "split"))\r\n'include "' + PUB_DXF_DML + '/generic_data_types.dml" ;\r\ninclude "' + PUB_DXF_XFR + '/common_functions.xfr";\r\nlet string("") v_input_file_type="' + INPUT_FILE_DRIVING_MASK +'";\r\nlet string("") hist_load_suppress_flag="' + IS_SUPPRESS_UPDATE_FOR_HIST + '" ;\r\n//Flag =0 -- Same record\r\n//Flag =1 -- New records - for insert\r\n//Flag =2 -- Change  record - for update\r\n// Make surrogate key as well part of CDC compare , excluding book keeping columns  ( Natural keys , Non Natural keys ( exclude book keeping fileds) \r\n\r\ntype lookup_record_type = ' + TARGET_NK_DML + ';' +\r\n\r\n' let hash_key_type v_hash_key_full= [vector 0 ,0 ];\r\nlet int v_flag=0;\r\nlet decimal("") v_dxf_src_env_rank_lookup_record=0;\r\nlet int v_true_update_flag=0;\r\n\r\nlet  unsigned integer(8) v_hash_key_half=0;\r\nlet lookup_identifier_type current_lookup = lookup_not_loaded();\r\nlet lookup_record_type lookup_record_value = allocate_with_nulls();\r\nlet lookup_record_type exact_record_value=allocate_with_defaults();\r\nlet lookup_record_type exact_next_record_value=allocate_with_nulls();\r\nlet  hash_key_type v_record_hash_from_in=allocate_with_defaults();\r\nlet hash_key_type  v_record_hash_from_lkp=allocate_with_defaults(); \r\n\r\n//These parameters are only added to get count of values.\r\n/*Reformat operation*/\r\n\r\n//let decimal ("") insert_record_count=0;\r\n//let decimal("") update_record_count=0;\r\n//let decimal("") same_record_count=0;\r\n//let decimal("") total_record_count=0;\r\n//let decimal("") suppressed_update_record_count=0;\r\n\r\n // if (current_lookup == lookup_not_loaded()) \r\n       // current_lookup = lookup_load(this_partition_path("' + ICFF_FILE + '"),this_partition_path("' + ICFF_INDEX_FILE + '),"ICFF_TEMPLATE" );\r\n\r\n//let lookup_record_type lookup_record_value;\r\nout::reformat(in) =\r\nbegin\r\n let integer(2) match_count=0;\r\n exact_record_value=allocate_with_defaults();\r\n if (current_lookup == lookup_not_loaded()) \r\n     current_lookup = lookup_load(this_partition_path("' + ICFF_FILE + '"),this_partition_path("'+ICFF_INDEX_FILE+'"),"ICFF_TEMPLATE_IDS" );  \r\n lookup_record_value = first_defined(lookup_last(current_lookup, "ICFF_TEMPLATE_IDS", in.dxf_hk_part1),allocate_with_defaults() );\r\n exact_record_value=allocate_with_defaults();\r\n exact_record_value = if (lookup_record_value.dxf_hk_part1 ==0 ) lookup_record_value               // No Match found on half hash key , So this is insert record.\r\n                      else if  ( in.dxf_hk_part2 == lookup_record_value.dxf_hk_part2 ) lookup_record_value  //A match is found on dxf part1 as well as dxf part2 keys , this is an exact match in first iteration itself \r\n                      else                                                                        //A Match is found on half hash key but not on full hash key, find exact match inside iteration  .\r\n                      begin\r\n                        match_count=lookup_count(current_lookup, "ICFF_TEMPLATE_IDS", in.dxf_hk_part1);\r\n                          begin block exact_record_match\r\n                             for (let int k, k < match_count)\r\n                               begin \r\n                                exact_next_record_value = if( k == 0 ) lookup_last(current_lookup, "ICFF_TEMPLATE_IDS", in.dxf_hk_part1) else lookup_previous(current_lookup,"ICFF_TEMPLATE_IDS");\r\n                                 if ( in.dxf_hk_part2 == exact_next_record_value.dxf_hk_part2 ) \r\n                                  begin\r\n                                        exact_record_value = exact_next_record_value;\r\n                                        exit  exact_record_match;\r\n                                  end\r\n                                                                                                 \r\n                             end\r\n                          end block exact_record_match\r\n                       result :: exact_record_value ;\r\n                       end ; \r\n                                                                      \r\n                                                                    \r\n                                                                         \r\n/* Match Cases \r\n\r\n1. Hash_key_half found a match in IDS ICFF  :\r\n        a.It also found a found a match with full hash key \r\n             1. Go ahead and compare column hash for CDC to find update .\r\n             \r\n        b.Hash key half has a match but there is no mtach for hash_key (full)\r\n            1. It become insert .\r\n2.dxf_hk_part1 has no match in IDS ICFF \r\n      a.This become an insert record .\r\n*/                                                                       \r\n         \r\n                                                                 \r\n//Till Above , the code to find exact record is over .\r\n//Do CDC based on full hash key ( 128 bit) murmur hash algorithm .\r\n    \r\n        v_record_hash_from_in= get_hash(in,"'+FIELDS_TO_COMPARE_HASH_EXPR+'" ); \r\n        v_record_hash_from_lkp= get_hash(exact_record_value,"'+FIELDS_TO_COMPARE_HASH_EXPR+'" ); \r\n        \r\n//Asign Flags to identify change records \r\n        v_flag =      if (exact_record_value.dxf_hk_part1 == 0 or exact_record_value.dxf_hk_part2 ==0  ) 1  // Insert \r\n                     else if ( v_record_hash_from_in == v_record_hash_from_lkp ) 0  //Same  \r\n                     else if( v_record_hash_from_in != v_record_hash_from_lkp )  2  //update\r\n                     else 99; \r\n\r\n\r\n        v_dxf_src_env_rank_lookup_record=first_defined(lookup("SRC_ENVRT_ID",exact_record_value.dxf_src_sys_id).src_env_rnk , 99999 ) ; // A default 99999 will be assigned if no lookup match is found.\r\n//Added condition to ignore suppress record condition where the value of speclty_ind is changing for srv_env_rank logic.\r\n        v_true_update_flag=if( (v_flag == 2 && v_input_file_type=="placeholder" ) or ( v_flag == 2 && v_dxf_src_env_rank_lookup_record < in.src_env_rank and in.speclty_ind == exact_record_value.speclty_ind) or ( v_flag == 2 && hist_load_suppress_flag=="Y"  ) ) 3 else v_flag ;\r\n        \r\n        //This count process is only to capture every type of record count for Audit purpose . This is not part of any CDC process.\r\n        //same_record_count = if (v_flag==0) (same_record_count + 1)  else same_record_count;\r\n        //insert_record_count = if ( v_flag==1) (insert_record_count + 1 ) else insert_record_count;\r\n        //update_record_count  =if ( v_flag==2 ) (update_record_count + 1 )  else update_record_count ;\r\n        //suppressed_update_record_count =if ( v_true_update_flag==3 ) (suppressed_update_record_count + 1 )  else suppressed_update_record_count ;\r\n        //total_record_count =total_record_count +1;\r\n        \r\n        //in.src_env_rank will have default value of 9999 for sources ,where no rank is defined in src_envrt_id lkp file\r\n        // Updates will be suppressesd\r\n        // File type is placeholder .\r\n        //Source that is updating is not a golden ( Most accurate source).\r\n        out.flag :: v_true_update_flag ; \r\n        out.dxf_sk :: if ( v_flag == 2 ) exact_record_value.dxf_sk else in.dxf_sk ; //If record is an update record , dxf sk will be populated from lookup record value .\r\n        out.ids_create_uid :: if ( v_flag == 2 ) exact_record_value.ids_create_uid else in.ids_create_uid ; //If record is an update record , value will come from lookup record value .\r\n        out.ids_create_dttm :: if ( v_flag == 2 ) exact_record_value.ids_create_dttm else in.ids_create_dttm ; //If record is an update record , value will be populated from lookup\r\n        out.ids_create_run_id :: if ( v_flag == 2 ) exact_record_value.ids_create_run_id else in.ids_create_run_id ; //If record is an update record , value will be populated from lookup\r\n        '+  DO_NOT_UPDATE_COL_XFR + '\r\n        out.* :: in.*;\r\n\r\nend\r\n\r\n/*\r\nout :: final_log_output() =\r\nbegin\r\n  out.event_type :: "CDC COUNTS";\r\n  out.event_text :: string_concat("INSERT_RECORD_COUNT = ", insert_record_count,\r\n                                  ";UPDATE_RECORD_COUNT = ", update_record_count ,\r\n                                   "; SUPPRESSED_UPDATE_RECORD_COUNT =", suppressed_update_record_count ,\r\n                                   ";SAME_RECORD_COUNT = ", same_record_count ,\r\n                                   ";TOTAL_RECORD_COUNT = ", total_record_count );\r\nend;*/ ' \r\nelse ''\r\n]
