!prototype|P|||${AI_PSET}/get.join.files.interim.pset
DRIVER_SOURCE_NAME||||ids_common.d_product
DRIVER_SOURCE_LOGICAL_NAME||||orca_rxclaim
TARGET_NAME||||rxclaim.d_product_l_ge_disease_xwalk
DRIVER_XFR||||/*   Do not edit. Generated file - BRE 3.2.6.4;;Default deployment;   */\nlet decimal('') bzt_0_6c54cc0a_58f4a069_7bdb_6 = $DRIVER_START_DATE;\nlet decimal('') bzt_1_6c54cc0a_58f4a069_7bdb_6 = $DRIVER_END_DATE;\n\n/*@\ndependency_analysis:\n[\n  [out0.prod_sk,[passthrough],in0.dxf_sk]\n  [out0.*,in0.*]\n]\nmetrics:\n{\n  dependencies:\n  [\n     [out0.ids_updt_dttm,'ids_updt_dttm',1,0]\n     [out0.filename,'filename',1,0]\n     [out0.prod_sk,'prod_sk',1,0]\n     [out0.src_env_sk,'src_env_sk',1,0]\n     [out0.gpi_no,'gpi_no',1,0]\n     [out0.prod_id,'prod_id',1,0]\n  ]\n  impacts:\n  [\n     [in0.prod_id,'prod_id',1,1]\n     [in0.ids_updt_dttm,'ids_updt_dttm',1,1]\n     [in0.dxf_sk,'dxf_sk',1,1]\n     [in0.src_env_sk,'src_env_sk',1,1]\n     [in0.filename,'filename',1,1]\n     [in0.gpi_no,'gpi_no',1,1]\n  ]\n}\n@*/\n\nout0::reformat(in0)=\nbegin\nlet decimal("\\x01",0) prod_sk = fail_if_error(in0.dxf_sk);\n\n\n\n  out0.prod_sk::prod_sk;\n  out0.*::in0.*;\n\nend;\n
NON_DRIVER_1_XFR||||/*   Do not edit. Generated file - BRE 3.2.6.4;;Default deployment;   */\nlet decimal('') bzt_0_6c54cc0a_58f4a069_7bdb_4 = $NON_DRIVER_1_START_DATE;\nlet decimal('') bzt_1_6c54cc0a_58f4a069_7bdb_4 = $NON_DRIVER_1_END_DATE;\n\n/*@\ndependency_analysis:\n[\n  [out0.gpi_substr,[transform],in0.gpi_substr]\n  [out0.*,in0.*]\n]\nmetrics:\n{\n  dependencies:\n  [\n     [out0.disease,'disease',1,0]\n     [out0.date_removed,'date_removed',1,0]\n     [out0.added_by,'added_by',1,0]\n     [out0.removed_by,'removed_by',1,0]\n     [out0.status,'status',1,0]\n     [out0.xwalk_group,'xwalk_group',1,0]\n     [out0.date_added,'date_added',1,0]\n     [out0.gpi_from_date,'gpi_from_date',1,0]\n     [out0.description,'description',1,0]\n     [out0.medication_class,'medication_class',1,0]\n     [out0.reason_for_removal,'reason_for_removal',1,0]\n     [out0.message_code,'message_code',1,0]\n     [out0.gpi_thru_date,'gpi_thru_date',1,0]\n     [out0.medication_subclass,'medication_subclass',1,0]\n     [out0.gpi_substr,'gpi_substr',1,0]\n     [out0.filename,'filename',1,0]\n     [out0.message_type,'message_type',1,0]\n  ]\n  impacts:\n  [\n     [in0.gpi_from_date,'gpi_from_date',1,1]\n     [in0.date_removed,'date_removed',1,1]\n     [in0.date_added,'date_added',1,1]\n     [in0.disease,'disease',1,1]\n     [in0.status,'status',1,1]\n     [in0.xwalk_group,'xwalk_group',1,1]\n     [in0.removed_by,'removed_by',1,1]\n     [in0.filename,'filename',1,1]\n     [in0.description,'description',1,1]\n     [in0.medication_class,'medication_class',1,1]\n     [in0.reason_for_removal,'reason_for_removal',1,1]\n     [in0.message_code,'message_code',1,1]\n     [in0.added_by,'added_by',1,1]\n     [in0.gpi_substr,'gpi_substr',1,1]\n     [in0.medication_subclass,'medication_subclass',1,1]\n     [in0.message_type,'message_type',1,1]\n     [in0.gpi_thru_date,'gpi_thru_date',1,1]\n  ]\n}\n@*/\n\nout0::reformat(in0)=\nbegin\nlet string("\\x01",charset="iso-8859-15", maximum_length=25) gpi_substr = fail_if_error(re_replace(in0.gpi_substr,'$','*'));\n\n\n\n  out0.gpi_substr::gpi_substr;\n  out0.*::in0.*;\n\nend;\n
NON_DRIVER_2_XFR||||/*   Do not edit. Generated file - BRE 3.2.6.4;;Default deployment;   */\nlet decimal('') bzt_0_6c54cc0a_58f4a069_7bdb_7 = $NON_DRIVER_2_START_DATE;\nlet decimal('') bzt_1_6c54cc0a_58f4a069_7bdb_7 = $NON_DRIVER_2_END_DATE;\n\n/*@\ndependency_analysis:\n[\n  [out0.*,in0.*]\n]\nmetrics:\n{\n  dependencies:\n  [\n  ]\n  impacts:\n  [\n  ]\n}\n@*/\n\nout0::reformat(in0)=\nbegin\n\n\n\n  out0.*::in0.*;\n\nend;\n
NON_DRIVER_3_XFR||||/*   Do not edit. Generated file - BRE 3.2.6.4;;Default deployment;   */\nlet decimal('') bzt_0_6c54cc0a_58f4a069_7bdb_5 = $NON_DRIVER_3_START_DATE;\nlet decimal('') bzt_1_6c54cc0a_58f4a069_7bdb_5 = $NON_DRIVER_3_END_DATE;\n\n/*@\ndependency_analysis:\n[\n  [out0.*,in0.*]\n]\nmetrics:\n{\n  dependencies:\n  [\n  ]\n  impacts:\n  [\n  ]\n}\n@*/\n\nout0::reformat(in0)=\nbegin\n\n\n\n  out0.*::in0.*;\n\nend;\n
OVERRIDE_JOIN_KEY||||{gpi_substr}
OVERRIDE_JOIN_LEVEL_2_KEY||||{}
OVERRIDE_JOIN_LEVEL_3_KEY||||{}
LOOKUP_FIELDS_KEY||||{}
NON_DRIVER_1_FILE_TYPE||||Clean
NON_DRIVER_1_SOURCE_NAME||||rxclaim.l_ge_disease_product_xwalk
DO_CLEAN||||1
JOIN_TYPE||||Regex Join
JOIN_KEY||||{gpi_no}
DRIVER_OUTPUT_FIELDS||||prod_sk,prod_id,gpi_no
NON_DRIVER_1_OUTPUT_FIELDS||||disease,xwalk_group,gpi_substr,medication_class,medication_subclass,description,gpi_from_date,gpi_thru_date,message_type,message_code,status,date_added,added_by,date_removed,removed_by,reason_for_removal
DRIVER_FILE_TYPE||||IDS
JOIN_XFR:sandbox||||$[\nbegin\n\nlet join_xfr = if(JOIN_TYPE member [vector "Left Outer Join with ICFF", "Inner Join with ICFF"]) \n                 ""\n               else \n                 make_transform("join", [vector make_arg("in0"), make_arg("in1")], [vector make_arg("out")]);\n                 \nlet rfmt_xfr = if(JOIN_TYPE member [vector "Left Outer Join with ICFF", "Inner Join with ICFF"]) \n                 make_transform("reformat", [vector make_arg("in")], [vector make_arg("out")])\n               else \n                 "";\n                 \nlet join_key = key_info(JOIN_KEY);\nlet override_join_key = key_info(OVERRIDE_JOIN_KEY);\n\nlet in_vec = for(let key in join_key) : "in." + key.field_name;\n\nlet string("") global_vars = if(JOIN_TYPE member [vector "Left Outer Join with ICFF", "Inner Join with ICFF"]) \n"let lookup_identifier_type sec_icff_id = lookup_load('" + NON_DRIVER_1_SEC_FILES_VEC[0] + "', '" + NON_DRIVER_1_SEC_INDEX_VEC[0] + "', 'LKP: DA SEC 1 Template');\nlet bc_lookup_address_type da_address =  allocate_with_defaults();\nlet decimal(\\"\\") match_found =  0;" else "";\n\nif(JOIN_TYPE member [vector "Left Outer Join with ICFF", "Inner Join with ICFF"]) begin\n  rfmt_xfr = add_statement(rfmt_xfr, "  if(lookup_match(sec_icff_id, 'LKP: DA SEC 1 Template', " + string_join(in_vec, ",") + ")) begin \n    da_address = lookup_last(sec_icff_id, 'LKP: DA SEC 1 Template', " + string_join(in_vec, ",") + ").prim_da_address;\n    match_found = 1;\n  end\n  else begin\n    da_address = allocate_with_defaults();\n    match_found = 0;\n  end");\n  \n  for(let key in join_key) \n      rfmt_xfr = add_rules(rfmt_xfr, [vector make_rule("out." + key.field_name, "in." + key.field_name, 1)]);\n      \n  for(let field in string_split(NON_DRIVER_1_OUTPUT_FIELDS , ","))\n    if(vector_search(override_join_key, [record field_name field modifiers [vector]], {field_name}) == -1)\n      rfmt_xfr = add_rules(rfmt_xfr, [vector make_rule("out." + field, "allocate_with_defaults()", 1)]);\n      \n  rfmt_xfr = add_rule(rfmt_xfr, "out.da_address", "da_address");\n  rfmt_xfr = add_rule(rfmt_xfr, "out.match_found", "match_found");\n  rfmt_xfr = add_rule(rfmt_xfr, "out.*", "in.*");\nend\nelse  begin\n  if(join_key != override_join_key)\n    for(let key in join_key) \n      if(key.field_name != override_join_key[index_of(key)].field_name)\n        join_xfr = add_rules(join_xfr, [vector make_rule("out." + key.field_name, "in0." + key.field_name, 1)\n                                          ,make_rule("out." + key.field_name, "in1." + override_join_key[index_of(key)].field_name, 2)\n                                          ]);\n   \n  join_xfr = add_rules(join_xfr, [vector make_rule("out.*", "in0.*", 1)\n                                          ,make_rule("out.*", "in1.*", 2)\n                                          ]);\nend\n\nresult :: if(JOIN_TYPE member [vector "Left Outer Join with ICFF", "Inner Join with ICFF"]) global_vars + "\\r\\n\\r\\n" + rfmt_xfr \n          else global_vars + "\\r\\n\\r\\n" + join_xfr;\n\nend\n]
