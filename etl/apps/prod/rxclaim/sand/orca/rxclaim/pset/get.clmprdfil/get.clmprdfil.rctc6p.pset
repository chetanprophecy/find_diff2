!prototype|P|||$AI_PSET/get.iseries.interim.pset
QUERY_TYPE_ID||||2
SOURCE_NAME||||clmprdfil.rctc6p
SOURCE_TABLE_LIST||||# Schema Name Unqualified Table Name  Fields\nclmprdfil     rctc6p                  hmp2nb,hmoinb,hmkchs,hmquhd,hmqvhd,hmqwhd,hmqxhd,hmqyhd,hmqzhd,hmkoap,hmhvvd,hmhwvd\nclmprdext     rcex1p                  newline
SOURCE_DB_LIST||||$[get_matching_db_list(AI_SOURCE_DB_LIST, AI_SOURCE_DB_GROUPS, "clmprdfil", "rctc6p") + "\\r\\n" + get_matching_db_list(AI_SOURCE_DB_LIST, AI_SOURCE_DB_GROUPS, "clmprdext", "rcex1p")]
DO_SOURCE||||0
DO_CLEAN||||1
WHERE_CLAUSE||||$[\r\n   " WHERE rcex1p.rxclaimnbr = rctc6p.hmp2nb AND rcex1p.clmseqnbr  = rctc6p.hmoinb "\r\n]
ALTERNATE_SOURCE||||rcex1p
START_CHANGES_TIME||||$[ (string(""))(datetime("YYYY-MM-DD HH24:MI:SS"))now() ]
FROM_CLAUSE_VEC||||$[ \r\nbegin\r\n\r\nlet string("")[int] from_clause_vec = [vector];\r\nlet decimal("")[int] indexes = [vector];\r\nlet decimal("") curr_table_index = -1;\r\nlet string("")[int] from_clause = [vector];\r\n\r\nif(QUERY_TYPE_ID == "1")\r\n    from_clause_vec = for ( let db in SOURCE_DB_INFO_VEC ) : "  FROM " + string_join(\r\n     for ( let tbl in SOURCE_TABLE_INFO_VEC ) :      \r\n        if ( tbl.table_name member ONLY_IN_FIRST_DB_TABLE_VEC )\r\n          SOURCE_DB_INFO_VEC[0].physical_schema + "." + tbl.table_name + tbl.sql_alias\r\n        else\r\n          db.physical_schema + "." + tbl.table_name + tbl.sql_alias,\r\n    "\\n     , ");\r\nelse if(QUERY_TYPE_ID == "2") begin\r\n    \r\n    for ( let db in SOURCE_DB_INFO_VEC ) \r\n     for(let sys in SOURCE_TABLE_INFO_VEC) \r\n       if(db.logical_schema == sys.schema_name) indexes = vector_append(indexes,index_of(db));\r\n\r\n    for ( let i = 0 , i < length_of(SOURCE_DB_INFO_VEC)/length_of(SOURCE_TABLE_INFO_VEC) ) begin\r\n      from_clause = [vector];\r\n      for ( let tbl in SOURCE_TABLE_INFO_VEC ) begin\r\n        curr_table_index = index_of(tbl);\r\n        if ( tbl.table_name member ONLY_IN_FIRST_DB_TABLE_VEC ) \r\n          from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index]].physical_schema + "." + tbl.table_name + tbl.sql_alias);\r\n        else if (string_like(SOURCE_DB_INFO_VEC[indexes[curr_table_index] + i].physical_schema,'%nvm%') and  tbl.table_name == "rcex1p" and DAILY_FLAG== 'Y'  )\r\n          from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index] + i].physical_schema + "." + ALTERNATE_SOURCE + tbl.sql_alias);\r\n        else \r\n          from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index] + i].physical_schema + "." + tbl.table_name + tbl.sql_alias);\r\n      end\r\n      from_clause_vec = vector_append(from_clause_vec, "  FROM " + string_join(from_clause, "\\n     , "));\r\n    end\r\nend\r\nelse if(QUERY_TYPE_ID == "3") from_clause_vec = [vector];\r\nresult :: from_clause_vec;\r\nend\r\n\r\n\r\n]
READ_TBL_SQL_VEC||||$[ \r\nbegin\r\n\r\nlet string("")[int] read_sql_vec = [vector];\r\nlet decimal("")[int] indexes = [vector];\r\nlet string("") read_sql = "";\r\n\r\nif(QUERY_TYPE_ID == "1" ) read_sql_vec = for ( let from_clause in FROM_CLAUSE_VEC ) :\r\n  "SELECT " + (if ( SELECT_HINT == "" ) "" else SELECT_HINT + "\\n       ") + SELECT_FIELDS + "\\n" +\r\n  from_clause + "\\n" +\r\n  WHERE_CLAUSE +\r\n  (if ( CLIENT_FILTER_CLAUSE == "" ) "" else "\\n   AND ( " + CLIENT_FILTER_CLAUSE + " )") +\r\n  (if ( WHERE_CLAUSE == "" && ABLOCAL_EXPR != "" ) "  WHERE ABLOCAL()" else "") +\r\n  (if ( WHERE_CLAUSE != "" && ABLOCAL_EXPR != "" ) "\\n   AND ABLOCAL()" else "");\r\n\r\nelse if (QUERY_TYPE_ID == "2") read_sql_vec = for ( let from_clause in FROM_CLAUSE_VEC ) :\r\n  "SELECT " + (if ( SELECT_HINT == "" ) "" else SELECT_HINT + "\\n       ") + SELECT_FIELDS + "\\n" +\r\n  from_clause + "\\n" + \r\n        (if (string_like(from_clause,'%nvm%') and DAILY_FLAG == 'Y' ) WHERE_CLAUSE + " and rcex1p.datesbm between " + (string(''))(datetime('YYYYMMDD'))datetime_add((datetime('YYYY-MM-DD HH24:MI:SS')) START_CHANGES_TIME , days=-1)  +\r\n  " and " + (string(''))(datetime('YYYYMMDD'))datetime_add((datetime('YYYY-MM-DD HH24:MI:SS')) END_CHANGES_TIME , days=-1)    + " OPTIMIZE FOR ALL ROWS"\r\n        else WHERE_CLAUSE + " OPTIMIZE FOR ALL ROWS"\r\n)\r\n  +\r\n  (if ( CLIENT_FILTER_CLAUSE == "" ) "" else "\\n   AND ( " + CLIENT_FILTER_CLAUSE + " )") +\r\n  (if ( WHERE_CLAUSE == "" && ABLOCAL_EXPR != "" ) "  WHERE ABLOCAL()" else "") +\r\n  (if ( WHERE_CLAUSE != "" && ABLOCAL_EXPR != "" ) "\\n   AND ABLOCAL()" else "");\r\n\r\n\r\n\r\n\r\n\r\nelse if(QUERY_TYPE_ID == "3") begin\r\n  for ( let db in SOURCE_DB_INFO_VEC ) \r\n     for(let sys in SOURCE_TABLE_INFO_VEC) \r\n       if(db.logical_schema == sys.schema_name) indexes = vector_append(indexes,index_of(db));\r\n\r\n  for ( let i = 0 , i < length_of(SOURCE_DB_INFO_VEC)/length_of(SOURCE_TABLE_INFO_VEC) ) begin\r\n    read_sql = SQL;\r\n    for(let index in indexes) \r\n      read_sql = string_replace(read_sql, SOURCE_DB_INFO_VEC[index].logical_schema + ".", SOURCE_DB_INFO_VEC[i + index].physical_schema + ".");\r\n    read_sql_vec = vector_append(read_sql_vec, read_sql);\r\n  end\r\n  \r\n\r\nend\r\n\r\nresult :: read_sql_vec;\r\n\r\nend\r\n]
CLEAN_FILE_URL|n|||$[ if ( not DO_CLEAN ) "" else "mfile:" + AI_MFS_PENDING + "/clean." + SOURCE_SYSTEM + "/clean." + SOURCE_LOWER + "." + RUN_ID + ".dat.gz" ]
