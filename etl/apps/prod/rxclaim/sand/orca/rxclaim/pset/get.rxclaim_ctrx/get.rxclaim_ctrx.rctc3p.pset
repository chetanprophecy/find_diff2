!prototype|P|||$AI_PSET/get.iseries.interim.pset
QUERY_TYPE_ID||||2
SOURCE_NAME||||clmprdfil.rctc3p
SOURCE_SYSTEM_OVERRIDE||||rxclaim_ctrx
SOURCE_TABLE_LIST||||# Schema Name Unqualified Table Name  Fields\nclmprdfil     rctc3p                  rip2nb,rioinb,riodcd,riepcd,ril5n1,riencd,rijbcd,rijccd,rijdcd,rilln2,rizhs2,ribms3,riexcd,ria3ha,ria5ha,ria6ha,ria7ha,ria4ha,ria8ha,rihehd,rihahs,rib9hj,ricahj,ricbhj,riatie,riafhi,rio2hu,rib8hj,rigoic,ricchj,riheie,rioahf,rioihj,riojhj,rifsh6,ribgha,riamhg,ribhha,riazhr,rioohb,rin4hr,rin5ia,riythe,ridxhf,ridyhf,riirhf,riy3hf,rivnhf,riyyib,rik3id,riu6hi,riu7hi,riu8hi,rivtid,rizjaq,rizkaq,rit9hj,rirhie,rit0ie,risjie,rit1ie,riqhoc,riqioc,riignb,riksst,riofcd,riojcd,riokcd,riolcd,rikyst,rikzst,riawod,riaxod,rik1st,ris2st,riten2,riigcj,ridmpr,ridnpr,riuop1,ribypc,rikecj,ridopr,ridqpr,riinnb,rik6st,rik5st,rik8st,riognb,rilqst,rii2nb,ris4cd,rissc4,risuc4,riswc4,riusp1,rilgst,ridtpr,rio1c3,rio2c3,riq2c3,riq1c3,rio3c3,rio4c3,rilmdt,rilndt,rioxcd,riasod,riwuhk,riauod,riavod,risnip,risqip,riscip,riwwhk,risoip,rispip,riwvhk,rigupp\nclmprdext     rcex1p                  newline
SOURCE_DB_LIST||||$[get_matching_db_list(AI_SOURCE_DB_LIST, AI_SOURCE_DB_GROUPS, "clmprdfil", "rctc3p") + "\\r\\n" + get_matching_db_list(AI_SOURCE_DB_LIST, AI_SOURCE_DB_GROUPS, "clmprdext", "rcex1p")]
DO_CLEAN||||1
DO_LOOKUP||||1
DO_SOURCE||||0
WHERE_CLAUSE||||$["WHERE rcex1p.rxclaimnbr = rctc3p.rip2nb AND   rcex1p.clmseqnbr  = rctc3p.rioinb\n " \n]
LOOKUP_KEY||||{rip2nb; rioinb; rxt_src_envrt_id}
LOOKUP_NAME_OVERRIDE||||rctc3p
LOOKUP_FIELDS||||
ALTERNATE_SOURCE||||rcex1p
FROM_CLAUSE_VEC||||$[ \r\nbegin\r\n\r\nlet string("")[int] from_clause_vec = [vector];\r\nlet decimal("")[int] indexes = [vector];\r\nlet decimal("") curr_table_index = -1;\r\nlet string("")[int] from_clause = [vector];\r\n\r\nif(QUERY_TYPE_ID == "1")\r\n    from_clause_vec = for ( let db in SOURCE_DB_INFO_VEC ) : "  FROM " + string_join(\r\n     for ( let tbl in SOURCE_TABLE_INFO_VEC ) :      \r\n        if ( tbl.table_name member ONLY_IN_FIRST_DB_TABLE_VEC )\r\n          SOURCE_DB_INFO_VEC[0].physical_schema + "." + tbl.table_name + tbl.sql_alias\r\n        else\r\n          db.physical_schema + "." + tbl.table_name + tbl.sql_alias,\r\n    "\\n     , ");\r\nelse if(QUERY_TYPE_ID == "2") begin\r\n    \r\n    for ( let db in SOURCE_DB_INFO_VEC ) \r\n     for(let sys in SOURCE_TABLE_INFO_VEC) \r\n       if(db.logical_schema == sys.schema_name) indexes = vector_append(indexes,index_of(db));\r\n\r\n    for ( let i = 0 , i < length_of(SOURCE_DB_INFO_VEC)/length_of(SOURCE_TABLE_INFO_VEC) ) begin\r\n      from_clause = [vector];\r\n      for ( let tbl in SOURCE_TABLE_INFO_VEC ) begin\r\n        curr_table_index = index_of(tbl);\r\n\r\n      if ( DAILY_FLAG== 'N' and tbl.table_name == "rcex1p" and !is_blank(ALTERNATE_SOURCE) )\r\n          from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index] + i].physical_schema + "." + ALTERNATE_SOURCE + tbl.sql_alias);\r\n       else if ( tbl.table_name member ONLY_IN_FIRST_DB_TABLE_VEC ) \r\n          from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index]].physical_schema + "." + tbl.table_name + tbl.sql_alias);\r\n       else if (string_like(SOURCE_DB_INFO_VEC[indexes[curr_table_index] + i].physical_schema,'%nvm%') and  tbl.table_name == "rcex1p" and DAILY_FLAG== 'Y'  )\r\n          from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index] + i].physical_schema + "." + ALTERNATE_SOURCE + tbl.sql_alias);\r\n       else \r\n          from_clause = vector_append(from_clause, SOURCE_DB_INFO_VEC[indexes[curr_table_index] + i].physical_schema + "." + tbl.table_name + tbl.sql_alias);\r\n      end\r\n      from_clause_vec = vector_append(from_clause_vec, "  FROM " + string_join(from_clause, "\\n     , "));\r\n    end\r\nend\r\nelse if(QUERY_TYPE_ID == "3") from_clause_vec = [vector];\r\nresult :: from_clause_vec;\r\nend\r\n\r\n\r\n]
READ_TBL_SQL_VEC:sandbox||||$[ \r\nbegin\r\nlet string("") v_local_where_clause_file_location=if(is_blank(SOURCE_SYSTEM_OVERRIDE)) \r\n        string_concat(AI_SERIAL , "/override/get." , SOURCE_LOWER , ".txt") \r\n    else \r\n        string_concat(AI_SERIAL , "/override/get." , SOURCE_SYSTEM_OVERRIDE , "." , string_split(SOURCE_LOWER,".")[1] , ".txt" );\r\n\r\nlet string("") v_local_get_bypass_file_location=if(is_blank(SOURCE_SYSTEM_OVERRIDE)) \r\n        string_concat(AI_SERIAL , "/no_bypass/get." , SOURCE_LOWER , ".txt") \r\n    else \r\n        string_concat(AI_SERIAL , "/no_bypass/get." , SOURCE_SYSTEM_OVERRIDE , "." , string_split(SOURCE_LOWER,".")[1] , ".txt" );\r\n\r\nlet string("") v_where_clause=if(file_information(v_local_where_clause_file_location).found) read_file(v_local_where_clause_file_location) else WHERE_CLAUSE ;\r\nlet string("") v_final_where_clause=if( ( file_information(v_local_get_bypass_file_location).found) && (USE_GET_BYPASS_CTL=="Y") ) v_where_clause  \r\n                                    else if ( (not file_information(v_local_get_bypass_file_location).found) && (USE_GET_BYPASS_CTL=="Y") ) " where 1 = 2 "\r\n                                    else v_where_clause  ;\r\n\r\nlet string("")[int] read_sql_vec = [vector];\r\nlet decimal("")[int] indexes = [vector];\r\nlet string("") read_sql = "";\r\nlet int v_optimize_string_index=string_index(v_final_where_clause,"OPTIMIZE FOR ALL ROWS");\r\n\r\nv_final_where_clause=if( not is_blank(ABLOCAL_EXPR) && ( v_optimize_string_index > 0 )  && not is_blank(v_final_where_clause) )\r\n                          string_concat(string_substring(v_final_where_clause,0,v_optimize_string_index -1 ), "  AND  ABLOCAL() " , "OPTIMIZE FOR ALL ROWS")\r\n                      else v_final_where_clause ;\r\n\r\n\r\nif(QUERY_TYPE_ID == "1" || QUERY_TYPE_ID == "2") read_sql_vec = for ( let from_clause in FROM_CLAUSE_VEC ) :\r\n  "SELECT " + (if ( SELECT_HINT == "" ) "" else SELECT_HINT + "\\n       ") + SELECT_FIELDS + "\\n" +\r\n  from_clause + "\\n" +\r\n\r\n// below if loop is added for nvm\r\n (if (string_like(from_clause,'%nvm%') and DAILY_FLAG == 'Y' ) WHERE_CLAUSE + " and rcex1p.datesbm between " + (string(''))(datetime('YYYYMMDD'))datetime_add((datetime('YYYY-MM-DD HH24:MI:SS')) START_CHANGES_TIME , days=-1)  +\r\n  " and " + (string(''))(datetime('YYYYMMDD'))datetime_add((datetime('YYYY-MM-DD HH24:MI:SS')) END_CHANGES_TIME , days=-1)    + " OPTIMIZE FOR ALL ROWS"\r\n        else WHERE_CLAUSE\r\n)\r\n//  v_final_where_clause \r\n+\r\n  (if ( CLIENT_FILTER_CLAUSE == "" ) "" else "\\n   AND ( " + CLIENT_FILTER_CLAUSE + " )") +\r\n  (if ( v_final_where_clause == "" && not is_blank(ABLOCAL_EXPR ) ) "    WHERE ABLOCAL()" else "") +\r\n  (if ( v_final_where_clause != "" && ABLOCAL_EXPR != "" ) "\\n " else "");\r\nelse if(QUERY_TYPE_ID == "3") begin\r\n  for ( let db in SOURCE_DB_INFO_VEC ) \r\n     for(let sys in SOURCE_TABLE_INFO_VEC) \r\n       if(db.logical_schema == sys.schema_name) indexes = vector_append(indexes,index_of(db));\r\n\r\n  for ( let i = 0 , i < length_of(SOURCE_DB_INFO_VEC)/length_of(SOURCE_TABLE_INFO_VEC) ) begin\r\n    read_sql = SQL;\r\n    for(let index in indexes) \r\n      read_sql = string_replace(read_sql, SOURCE_DB_INFO_VEC[index].logical_schema + ".", SOURCE_DB_INFO_VEC[i + index].physical_schema + ".");\r\n    read_sql_vec = vector_append(read_sql_vec, read_sql);\r\n  end\r\n  \r\n\r\nend\r\n\r\nresult :: read_sql_vec;\r\n\r\n\r\nend\r\n]
