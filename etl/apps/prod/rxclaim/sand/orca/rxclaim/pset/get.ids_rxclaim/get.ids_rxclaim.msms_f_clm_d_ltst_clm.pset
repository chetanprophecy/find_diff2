!prototype|P|||${AI_PSET}/get.join.files.interim.pset
DRIVER_SOURCE_NAME||||ids_rxclaim.f_claim_transaction
DRIVER_SOURCE_LOGICAL_NAME||||orca_rxclaim
TARGET_NAME||||ids_rxclaim.msms_f_clm_d_ltst_clm
DRIVER_XFR||||/*   Do not edit. Generated file - BRE 3.2.6.4;;Default deployment;   */\nlet decimal('') bzt_0_6c54cc0a_597845ba_20ea_11 = $DRIVER_START_DATE;\nlet decimal('') bzt_1_6c54cc0a_597845ba_20ea_11 = $DRIVER_END_DATE;\n\n/*@\ndependency_analysis:\n[\n  [out0.sbm_dt,[passthrough],in0.subm_yr_mnth]\n  [out0.*,in0.*]\n]\nmetrics:\n{\n  dependencies:\n  [\n     [out0.sbm_dt,'sbm_dt',1,0]\n     [out0.filename,'filename',1,0]\n     [out0.mbr_sk,'mbr_sk',1,0]\n     [out0.ids_updt_dttm,'ids_updt_dttm',1,0]\n     [out0.hm_dlvry_ind,'hm_dlvry_ind',1,0]\n     [out0.claim_seq_nbr,'claim_seq_nbr',1,0]\n     [out0.claim_cntr,'claim_cntr',1,0]\n     [out0.mbr_eligty_adjud_sk,'mbr_eligty_adjud_sk',1,0]\n     [out0.subm_yr_mnth,'subm_yr_mnth',1,0]\n     [out0.claim_stat_sk,'claim_stat_sk',1,0]\n     [out0.days_sply,'days_sply',1,0]\n     [out0.cag_sk,'cag_sk',1,0]\n     [out0.reversal_ind,'reversal_ind',1,0]\n     [out0.sbm_mn_id,'sbm_mn_id',1,0]\n     [out0.claim_nbr,'claim_nbr',1,0]\n     [out0.claim_stat_id,'claim_stat_id',1,0]\n     [out0.day_90_prog_type,'day_90_prog_type',1,0]\n     [out0.recent_clm_flg,'recent_clm_flg',1,0]\n     [out0.src_env_sk,'src_env_sk',1,0]\n  ]\n  impacts:\n  [\n     [in0.reversal_ind,'reversal_ind',1,1]\n     [in0.recent_clm_flg,'recent_clm_flg',1,1]\n     [in0.claim_nbr,'claim_nbr',1,1]\n     [in0.sbm_mn_id,'sbm_mn_id',1,1]\n     [in0.days_sply,'days_sply',1,1]\n     [in0.mbr_sk,'mbr_sk',1,1]\n     [in0.ids_updt_dttm,'ids_updt_dttm',1,1]\n     [in0.src_env_sk,'src_env_sk',1,1]\n     [in0.claim_seq_nbr,'claim_seq_nbr',1,1]\n     [in0.day_90_prog_type,'day_90_prog_type',1,1]\n     [in0.claim_stat_sk,'claim_stat_sk',1,1]\n     [in0.claim_stat_id,'claim_stat_id',1,1]\n     [in0.hm_dlvry_ind,'hm_dlvry_ind',1,1]\n     [in0.cag_sk,'cag_sk',1,1]\n     [in0.subm_yr_mnth,'subm_yr_mnth',2,2]\n     [in0.mbr_eligty_adjud_sk,'mbr_eligty_adjud_sk',1,1]\n     [in0.claim_cntr,'claim_cntr',1,1]\n     [in0.filename,'filename',1,1]\n  ]\n}\n@*/\n\nout0::reformat(in0)=\nbegin\nlet string("\\x01", maximum_length=1) recent_clm_flg = fail_if_error(in0.recent_clm_flg);\nlet string("\\x01", maximum_length=1) reversal_ind = fail_if_error(in0.reversal_ind);\nlet decimal("\\x01", maximum_length=6) sbm_dt = fail_if_error(in0.subm_yr_mnth);\n\n\n\n  out0.recent_clm_flg::recent_clm_flg;\n  out0.reversal_ind::reversal_ind;\n  out0.sbm_dt::sbm_dt;\n  out0.*::in0.*;\n\nend;\n
NON_DRIVER_1_XFR||||/*   Do not edit. Generated file - BRE 3.2.6.4;;Default deployment;   */\nlet decimal('') bzt_0_6c54cc0a_597845ba_20ea_9 = $NON_DRIVER_1_START_DATE;\nlet decimal('') bzt_1_6c54cc0a_597845ba_20ea_9 = $NON_DRIVER_1_END_DATE;\n\n/*@\ndependency_analysis:\n[\n  [out0.*,in0.*]\n]\nmetrics:\n{\n  dependencies:\n  [\n     [out0.ids_updt_dttm,'ids_updt_dttm',1,0]\n     [out0.src_env_sk,'src_env_sk',1,0]\n     [out0.filename,'filename',1,0]\n     [out0.claim_nbr,'claim_nbr',1,0]\n  ]\n  impacts:\n  [\n     [in0.ids_updt_dttm,'ids_updt_dttm',1,1]\n     [in0.src_env_sk,'src_env_sk',1,1]\n     [in0.filename,'filename',1,1]\n     [in0.claim_nbr,'claim_nbr',1,1]\n  ]\n}\n@*/\n\nout0::reformat(in0)=\nbegin\n\n\n\n  out0.*::in0.*;\n\nend;\n
NON_DRIVER_2_XFR||||/*   Do not edit. Generated file - BRE 3.2.6.4;;Default deployment;   */\nlet decimal('') bzt_0_6c54cc0a_597845ba_20ea_12 = $NON_DRIVER_2_START_DATE;\nlet decimal('') bzt_1_6c54cc0a_597845ba_20ea_12 = $NON_DRIVER_2_END_DATE;\n\n/*@\ndependency_analysis:\n[\n  [out0.*,in0.*]\n]\nmetrics:\n{\n  dependencies:\n  [\n     [out0.ids_updt_dttm,'ids_updt_dttm',1,0]\n     [out0.src_env_sk,'src_env_sk',1,0]\n     [out0.cag_sk,'cag_sk',1,0]\n     [out0.filename,'filename',1,0]\n  ]\n  impacts:\n  [\n     [in0.ids_updt_dttm,'ids_updt_dttm',1,1]\n     [in0.src_env_sk,'src_env_sk',1,1]\n     [in0.filename,'filename',1,1]\n     [in0.cag_sk,'cag_sk',1,1]\n  ]\n}\n@*/\n\nout0::reformat(in0)=\nbegin\n\n\n\n  out0.*::in0.*;\n\nend;\n
NON_DRIVER_3_XFR||||/*   Do not edit. Generated file - BRE 3.2.6.4;;Default deployment;   */\nlet decimal('') bzt_0_6c54cc0a_597845ba_20ea_10 = $NON_DRIVER_3_START_DATE;\nlet decimal('') bzt_1_6c54cc0a_597845ba_20ea_10 = $NON_DRIVER_3_END_DATE;\n\n/*@\ndependency_analysis:\n[\n  [out0.*,in0.*]\n]\nmetrics:\n{\n  dependencies:\n  [\n     [out0.mbr_sk,'mbr_sk',1,0]\n     [out0.mep_stat_cd,'mep_stat_cd',1,0]\n     [out0.ids_updt_dttm,'ids_updt_dttm',1,0]\n     [out0.src_env_sk,'src_env_sk',1,0]\n     [out0.mep_eff_dt,'mep_eff_dt',1,0]\n     [out0.filename,'filename',1,0]\n     [out0.consent_type_cd,'consent_type_cd',1,0]\n  ]\n  impacts:\n  [\n     [in0.mbr_sk,'mbr_sk',1,1]\n     [in0.ids_updt_dttm,'ids_updt_dttm',1,1]\n     [in0.mep_stat_cd,'mep_stat_cd',1,1]\n     [in0.src_env_sk,'src_env_sk',1,1]\n     [in0.consent_type_cd,'consent_type_cd',1,1]\n     [in0.filename,'filename',1,1]\n     [in0.mep_eff_dt,'mep_eff_dt',1,1]\n  ]\n}\n@*/\n\nout0::reformat(in0)=\nbegin\n\n\n\n  out0.*::in0.*;\n\nend;\n
OVERRIDE_JOIN_KEY||||{claim_nbr; src_env_sk}
OVERRIDE_JOIN_LEVEL_2_KEY||||{cag_sk}
OVERRIDE_JOIN_LEVEL_3_KEY||||{mbr_sk}
LOOKUP_FIELDS_KEY||||{}
NON_DRIVER_1_SOURCE_NAME||||ids_rxclaim.d_latest_claim
JOIN_TYPE||||Inner Join with ICFF Lookup
JOIN_KEY||||{claim_nbr; src_env_sk}
DO_CLEAN||||1
JOIN_XFR:sandbox||||include "~$PUB_DXF_XFR/ids/ids_table_properties.xfr";\ninclude "~$PUB_DXF_XFR/common_functions.xfr";\ninclude "~$PUB_DXF_DML/generic_data_types.dml";\n\nlet lookup_identifier_type current_lookup = lookup_not_loaded(); \nlet string("") datafile = $"PUB_DATAHUB_MFS_LOOKUP" + "/ids/ids_rxclaim/one/d_latest_claim.dat.gz";\nlet string("") indexfile=this_partition_path(string_replace(datafile,".dat.gz", ".idx")); \ntype lookup_record_type = record\n  unsigned integer(8)     dxf_hk_part1 =     0 /*Added by Integration Framework. First 8 bytes of the natural key hash.*/;\n  unsigned integer(8)     dxf_hk_part2 =     0 /*Added by Integration Framework. Second 8 bytes of the natural key hash.*/;\n  integer(8)     dxf_sk =     0 /*Added by Integration Framework. Surrogate key.*/;\n  decimal("\\x01",0)      claim_nbr = NULL("") /*BIGINT NOT NULL*/;\n  decimal("\\x01",0)      lt_claim_seq_nbr = NULL("") /*INTEGER NOT NULL*/;\n  string("\\x01",charset="iso-8859-15", maximum_length=1)      lt_claim_stat_id = NULL("") /*CHAR(1) NOT NULL*/;\n  date("YYYYMMDD")("\\x01")      lt_claim_sbm_dt = NULL("") /*DATE*/;\n  date("YYYYMMDD")("\\x01")      lt_claim_filled_dt = NULL("") /*DATE*/;\n  decimal("\\x01",0)      ostd_paid_claim_seq_nbr = NULL("") /*INTEGER NOT NULL*/;\n  string("\\x01",charset="iso-8859-15")      paid_claim_seq_nbr_list = NULL("") /*CHAR(1) NOT NULL*/;\n  string("\\x01",charset="iso-8859-15")      rev_claim_seq_nbr_list = NULL("") /*CHAR(1) NOT NULL*/;\n  string("\\x01",charset="iso-8859-15")      rej_claim_seq_nbr_list = NULL("") /*CHAR(1) NOT NULL*/;\n  decimal("\\x01",0)      lt_paid_claim_seq_nbr = NULL("") /*INTEGER NOT NULL*/;\n  date("YYYYMMDD")("\\x01")      lt_paid_claim_sbm_dt = NULL("") /*DATE*/;\n  date("YYYYMMDD")("\\x01")      lt_paid_claim_filled_dt = NULL("") /*DATE*/;\n  decimal("\\x01",0)      lt_rev_claim_seq_nbr = NULL("") /*INTEGER NOT NULL*/;\n  date("YYYYMMDD")("\\x01")      lt_rev_claim_sbm_dt = NULL("") /*DATE*/;\n  date("YYYYMMDD")("\\x01")      lt_rev_claim_filled_dt = NULL("") /*DATE*/;\n  decimal("\\x01",0)      lt_rej_claim_seq_nbr = NULL("") /*INTEGER NOT NULL*/;\n  date("YYYYMMDD")("\\x01")      lt_rej_claim_sbm_dt = NULL("") /*DATE*/;\n  date("YYYYMMDD")("\\x01")      lt_rej_claim_filled_dt = NULL("") /*DATE*/;\n  decimal("\\x01",0)      cag_sk = NULL("") /*BIGINT*/;\n  decimal("\\x01",0)      mbr_sk = NULL("") /*BIGINT*/;\n  decimal("\\x01",0)      mbr_adjud_sk = NULL("") /*BIGINT*/;\n  decimal("\\x01",0)      phr_sk = NULL("") /*BIGINT*/;\n  decimal("\\x01",0)      pbr_sk = NULL("") /*BIGINT*/;\n  decimal("\\x01",0)      prod_sk = NULL("") /*BIGINT*/;\n  string("\\x01",charset="iso-8859-15", maximum_length=50)      clt_id = NULL("") /*VARCHAR(50)*/;\n  string("\\x01",charset="iso-8859-15", maximum_length=30)  carrier_id = NULL("") /*VARCHAR(30)*/;\n  string("\\x01",charset="iso-8859-15", maximum_length=40)  account_id = NULL("") /*VARCHAR(40)*/;\n  string("\\x01",charset="iso-8859-15", maximum_length=30)  employer_group_id = NULL("") /*VARCHAR(30)*/;\n  string("\\x01",charset="iso-8859-15", maximum_length=20)  mbr_id = NULL("") /*VARCHAR(20)*/;\n  decimal("\\x01",0)      src_env_sk = NULL("") /*BIGINT*/;\n  decimal("\\x01", maximum_length=5)   dxf_src_sys_id =   0;\n  datetime("YYYYMMDDHH24MISS")("\\x01")  ids_create_dttm = NULL("");\n  string("\\x01", maximum_length=20)  ids_create_uid = NULL("");\n  decimal("\\x01", maximum_length=20)  ids_create_run_id =  0;\n  datetime("YYYYMMDDHH24MISS")("\\x01")  ids_updt_dttm = NULL("");\n  string("\\x01", maximum_length=20)  ids_updt_uid = NULL("");\n  decimal("\\x01", maximum_length=20)  ids_updt_run_id =  0;\n  string("\\x01", maximum_length=2)  ids_rec_stat_cd = NULL("");\n  string(1) newline = "\\n";\nend\n;\n\nout::reformat(in)=\nbegin \n  let lookup_record_type lookup_record_value = allocate_with_nulls();\n  let lookup_record_type exact_record_value=allocate_with_defaults();\n  let lookup_record_type exact_next_record_value=allocate_with_nulls();\n  \n  let unsigned integer(8) dxf_hk_part1 = in.dxf_hk_part1;\n  let unsigned integer(8) dxf_hk_part2 = in.dxf_hk_part2;\n\n  let decimal("") match_count = 0 ;\n  if (current_lookup == lookup_not_loaded()) \n  current_lookup = lookup_load(this_partition_path(datafile) ,indexfile, "IDS_LKP_TPL"); \n\n  lookup_record_value = if (current_lookup != lookup_not_loaded() ) lookup_last(current_lookup, "IDS_LKP_TPL", dxf_hk_part1) else allocate_with_defaults() ;\n  exact_record_value=allocate_with_defaults();\n  exact_record_value = if (lookup_record_value.dxf_hk_part1 ==0 ) lookup_record_value               // No Match found on half hash key , So this is insert record.\n                      else if  ( dxf_hk_part2 == lookup_record_value.dxf_hk_part2 ) lookup_record_value  //A match is found on dxf part1 as well as dxf part2 keys , this is an exact match in first inetration itself \n                      else                                                                        //A Match is found on half hash key but not on full hash key, find exact match inside iteration  .\n                      begin\n                        match_count=lookup_count(current_lookup, "IDS_LKP_TPL", dxf_hk_part1);\n                          begin block exact_record_match\n                             for (let int k, k < match_count)\n                               begin \n                                exact_next_record_value = if( k == 0 ) lookup_last(current_lookup, "IDS_LKP_TPL", dxf_hk_part1) else lookup_previous(current_lookup,"IDS_LKP_TPL");\n                                 if ( dxf_hk_part2 == exact_next_record_value.dxf_hk_part2 ) \n                                  begin\n                                        exact_record_value = exact_next_record_value;\n                                        exit  exact_record_match;\n                                  end\n                                                                                                 \n                             end\n                          end block exact_record_match\n                       result :: exact_record_value ;\n                       end;\n  out.is_match :: if( exact_record_value.dxf_hk_part1 == 0 and exact_record_value.dxf_hk_part2==0 ) 0 else 1 ;  \n  out.dxf_hk_part1 :1: in.dxf_hk_part1;\n  out.dxf_hk_part2 :2: in.dxf_hk_part2;\n\n  out.recent_clm_flg :: if(exact_record_value.lt_claim_seq_nbr == in.claim_seq_nbr && exact_record_value.lt_claim_stat_id == in.claim_stat_id) 'Y' else 'N';\n  out.reversal_ind:1:if(in.claim_stat_id member [vector 'P', 'C'] && exact_record_value.ostd_paid_claim_seq_nbr == in.claim_seq_nbr) 'N' else 'Y';\n  out.reversal_ind:2:if(in.claim_stat_id member [vector 'X', 'Z']) 'Y';\n  out.reversal_ind:3:'N';\n  out.sbm_mn_id:1:in.subm_yr_mnth;\n  out.* :: exact_record_value.*;\n  out.* :4: in.* ;\nend ;
DRIVER_OUTPUT_FIELDS||||claim_nbr,claim_seq_nbr,claim_stat_id,src_env_sk,cag_sk,mbr_sk,day_90_prog_type,mbr_eligty_adjud_sk,hm_dlvry_ind,claim_cntr,claim_stat_sk,sbm_mn_id,days_sply,subm_yr_mnth
NON_DRIVER_1_OUTPUT_FIELDS||||claim_nbr,src_env_sk
ADDITIONAL_FIELDS_DML||||record\n  string("\\x01", maximum_length=1)    recent_clm_flg = NULL("") /*CHAR(1)*/;\n  string("\\x01", maximum_length=1)    reversal_ind = NULL("") /*CHAR(1)*/;\n  decimal("\\x01", maximum_length=6)    sbm_dt = NULL("") ;\n\ndecimal("\\x01") msms_utilizing_mbr_cnt_no = NULL("") ;\ndecimal("\\x01") claim_cntr_retail_30 = NULL("") ;\ndecimal("\\x01") claim_cntr_retail_90 = NULL("") ;\ndecimal("\\x01") claim_cntr_hd = NULL("") ;\ndecimal("\\x01") claim_cntr_msms_retail_30 = NULL("") ;\ndecimal("\\x01") claim_cntr_msms_retail_90 = NULL("") ;\ndecimal("\\x01") claim_cntr_msms_hd = NULL("") ;\ndecimal("\\x01") hd_utilizing_mbr_cnt_no = NULL("") ;\ndecimal("\\x01") msms_mbr_opt_out_cnt_no = NULL("") ;\n\nend
DRIVER_FILTER_EXPR||||claim_stat_id != 'R'
ENABLE_JOIN_LEVEL_2||||1
NON_DRIVER_2_SOURCE_NAME||||ids_rxclaim.d_msms_client_category
NON_DRIVER_2_OUTPUT_FIELDS||||cag_sk
JOIN_LEVEL_2_KEY||||{cag_sk}
JOIN_LEVEL_2_TYPE||||Inner Join
JOIN_LEVEL_2_XFR:sandbox||||$[\nbegin\n\nlet join_xfr = if(JOIN_LEVEL_2_TYPE member [vector "Left Outer Join with ICFF", "Inner Join with ICFF"]) \n                 ""\n               else \n                 make_transform("join", [vector make_arg("in0"), make_arg("in1")], [vector make_arg("out")]);\n                 \nlet rfmt_xfr = if(JOIN_LEVEL_2_TYPE member [vector "Left Outer Join with ICFF", "Inner Join with ICFF"]) \n                 make_transform("reformat", [vector make_arg("in")], [vector make_arg("out")])\n               else \n                 "";\n                 \nlet join_key = key_info(JOIN_LEVEL_2_KEY);\nlet override_join_key = key_info(OVERRIDE_JOIN_LEVEL_2_KEY);\n\nlet in_vec = for(let key in join_key) : "in." + key.field_name;\n\nlet string("") global_vars = if(JOIN_LEVEL_2_TYPE member [vector "Left Outer Join with ICFF", "Inner Join with ICFF"]) \n"let lookup_identifier_type sec_icff_id = lookup_load('" + NON_DRIVER_2_SEC_FILES_VEC[0] + "', '" + NON_DRIVER_2_SEC_INDEX_VEC[0] + "', 'LKP: DA SEC 1 Template');\nlet bc_lookup_address_type da_address =  allocate_with_defaults();\nlet decimal(\\"\\") match_found =  0;" \n                              else if(JOIN_LEVEL_2_TYPE member [vector "Left Outer Join with ICFF Lookup", "Inner Join with ICFF Lookup"]) \n'include "~$PUB_DXF_XFR/ids/ids_table_properties.xfr";\ninclude "~$PUB_DXF_XFR/common_functions.xfr";\ninclude "~$PUB_DXF_DML/generic_data_types.dml";\n\nlet lookup_identifier_type current_lookup = lookup_not_loaded(); \nlet string("") datafile = "' + NON_DRIVER_2_FILES_VEC[0] + '";\nlet string("") indexfile=this_partition_path(string_replace(datafile,".dat.gz", ".idx")); \ntype lookup_record_type = ' + read_file(NON_DRIVER_2_DML_FILE_NAME) + ';' else "";\n\nif(JOIN_LEVEL_2_TYPE member [vector "Left Outer Join with ICFF", "Inner Join with ICFF"]) begin\n  rfmt_xfr = add_statement(rfmt_xfr, "  if(lookup_match(sec_icff_id, 'LKP: DA SEC 1 Template', " + string_join(in_vec, ",") + ")) begin \n    da_address = lookup_last(sec_icff_id, 'LKP: DA SEC 1 Template', " + string_join(in_vec, ",") + ").prim_da_address;\n    match_found = 1;\n  end\n  else begin\n    da_address = allocate_with_defaults();\n    match_found = 0;\n  end");\n  \n  for(let key in join_key) \n      rfmt_xfr = add_rules(rfmt_xfr, [vector make_rule("out." + key.field_name, "in." + key.field_name, 1)]);\n      \n  for(let field in string_split(NON_DRIVER_2_OUTPUT_FIELDS , ","))\n    if(vector_search(override_join_key, [record field_name field modifiers [vector]], {field_name}) == -1)\n      rfmt_xfr = add_rules(rfmt_xfr, [vector make_rule("out." + field, "allocate_with_defaults()", 1)]);\n      \n  rfmt_xfr = add_rule(rfmt_xfr, "out.da_address", "da_address");\n  rfmt_xfr = add_rule(rfmt_xfr, "out.match_found", "match_found");\n  rfmt_xfr = add_rule(rfmt_xfr, "out.*", "in.*");\nend\nelse if(JOIN_LEVEL_2_TYPE member [vector "Left Outer Join with ICFF Lookup", "Inner Join with ICFF Lookup"]) begin\n  rfmt_xfr = 'out::reformat(in)=\nbegin \n  let lookup_record_type lookup_record_value = allocate_with_nulls();\n  let lookup_record_type exact_record_value=allocate_with_defaults();\n  let lookup_record_type exact_next_record_value=allocate_with_nulls();\n\n  let unsigned integer(8) dxf_hk_part1 = in.dxf_hk_part1;\n  let unsigned integer(8) dxf_hk_part2 = in.dxf_hk_part2;\n\n  let decimal("") match_count = 0 ;\n  if (current_lookup == lookup_not_loaded()) \n  current_lookup = lookup_load(this_partition_path(datafile) ,indexfile, "IDS_LKP_TPL_LEVEL_2"); \n\n  lookup_record_value = if (current_lookup != lookup_not_loaded() ) lookup_last(current_lookup, "IDS_LKP_TPL_LEVEL_2", dxf_hk_part1) else allocate_with_defaults() ;\n  exact_record_value=allocate_with_defaults();\n  exact_record_value = if (lookup_record_value.dxf_hk_part1 ==0 ) lookup_record_value               // No Match found on half hash key , So this is insert record.\n                      else if  ( dxf_hk_part2 == lookup_record_value.dxf_hk_part2 ) lookup_record_value  //A match is found on dxf part1 as well as dxf part2 keys , this is an exact match in first inetration itself \n                      else                                                                        //A Match is found on half hash key but not on full hash key, find exact match inside iteration  .\n                      begin\n                        match_count=lookup_count(current_lookup, "IDS_LKP_TPL_LEVEL_2", dxf_hk_part1);\n                          begin block exact_record_match\n                             for (let int k, k < match_count)\n                               begin \n                                exact_next_record_value = if( k == 0 ) lookup_last(current_lookup, "IDS_LKP_TPL_LEVEL_2", dxf_hk_part1) else lookup_previous(current_lookup,"IDS_LKP_TPL_LEVEL_2");\n                                 if ( dxf_hk_part2 == exact_next_record_value.dxf_hk_part2 ) \n                                  begin\n                                        exact_record_value = exact_next_record_value;\n                                        exit  exact_record_match;\n                                  end\n                                                                                                 \n                             end\n                          end block exact_record_match\n                       result :: exact_record_value ;\n                       end;\n  out.is_match :: if( exact_record_value.dxf_hk_part1 == 0 and exact_record_value.dxf_hk_part2==0 ) 0 else 1 ;  \n  out.dxf_hk_part1 :1: in.dxf_hk_part1;\n  out.dxf_hk_part2 :2: in.dxf_hk_part2;\\n' +   \n  string_join(for(let field in string_split(NON_DRIVER_2_OUTPUT_FIELDS , ",")) : \n    if(vector_search(override_join_key, [record field_name field modifiers [vector]], {field_name}) == -1) "  out." + field + " :: exact_record_value." + field, ";\\n")\n  + ';\\n  out.* :4: in.* ;\nend ;';\nend\nelse  begin\n  if(join_key != override_join_key)\n    for(let key in join_key) \n      if(key.field_name != override_join_key[index_of(key)].field_name)\n        join_xfr = add_rules(join_xfr, [vector make_rule("out." + key.field_name, "in0." + key.field_name, 1)\n                                          ,make_rule("out." + key.field_name, "in1." + override_join_key[index_of(key)].field_name, 2)\n                                          ]);\n   \n  join_xfr = add_rules(join_xfr, [vector make_rule("out.*", "in0.*", 1)\n                                          ,make_rule("out.*", "in1.*", 2)\n                                          ]);\nend\n\nresult :: if(JOIN_LEVEL_2_TYPE member [vector "Left Outer Join with ICFF", "Inner Join with ICFF", "Left Outer Join with ICFF Lookup", "Inner Join with ICFF Lookup"]) global_vars + "\\r\\n\\r\\n" + rfmt_xfr \n          else global_vars + "\\r\\n\\r\\n" + join_xfr;\n\nend\n]
ENABLE_JOIN_LEVEL_3||||1
NON_DRIVER_3_SOURCE_NAME||||ids_common.d_member_consent
JOIN_LEVEL_3_KEY||||{mbr_sk}
OUTPUT_FILTER_EXPR||||recent_clm_flg == 'Y' and claim_stat_id member [vector 'C', 'P']
NON_DRIVER_3_OUTPUT_FIELDS||||consent_type_cd,mep_stat_cd,mep_eff_dt,mbr_sk
