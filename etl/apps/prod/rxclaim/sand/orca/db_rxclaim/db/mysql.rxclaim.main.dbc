##########################################################################
## Database configuration information -- MySQL
##
## Edit and save this file with the extension '.dbc'.
##
## The lines have the format 'TAG: VALUE'. The tag must be at the beginning of
## a line and be immediately followed by the ':' (colon) character.
##
## Whitespace characters between the tag name+colon and value are ignored.
## Whitespace characters in the tag value separate elements of a "list value".
## Lines beginning with the '#' (pound) characters are ignored.
##########################################################################

## ==== Modes ====
## * API mode uses ODBC.
## * Utility mode uses the 'mysql' client application.
## * High-performance (utility) loading is available via the LOAD DATA SQL statement
##   executed through 'mysql'.

## ==== Target settings ====

## ---- Common ----

dbms: ${DB_RXCLAIM_MYSQL_DBMS}
## (Required; has to be 'mysql', for this database.)

db_nodes: ${DB_RXCLAIM_MYSQL_DB_NODES}
## (Required; a space-separated list.) The hosts where the database components run.

db_name: ${DB_RXCLAIM_MYSQL_DB_NAME}
## (Required.) The database name.

## mysql_storage_engine:
## (Optional; defaults to MySQL default storage engine, MyISAM; the value is not case-sensitive)
## Many things will not work without setting this parameter; most likely you will want 'innodb' here.

mysql_transactions_support: false
## (Optional; defaults to 'false'.) Allow transactional operations (requires a non-default storage engine).

## ---- API mode (ODBC) ----# *-
# *- The driver and driver manager configuration (directories, files, data source).
# *-

## The following two parameters are the DBC equivalents of the environment
## variables used by the ODBC driver managers on Unix: in place of these parameters
## you could use the corresponding environment settings:
##
##    environment: ODBCSYSINI=<the value of 'odbc_sysini_dir' parameter>
##    environment: ODBCINI=<the value of 'odbc_init_file' parameter>
##
## Using the 'odbc_sysini_dir' and 'odbc_init_file' parameters has the advantage of
## the documentation and easier configuration maintenance.

odbc_sysini_dir: /etl/etc/odbc
## OPTIONAL.  When running on a Unix system, this tag should be used to specify the
## directory where the driver manager's 'odbcinst.ini' configuration file is
## residing.  Setting this parameter is equivalent to setting the value of the
## 'ODBCSYSINI' in the execution environment of the process.
##
## Note that you don't have to use the driver manager's 'odbcinst.ini' file in all
## cases: the drivers themselves can usually get all their configuration parameters
## from the 'ODBCINI' ('odbc_init_file') file plus from the DBC settings.  Not
## using an 'odbcinst.ini' file usually results in a simpler site configuration.
## But sometimes you have to use it (e.g. when using a load utility coming with
## some drivers) -- then use this parameter to point to the containing directory.

## odbc_init_file:
## OPTIONAL.  When running on a Unix system, this tag should be used to specify the
## path to the ODBCINI file containing the ODBC data source definition.  A driver
## manager usually has a default location for such a file but you should not rely
## on that: it usually leads to a waste of time troubleshooting connection issues.
##
## Please set this to a valid file path. Important: make that file writable by the
## Unix user who is going to run database components if you are going to be using
## the 'unixODBC' driver manager -- it needs that.

odbc_data_source_name: ${DB_RXCLAIM_MYSQL_ODBC_DSN}
## (Required in API mode.) The ODBC data source name.

odbc_libdir: ${DXF_MYSQL_ODBC_LIBDIR}
## (Optional; used on Unix only.)
## If not set, our own packaged version of the unixODBC driver manager will be used.
## This tag allows to point elsewhere (also, see 'odbc_libname').

## odbc_libname:
## (Optional; used on Unix only.)
## When using 'odbc_libdir' to point to an alternative driver manager, you can specify the name
## of the ODBC driver manager library. These will be tried otherwise (in order, if many):
##   on AIX:                libodbc.so libodbc.a(libodbc.so.1) libodbc.a(odbc.so)
##   on HP PA-RISC systems: libodbc.sl
##   on all other systems:  libodbc.so

## odbc_bundled_unixodbc_so_version:
## (Optional; used on Unix/Linux only.)  Specifies the version of the bundled unixODBC
## driver manager to be used.  The possible values are currently 1 and 2 with default
## of 1.  The number indicates the version of the shared library objects in the driver
## manager.  You can determine if this tag is needed by running the ldd command on
## your odbc driver library.  If you see  libodbcinst.so.N in the output set this tag
## to N.
## This tag is only relevant if odbc_libdir is left unset.

## extra_libdir_path:
## (Optional; used in API mode on Unix only.)
## Use this tag when your third-party ODBC driver or driver
## manager requires path elements other than what is
## specified by the odbc_libdir tag.  This tag might also be used
## in cases where it is not desirable to specify odbc_libdir.

## ld_preload:
## (Optional; used in API mode on Unix only.)
## Some drivers are built with the presumption that the driver manager library (libodbcinst.so)
## is linked into an application.  The database interface allows the user the choice of an arbitrary
## ODBC 3 complying driver manager and does not link this library statically.  You may
## need to specify the path to it via this tag.

## ---- Utility mode ----

db_home: ${DB_RXCLAIM_MYSQL_DB_HOME}
## (Optional) Path to the application's client installation directory; if not specified, PATH is
## searched for utilities. Double quote the path if it has spaces inside.

db_server_host: ${DB_RXCLAIM_MYSQL_DB_SERVER_HOST}
## (Required when utilities (e.g. 'mysql') are to be run.)
## The database master server host name.

db_server_port: ${DB_RXCLAIM_MYSQL_DB_SERVER_PORT}
## (Optional and used by utilities (e.g. 'mysql').)
## The database master server port number.

mysql_defaults_extra_file: ${DB_RXCLAIM_MYSQL_CONFIG_FILE}
## (Optional.) If specified, used as the value of the --defaults-extra-file option for mysql utility.
## Use direct slash as the path separator (even on Windows); double-quote paths with internal spaces.

## ---- Performance loading ----

dbi_load_program_in_flow_kind: via-npipe
## (Optional; one of: (via-npipe [default], via-file).
## The I/O channel used by the loader.  Some database clients cannot read from Windows named pipes;
## for those cases the 'via-file' option is provided.  Normally, use 'via-npipe' to maximize data parallelism.
## (Note that the default setting was 'via-file' for an older implementation of this loader.)

## ==== Character set ====

## db_character_set:
## (Optional.) Set the value to the character set to use in DML generation.
## Note that the tag's value may not match the character set name in the
## target database.  The most common choices here are:
##   a. Don't use this tag -- use the client's platform-native character set.
##   b. utf8 or utf-8 -- use it with UTF8 databases.
##   c. iso-8859-1 -- use it with ISO 8859-1 (a.k.a. Latin-1) and ASCII databases.
## The interpretation of this tag's value is case-insensitive.

## minimal_charset:
## (Optional; defaults to 'true'.)
## If the value is false, generated DML tags string-like data fields with
## the explicit character set.  By default, fields of non-string types such as
## decimal, date and datetime will not be marked with the explicit character set.
## For dml records that have a relatively large number of decimal,
## date and/or datetime fields setting this tag to true (or leaving it
## unset) can have a substantial beneficial effect on performance.

## == Generic DBC settings ==

user: ${DB_RXCLAIM_MYSQL_USER}
encrypted_password: ${DB_RXCLAIM_MYSQL_ENCRYPTED_PASSWORD}
## If your database connection requires a username and
## password, then uncomment the preceding tags and enter
## the appropriate values.  If a password is to be specified,
## it should be encrypted with the "m_password" utility and
## the resulting string should be given as the value to the
## "encrypted_password" tag.  Alternatively, the password
## can be specified in plain text with the "password" tag.
## If both "encrypted_password" and "password" tags are
## specified, "encrypted_password" is ignored.  You can use
## environment variables instead of values. Use ${} to surround
## each environment variable. For example:
## user:      ${MY_USERNAME}
## encrypted_password:  ${MY_ENCRYPTED_PASSWORD}

case: lower
## The default value lower causes the database package to
## generate DML in lower case. If you want the database
## package to generate DML in upper case, change the value to
## upper. For example:
## case: upper
## If you want the database package to preserve the case
## as it is returned from the database system, change the
## value to mixed.  For example:
## case: mixed

## quote_column_names:
## When configured with only a table name in API mode, Output and Input Table
## will generate INSERT and SELECT statements automatically.  By default, if
## case is set to 'mixed', then column names within these statements will be
## quoted.  Otherwise, column names are not quoted.  To force column name
## quoting on or off, uncomment this tag and set the value to 'true' (to
## enable quoting) or 'false' (to disable quoting).

## column_delimiter:
## The default value is "\001".  If you want to change
## the value, then uncomment the preceding tag and
## set column_delimiter to the default value you want.

## default_date_format:
## Use this default date format when generating DML for database types
## which are equivalent to the DML DATE type. For example:
## default_date_format: YYYYMMDD

## default_datetime_format:
## Use this default datetime format when generating DML for database types
## which are equivalent to the DML DATETIME type. For example:
## default_datetime_format: YYYYMMDD HH24:MI:SS

generate_dml_with_nulls: true
## If the value is true, the database automatically
## generates DML NULL() for database columns which allow NULL.

## default_null_value:
## When delimited DML is generated, fields which can be NULL
## are given a default value of the empty string ("").
## Databases which distinguish between NULL and the empty
## string may require a specific NULL default value other than the
## empty string when using utility loaders or unloaders.

field_type_preference: delimited
## Identifies the rules used when generating dml for the
## database components.  For most of the supported databases
## only 'delimited' is supported for the utility loaders.
## The supported values for this tag are delimited, variable and fixed.

## fixed_size_dml: false
## If the value is false, the database generates delimited
## types whenever possible. We recommend that this value
## remain false and that you use delimited DML for database
## interaction, in order to represent NULLs as zero-length
## data.
## This tag is deprecated - please use the field_type_preference tag instead.

oldstyle_emptystring_as_null: false
## Set to true for the behavior used in older releases.
## If the value is true when writing delimited data to a table and
## the dml definition of the field does not include a NULL value,
## then zero-length strings will be written to the table as NULL as
## if the dml field definition had included '= NULL("")'.
## This tag is ignored if AB_COMPATIBILITY is set to a value earlier
## than 2.12.
## It is recommended that oldstyle_emptystring_as_null be set
## to false when the generate_dml_with_nulls tag is set to true.

fully_qualify_dml: false
## If the value is true record formats will be generated with fully
## qualified dml.  I.e. all fields will have an explicit character set
## and all integer fields will have an explicit endianness.

dml_with_maximum_length: true
## If the value is true, variable-length fields in record formats will be
## generated with explicit maximum_length qualifiers based on size
## information obtained from the database for the corresponding
## columns.

## dml_with_default_values: none
## Can be set to one of the following three values:
##   null_preferred --- DML generated for NOT NULL columns that have default values in the target
##     table's definition will include default assignments to those values, wherever possible.
##   default_preferred --- same as null_preferred for NOT NULL columns, and in addition default
##     assignments willl be generated for nullable columns wherever possible. Note that if a column
##     is both nullable and has a default value, a NULL specifier will not be generated in the DML
##     for that field, even if the default value cannot be generated into the DML.
##   none --- no default assignments will be included in the generated DML.
##
## The behavior of this tag is unaffected by the setting of the generate_dml_with_nulls tag.
## For additional information see the online help.

## dml_with_structured_comments: false
## If set to true, specifies that structured comments rather than plain language DML comments be
## produced for fields in generated DML. For details of the names and values used in the structured
## comments see the online Help.

preserve_sql_whitespace: true
## This tag affects the operation of 'm_db run -sqlfile <file>'
## If the tag is false, leading and trailing whitespace are
## trimmed from each line in the file, and multiline sql
## statements are concatenated with a single space character.
## If the tag is true, no whitespace is trimmed, and multiline
## sql statements are concatenated with a newline character.
##
## A multiline quoted text string inserted into a character
## column will NOT contain newlines if this tag is false; and
## when extracted from the column will not retain line breaks.

interface: default
##   WARNING: The 'interface' tag is only used with database
##            components generated by GUI releases earlier
##            than 1.8.25.  Beginning with GUI 1.8.25,
##            use the interface parameter on each database
##            component to choose an interface.
## Each database usually provides multiple interfaces to perform
## any one task.  For example, databases usually allow two ways
## to load data: via a load utility, or transactional APIs.
## The setting of this tag affects which interface will be used for all
## IDB database components.  The default setting will typically
## use the best performing interface for this database on a
## component-by-component basis.
## If you wish to have all components use the API interface
## then set this value to api.  For example:
## interface: api

## client_version:
## If the version of the local client software used to
## connect to the database is different from the
## version of the database server version to which
## you are connecting, then uncomment this tag and
## enter the version of the local client software.

## generate_floating_decimals:
## Set this tag to true to cause delimited dml generated for
## decimal columns to be in a floating decimal point
## format, i.e. without an implicit or explicit specification
## of scale.  This form was standard in Co>Operating
## System releases prior to 2.15.  The default value is false.

## environment:
## Uncomment this tag to set or propagate environment variables
## to all database components. Use the following form:
## environment:  <env-var>=<value>

## max_data_size:
## Uncomment this tag to specify the maximum expected size of the data per field.
## This can be used for varying length fields (like VARCHAR) which
## need an internal maximum size to allocate (defaults to 100000).

## rowset_size:
## The array size for receiving query result sets; defaults to 1000
## for most operations.  Given a certain query result set, increasing
## this size will decrease the number of fetches in which the results
## will be brought to the client, cutting down on the number of
## communication acts between the client and server.  This may lead
## in noticeable performance improvements in the environments with
## high network latency.

## rows_per_commit:
## Uncomment this tag to specify a default for the commit size
## of appropriate components.
## We recommend leaving this commented out for most cases and
## supplying the commit size via the component parameter.

## commit_table:
## Uncomment this tag to set the name of the commit table to be used. This is
## required if rows_per_commit is non-zero.

## use_32_bit_database_client:
## Uncomment this tag and to set to true if the Co>Operating System is a combined
## 32- and 64-bits and the desired database vendor's client libraries are only
## available in 32-bits.

## memory_buffer_lower_bound_bytes:
## If set, this tag controls the initial size (in bytes)
## of the memory buffer for the input flow of a database
## component such as Update Table, Join with DB or
## Multi Update Table that can batch its input records.
## If not set the default value is 10000.  This tag will
## be ignored if the configuration variable AB_IDB_MEMORY_BUFFER_LOWER_BOUND
## is set.

## memory_buffer_upper_bound_bytes:
## If set, this tag controls the maximum size (in bytes) of
## the memory buffer for the input flow of a database component
## such as Update Table, Join with DB or Multi Update Table
## that can batch its input records.  The default value of
## 100000000 byes is set very large so that usually all
## records will be held in memory.  When an input record does
## not fit into the buffer it will be stored in a temporary file.
## This tag will be ignored if the configuration variable
## AB_IDB_MEMORY_BUFFER_UPPER_BOUND is set.

## micrograph_transaction_style:
## This tag is applicable only to micrographs.  Uncomment this tag to set the
## name of the style of transaction that database components should employ
## in micrographs.  If not set, the default value two-phase-commit will be
## used but note that that value is only supported by dbms types that
## support XA transactions.  Acceptable values for this tag are:
##       two-phase-commit                 (the default)
##       one+two-phase-commit             (requires the micrograph_commit_table
##                                        tag to also be set)
##       one-phase-commit-recoverable     (requires the micrograph_commit_table
##                                        tag to also be set)
##       one-phase-commit-nonrecoverable  (the micrograph_commit_table tag must
##                                        not be set)

## micrograph_commit_table:
## This tag is applicable only to micrographs.  Uncomment this tag to set
## the name of the commit table to be used in micrographs that are performing
## one-phase-commit-recoverable transactions.

## allow_two_phase_commit:
## This tag is applicable only to database components operating in a transaction
## group or in a micrograph.  It defaults to true.  When set to false a database
## connection made with this dbc file will make a conventional rather than XA
## connection with its database even if the database otherwise supports XA.
##
## Note that the setting of this tag will add constraints on how the transaction
## manager manages the various resources within a transaction group. Specifying
## false might prevent the graph from running, depending on the configuration
## of the graph and other transactional resources in it.  Also note that this
## tag will have no effect if the target database does not support the XA protocol.

## array_interface_buffer_size:
## Uncomment this tag to set the array size while binding input parameters
## in prepared statements; defaults to 4096.  This is only used by Output Table
## and (when possible) Update Table for databases that support api-level
## batch loads and updates.

## catalog_query_unconvertible_replacement_string:
## If set, the value of this tag is used in an internal call to the
## string_convert_explicit dml function when it is invoked on the results
## of calls that database components make to the database catalog.
## Its default value is "#" (without the quotes).

## catalog_sql_corrupt_replacement_string:
## If set, the value of this tag is used in an internal call to the
## string_cleanse dml function when it is invoked on the results of
## calls that database components make to the database catalog.  Its
## default value is "!" (without the quotes).

## skip_modify_select_for_describe:
## If not set to 'true', the code may modify the supplied SELECT statements when finding
## the result set metadata, in order to avoid the real selecting fetching data,
## which some database client libraries do in preparing a SQL statement

## add_false_predicate_to_select_for_describe:
## If set to 'true', SELECT statements used internally for finding information about table
## columns will be modified by appending 'WHERE 1=0', in order to avoid the real selecting
## and fetching data, which some database client libraries do in preparing a SQL statement,
## or to pacify database monitoring software that doesn't like unqualified SELECTs from
## large tables.

## generate_select_from_dml:
## If not set or set to true, when api-mode Input Table has a table name
## specified, the generated select statement will be derived from the component's
## read port dml rather than a simple "select * from <table name>".
##
## Parallel unload from a partitioned db2 database (dbms type db2eee) is
## a special case.   If this tag is not explicitly set to true then the default
## behavior for a parallel db2eee unload is false:  this is because generating
## the select in that case will require an additional (short-lived) connection
## to the database.


## ** Dependency Analysis **
## db_name_repo:
## Optional. Alternative name for the database to use for dependency analysis.
## If set, overrides db_name in the repository context (only).
## For example, useful when db_name varies between dev, test, and prod environments.

## default_schema_repo:
## Optional. Default schema/owner to use for dependency analysis.

## require_user_managed_datasets_repo:
## Optional. Set to 'true' if table datasets for this database will be preloaded (recommended).
## Use this setting to prevent dependency analysis from creating table datasets automatically.
## This will help prevent lineage breaks due to incorrectly named tables.


## session_startup_sql:
## When uncommented and set, the specified sql statement will be executed
## at the time that connection is made to the database.
## The expected use for this tag is to execute statements
## which set the session environment.
## Use multiple instances of this tag to execute multiple sql statements.
##
## This is generally only useful for api mode operations.

## odbc_type_treat_sql_decimal_as_sql_numeric:
## OPTIONAL: When the ODBC driver does not support the SQL_DECIMAL ODBC data type,
## set this to 'true' to use SQL_NUMERIC instead.



## sfw_build:
## (Optional, wizard-level.)
