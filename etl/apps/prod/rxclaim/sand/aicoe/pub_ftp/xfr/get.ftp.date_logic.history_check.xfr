include "~ab_home/include/log-event-type.dml";

type day_vec_t = record
  date($DATE_LOGIC_FORMAT) day; 
  string('') filename;
end;

type output_t = record
  string('') ftp_path;
  string('') ftp_filename;
  date('YYYY-MM-DD') start_date;
  date('YYYY-MM-DD') end_date;
  datetime('yyyy-mm-dd hh24:mi') last_modified;
  decimal('') file_size;
end;

let date($DATE_LOGIC_FORMAT) data_start_date = $DECIMAL_START_DATE;
let date($DATE_LOGIC_FORMAT) data_end_date = $DECIMAL_END_DATE;
let day_vec_t[int] days_vec  = for (let int i, i < date_difference_days(data_end_date, data_start_date) + 1):
                                 [record day (date($DATE_LOGIC_FORMAT))(data_start_date + i), filename ''];

/*Reformat operation*/
out::reformat(in)=
begin
  let string(int)[int] matches;
  let date($DATE_LOGIC_FORMAT) start_date;
  let date($DATE_LOGIC_FORMAT) end_date;
  let string('\n') pattern = $["'" + string_replace(FILE_PATTERN, '\\', '\\\\') + "'"];
  let string("\t") check_history = $['"' + CHECK_PROCESSED_FILES + '"'];
  let output_t [int] filenames = allocate();
  let int found;
  
  for (let file in in.filenames)
  begin
    matches = re_get_matches(file.filename, pattern);
    start_date = matches[2];
    end_date = data_end_date;
    
    found = 0;
    for (let int i, i < length_of(days_vec))
      if (days_vec[i].day >= start_date and days_vec[i].day <= end_date)
      begin
        found = 1;
        days_vec[i].filename = days_vec[i].filename + file.filename + ',';
      end
        
    if ( found && check_history == "True" )
        begin
        if(!lookup_match("processed file lookup",file.filename) )
                filenames = vector_append(filenames, [record ftp_path file.path, ftp_filename  file.filename, start_date (date('YYYY-MM-DD'))(date($DATE_LOGIC_FORMAT))start_date, end_date (date('YYYY-MM-DD'))(date($DATE_LOGIC_FORMAT))end_date, last_modified file.last_modified, file_size file.file_size]);
        end
    else if ( found && check_history == "False" )
        filenames = vector_append(filenames, [record ftp_path file.path, ftp_filename  file.filename, start_date (date('YYYY-MM-DD'))(date($DATE_LOGIC_FORMAT))start_date, end_date (date('YYYY-MM-DD'))(date($DATE_LOGIC_FORMAT))end_date, last_modified file.last_modified, file_size file.file_size]);
    
  end
  
  write_to_log('filenames', string_join(for (let file in filenames): file.ftp_filename,';'));
  
  out.filenames :: filenames;
end;


log::final_log_output()=
begin
    write_to_log('gaps', string_join(for (let day in days_vec): if(day.filename == '') day.day, ';'));
    
    log.event_type :: 'duplicates';
    log.event_text :: string_join(for (let day in days_vec): if (length_of(re_split_no_empty(day.filename, ',')) > 1) (string(''))day.day + ',' + day.filename,';');
end;
