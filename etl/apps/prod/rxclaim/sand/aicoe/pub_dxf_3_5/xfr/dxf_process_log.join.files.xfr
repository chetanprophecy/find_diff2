include "/~$PUB_DXF_XFR/dataset_id.xfr";
include "/~$PUB_DXF_XFR/sys_id.xfr";
include "/~$PUB_DXF_XFR/standardize.xfr";
include "/~$PUB_DXF_DML/dxf_job_event_text.dml";

let long dxf_src_sys_id = name_to_sys_id($"DRIVER_SOURCE_LOGICAL_NAME");
let long dxf_src_dataset_id = /* if ( this_partition() == 0 ) get_dataset_id("$DATASET_ID_LOOKUP_PATH") else */ 0;  /* The index into the Source Process table. */
let long stride = number_of_partitions();
let long dxf_src_rec_cnt = this_partition() - stride + 1; /* The number of records processed from this source.  Also used as a record number on each source record. */
let string(unsigned integer(1)) dxf_src_file_name = "";
let long v_record_count = 0;
let start_time = now();
//let date("YYYYMMDD") prev_month_start_dt = date_add_months((date("YYYYMMDD"))string_concat((string(""))(date("YYYYMM"))start_time, "01"), -1);
//let date("YYYYMMDD") prev_month_end_dt = datetime_add((date("YYYYMMDD"))string_concat((string(""))(date("YYYYMM"))start_time, "01"), -1);

/* Always output 1 record.  Also increments the record counter. */
out :: length(in) =
begin
  dxf_src_rec_cnt = dxf_src_rec_cnt + stride;
  out :: 1;
end;


/* Add Source ID and Record Number.  Remove trailing blanks from strings. */
out :: normalize(in, index) =
begin
  dxf_src_file_name = in.filename;
  v_record_count = v_record_count + 1;
  //out.(*, name == "month_start_dt") :1: prev_month_start_dt;
  //out.(*, name == "month_end_dt") :2: prev_month_end_dt;
  out.(*, name == "dxf_src_sys_id") :1: first_defined(in.src_env_sk, dxf_src_sys_id); // Corrected priority from 3 to 1 . 
  out.(*, name == "dxf_src_dataset_id") :2: first_defined(in.dxf_src_dataset_id, dxf_src_dataset_id); //added "first_defined(in.dxf_src_dataset_id, dxf_src_dataset_id)" to pass dxf_src_dataset_id as it is,if it is comming from source. 
  out.(*, name == "dxf_src_rec_cnt") :3: dxf_src_rec_cnt;
  out.(*, name == "dxf_src_file_name") :4: dxf_src_file_name;
  out.(*, form == "string") :5: string_trim_no_empty(in.*); // As per INC7277907  , removed (string("\x01")) to fix UTF8 Character set conversion issue. 
  out.* :: in.*;
end;

/* Write the Source ID and Record Count to the log. */
log_event :: final_log_output() =
begin
  let dxf_job_event_text_t job_info = [record
    dxf_src_dataset_id  dxf_src_dataset_id,  // Only set in partition 0.
    dxf_src_file_name   dxf_src_file_name,
    dxf_src_rec_cnt     v_record_count,
    dataset_start_dttm  start_time,
    dataset_end_dttm    now(),
  ];

  log_event.event_type :: "DXF Job Log: 0"; // We need to include a fake dataset ID for the rollup key that follows.
  log_event.event_text :: job_info.as_event_text();
end;
