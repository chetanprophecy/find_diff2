<AppConfTempl name="Get from Excel (Integration)" version="5" xsi:noNamespaceSchemaLocation="appconf_template.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ProjectRPath client_projects="all" template_project="false"/>
  <TemplateExpressionPackage><![CDATA[include "/~$PUB_DXF_XFR/ace_format.xfr";

/* Checks the given Application Configuration Name and returns an error message if there is a problem.
If there is no problem, an empty string is returned instead. */
out :: check_appconf(appconf_name) =
begin
  out :1: if ( not starts_with(appconf_name, "get.") )
    "This application configuration must be named: get.<i>something</i>.\n" +
    "Please close and rename it.";
  out :2: if ( string_filter(appconf_name, ".") != ".." )
    "This application configuration must be named:\n" +
    "get.<i>source_system</i>.<i>file_identifier</i>,\n" +
    "where <i>source_system</i> and <i>file_identifier</i>\n" +
    "must not contain periods (.).\n" +
    "Please close and rename it.";
  out :: "";
end;

out :: highlight_matching_files(path, matching_files)=
begin
  let string("\x01")[] file_list = directory_listing(path, "*.xls*");
  file_list = for(let file in file_list): if(file not member [vector ".", ".."] and not starts_with(file, ".")) file;
  file_list = for(let file in file_list): if(file member matching_files) "<b><font color='#00ff00'>" + file + "</font></b>" else file;

  out :: string_join(file_list, "\n");
end;

out :: get_file_list_with_matches(path, pattern)=
begin
  out :: highlight_matching_files(path, directory_listing(path, pattern));
end;

out :: fixed_font(str) =
begin
  out :: '<font face="courier,fixedsys,monospace,monaco,consolas">' + str + '</font>';
end;
]]></TemplateExpressionPackage>
  <Metadata>
    <Variables name="vars">
      <Variable name="errors" type="string"/>
      <ListVariable name="sample_file" type="string"/>
      <ListVariable name="matching_files" type="string"/>
      <Variable name="get_dml_present" type="boolean"/>
      <Variable name="source_system" type="string"/>
      <Variable name="hex_value_flag" type="boolean"/>
      <Variable name="lkp_flds" type="string"/>
      <Variable name="src_file_bkp_flag" type="boolean"/>
    </Variables>
    <Project name="get">
      <Pset name="get_excel" prototype_path="${AI_PSET}/get.excel.interim.pset">
        <PdlExpression name="PROJECT_DIR" expression="$PROJECT_DIR"/>
      </Pset>
    </Project>
    <SharedFile name="get_dml_file" path="" is_appconf_owned="true"/>
    <SharedFile name="clean_dml_file" path="" is_appconf_owned="true"/>
    <SharedFile name="source_dml_file" path="" is_appconf_owned="true"/>
    <SharedFile name="lookup_dml_file" path="" is_appconf_owned="true"/>
  </Metadata>
  <AutomaticAssignments>
    <Assignment>
      <SourceValue is_expression="true">check_appconf(built_in)</SourceValue>
      <TargetValue reference="vars.errors"/>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">string_split_no_empty(built_in, ".")[1]</SourceValue>
      <TargetValue reference="vars.source_system"/>
      <Condition is_expression="true">vars.errors == ""</Condition>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">"pset/get." + vars.source_system + "/" + built_in + ".pset"</SourceValue>
      <TargetValue reference="get.get_excel" property="relative_path"/>
      <Condition is_expression="true">vars.errors == "" and vars.source_system != ""</Condition>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">get.get_excel.PROJECT_DIR + "/dml/get." + get.get_excel.SOURCE_SYSTEM + "/get." + get.get_excel.SOURCE_NAME + ".dml"</SourceValue>
      <TargetValue reference="get_dml_file" property="path"/>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">length_of(get_dml_file.contents) &gt; 0</SourceValue>
      <TargetValue reference="vars.get_dml_present"/>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">re_replace(built_in, "^get[.]", "")</SourceValue>
      <TargetValue reference="get.get_excel.SOURCE_NAME"/>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">directory_listing(get.get_excel.INPUT_FILE_PATH, get.get_excel.INPUT_FILE_PATTERN)</SourceValue>
      <TargetValue reference="vars.matching_files"/>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">get.get_excel.CLEAN_DML_FILE</SourceValue>
      <TargetValue reference="clean_dml_file" property="path"/>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">get.get_excel.SOURCE_DML_FILE</SourceValue>
      <TargetValue reference="source_dml_file" property="path"/>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">get.get_excel.LOOKUP_DML_FILE</SourceValue>
      <TargetValue reference="lookup_dml_file" property="path"/>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">get.get_excel.CLEAN_DML</SourceValue>
      <TargetValue reference="clean_dml_file" property="contents"/>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">get.get_excel.SOURCE_DML</SourceValue>
      <TargetValue reference="source_dml_file" property="contents"/>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">get.get_excel.LOOKUP_DML</SourceValue>
      <TargetValue reference="lookup_dml_file" property="contents"/>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">"{" + re_replace(vars.lkp_flds, ",", ";") + "}"</SourceValue>
      <TargetValue reference="get.get_excel.LOOKUP_FIELDS_KEY"/>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">if(vars.src_file_bkp_flag) "False" else "True"</SourceValue>
      <TargetValue reference="get.get_excel.SOURCE_FILE_CLEAN_FLAG"/>
    </Assignment>
  </AutomaticAssignments>
  <UserInterface>
    <Toolbar>
      <ToolbarExecuteButton>
        <ExecutionTarget reference="get.get_excel"/>
        <UseOpConsoleIfAvailable>false</UseOpConsoleIfAvailable>
        <ErrorMessage>You must save this configuration before running it.</ErrorMessage>
      </ToolbarExecuteButton>
    </Toolbar>
    <Canvas>
      <Label>Main</Label>
      <Column>
        <Box>
          <Visible is_expression="true"><![CDATA[ vars.errors != "" ]]></Visible>
          <Style>mainSource</Style>
          <Label>Appconf Naming Error</Label>
          <UIElements>
            <TextLabel>
              <Label is_expression="true"><![CDATA[ "<b>" + vars.errors + "</b>" ]]></Label>
            </TextLabel>
          </UIElements>
        </Box>
      </Column>
      <Column>
        <Box>
          <Label>Input File Pattern</Label>
          <UIElements>
            <Spacer>
              <Width>100%</Width>
              <Height>25</Height>
            </Spacer>
            <TextLabel>
              <Label is_expression="true">"&lt;b&gt;File Pattern:&lt;/b&gt;\n" + get.get_excel.INPUT_FILE_PATTERN</Label>
            </TextLabel>
            <Popup>
              <Label>Edit pattern...</Label>
              <Title/>
              <UIElements>
                <TextInput>
                  <Label>Edit the pattern</Label>
                  <SourceTargetValue reference="get.get_excel.INPUT_FILE_PATTERN"/>
                </TextInput>
                <TextLabel>
                  <Label>&lt;font color='#ff9900'&gt;&lt;b&gt;Warning: Your file pattern does not end in ".xls" or ".xlsx". Make sure this is what you want.&lt;/b&gt;&lt;/font&gt;</Label>
                  <Visible is_expression="true">not is_blank(get.get_excel.INPUT_FILE_PATTERN) and
            not ends_with(get.get_excel.INPUT_FILE_PATTERN, "*") and
            not ends_with(string_upcase(get.get_excel.INPUT_FILE_PATTERN), ".xls")</Visible>
                </TextLabel>
                <TextLabel>
                  <Label is_expression="true">"File listing: (The entries in green are the ones that match the entered pattern)"</Label>
                </TextLabel>
                <TextLabel>
                  <Label is_expression="true">highlight_matching_files(get.get_excel.INPUT_FILE_PATH, vars.matching_files)</Label>
                </TextLabel>
              </UIElements>
            </Popup>
            <Spacer>
              <Width>100%</Width>
              <Height>25</Height>
            </Spacer>
            <Popup>
              <Label>Define Input Record Format</Label>
              <Title/>
              <UIElements>
                <RecordFormat>
                  <Label>Input Record Format</Label>
                  <SourceTargetValue reference="get_dml_file"/>
                  <CanModifyBusinessAttributes>none</CanModifyBusinessAttributes>
                  <CanRemoveFields>True</CanRemoveFields>
                  <CanReorderFields>True</CanReorderFields>
                  <ShowSampleDataArea>False</ShowSampleDataArea>
                  <SourceIsCompressed>False</SourceIsCompressed>
                  <CanModifyFields>True</CanModifyFields>
                  <CanDiscover>false</CanDiscover>
                  <CanCreate>false</CanCreate>
                  <Style>mapping</Style>
                  <!--<CanEnterDMLMode>True</CanEnterDMLMode>-->
                  <AssociatedSharedFile reference="get_dml_file"/>
                  <SampleDataPath is_expression="true">get.get_excel.INPUT_FILE_PATH + "/" + vars.matching_files[0]</SampleDataPath>
                </RecordFormat>
              </UIElements>
              <Style>mainSource</Style>
            </Popup>
            <Spacer>
              <Width>100%</Width>
              <Height>25</Height>
            </Spacer>
            <TextInput>
              <Label>Excel Sheet Index</Label>
              <SourceTargetValue reference="get.get_excel.SHEET_INDEX"/>
            </TextInput>
            <Spacer>
              <Width>100%</Width>
              <Height>25</Height>
            </Spacer>
            <RadioButtons>
              <Choices>
                <ConstantValue>Filename</ConstantValue>
                <ConstantValue>XLS_Content</ConstantValue>
                <ConstantValue>Both</ConstantValue>
              </Choices>
              <Label>Input Format</Label>
              <SourceTargetValue reference="get.get_excel.READ_EXCEL_FLOW_INPUT_FORMAT"/>
              <Description>If only filename is specified, then Read_Excel_Flow will read the specified filename. 

If only xls_content is specified, then Read_Excel_Flow will process the xls_content as though it contained the contents of an xls or xlsx file.  

If both filename and xls_content are specified, then Read_Excel_Flow will process the xls_content, and tag each output record with the specified filename.</Description>
            </RadioButtons>
            <Spacer>
              <Width>100%</Width>
              <Height>25</Height>
            </Spacer>
            <CheckBox>
              <Label>Avoid Archival of Source File(s)</Label>
              <SourceTargetValue reference="vars.src_file_bkp_flag"/>
              <Description>If enabled, files in Source location remain as-is. If not enabled, files are moved to processed directory.</Description>
            </CheckBox>
          </UIElements>
          <Style>mainSource</Style>
          <Visible is_expression="true">vars.errors == ""</Visible>
        </Box>
      </Column>
      <Column>
        <Box>
          <Label>Filter Records</Label>
          <UIElements>
            <CheckBox>
              <Label>Skip Header Record</Label>
              <SourceTargetValue reference="get.get_excel.HEADER_ROW_FLAG"/>
              <TrueValue>1</TrueValue>
              <FalseValue>0</FalseValue>
            </CheckBox>
            <Spacer>
              <Width>100%</Width>
              <Height>25</Height>
            </Spacer>
            <TextLabel>
              <Label is_expression="true">"&lt;b&gt;Filter Expression:&lt;/b&gt;\n" + get.get_excel.FILTER_EXPRESSION</Label>
            </TextLabel>
            <Popup>
              <Label>Edit filter expression...</Label>
              <Title/>
              <UIElements>
                <ExpressionEditor>
                  <Label>Filter Expression</Label>
                  <RecordFormat reference="get_dml_file"/>
                  <SourceTargetValue reference="get.get_excel.FILTER_EXPRESSION"/>
                </ExpressionEditor>
              </UIElements>
            </Popup>
            <CheckBox>
              <Label>Clean Hex Values</Label>
              <SourceTargetValue reference="vars.hex_value_flag"/>
              <FalseValue>False</FalseValue>
              <TrueValue>True</TrueValue>
            </CheckBox>
            <TextInput>
              <Label>Enter Cleanse Characters</Label>
              <SourceTargetValue reference="get.get_excel.CLEANSE_CHARECTERS"/>
              <Visible reference="vars.hex_value_flag"/>
            </TextInput>
          </UIElements>
          <Style>reduction</Style>
          <Visible reference="vars.get_dml_present"/>
        </Box>
      </Column>
      <Column>
        <Box>
          <Visible is_expression="true"><![CDATA[ vars.errors == "" and vars.get_dml_present == 1 ]]></Visible>
          <Style>recval</Style>
          <Label>Output</Label>
          <UIElements>
            <CheckBox>
              <Label>Produce a Source File for Cleansing</Label>
              <SourceTargetValue reference="get.get_excel.DO_SOURCE"/>
              <FalseValue>False</FalseValue>
              <TrueValue>True</TrueValue>
            </CheckBox>
            <CheckBox>
              <Label>Skip Validation, and Use as Clean</Label>
              <SourceTargetValue reference="get.get_excel.DO_CLEAN"/>
              <FalseValue>False</FalseValue>
              <TrueValue>True</TrueValue>
            </CheckBox>
            <CheckBox>
              <Label>Skip Validation, and Use as Lookup</Label>
              <SourceTargetValue reference="get.get_excel.DO_LOOKUP"/>
              <FalseValue>False</FalseValue>
              <TrueValue>True</TrueValue>
            </CheckBox>
          </UIElements>
        </Box>
        <Box>
          <Label>Lookup Fields and Key</Label>
          <UIElements>
            <TextLabel>
              <Label is_expression="true">"&lt;b&gt;Lookup Fields (Optional):&lt;/b&gt;\n" + get.get_excel.LOOKUP_FIELDS_KEY + "\n" +
"&lt;b&gt;Lookup Key:&lt;/b&gt;\n" + get.get_excel.LOOKUP_KEY</Label>
            </TextLabel>
            <Popup>
              <Label>Edit lookup fields(Optional)...</Label>
              <Title/>
              <UIElements>
                <FieldPicker>
                  <IsKey>false</IsKey>
                  <Label>Lookup Fields Picker</Label>
                  <RecordFormat reference="get_dml_file"/>
                  <SourceTargetValue reference="vars.lkp_flds"/>
                </FieldPicker>
              </UIElements>
            </Popup>
            <Popup>
              <Label>Edit lookup key...</Label>
              <Title/>
              <UIElements>
                <KeyPicker>
                  <Label>Lookup Key</Label>
                  <RecordFormat reference="lookup_dml_file"/>
                  <SourceTargetValue reference="get.get_excel.LOOKUP_KEY"/>
                </KeyPicker>
              </UIElements>
            </Popup>
          </UIElements>
          <Style>sort</Style>
          <Visible is_expression="true">(decimal(""))(get.get_excel.DO_LOOKUP == "1" or get.get_excel.DO_LOOKUP == "True") and vars.get_dml_present</Visible>
        </Box>
      </Column>
      <Column>
        <Box>
          <Visible is_expression="true"><![CDATA[ vars.errors == "" and vars.get_dml_present == 1 ]]></Visible>
          <Style>mapping</Style>
          <Label>Testing</Label>
          <UIElements>
            <ExecuteButton>
              <ButtonLabel>Run Test</ButtonLabel>
              <SourceValue reference="get.get_excel"/>
            </ExecuteButton>
            <Popup>
              <Visible is_expression="true">get.get_excel.SOURCE_FILE_URL != ""</Visible>
              <Label>View Source File...</Label>
              <Style>validation</Style>
              <Title>View Source File</Title>
              <UIElements>
                <ViewData>
                  <RecordFormat is_expression="true">expand_type(read_file(get.get_excel.SOURCE_DML_FILE))</RecordFormat>
                  <SourceIsCompressed is_expression="true">ends_with(get.get_excel.SOURCE_FILE_URL, ".gz")</SourceIsCompressed>
                  <SourceValue is_expression="true">get.get_excel.SOURCE_FILE_URL</SourceValue>
                </ViewData>
              </UIElements>
            </Popup>
            <Popup>
              <Visible is_expression="true">get.get_excel.CLEAN_FILE_URL != ""</Visible>
              <Label>View Clean File...</Label>
              <Style>validation</Style>
              <Title>View Clean File</Title>
              <UIElements>
                <ViewData>
                  <RecordFormat is_expression="true">expand_type(read_file(get.get_excel.CLEAN_DML_FILE))</RecordFormat>
                  <SourceIsCompressed is_expression="true">ends_with(get.get_excel.CLEAN_FILE_URL, ".gz")</SourceIsCompressed>
                  <SourceValue is_expression="true">get.get_excel.CLEAN_FILE_URL</SourceValue>
                </ViewData>
              </UIElements>
            </Popup>
            <Popup>
              <Visible is_expression="true">get.get_excel.LOOKUP_FILE_URL != ""</Visible>
              <Label>View Lookup File...</Label>
              <Style>validation</Style>
              <Title>View Lookup File</Title>
              <UIElements>
                <ViewData>
                  <RecordFormat is_expression="true">expand_type(read_file(get.get_excel.LOOKUP_DML_FILE))</RecordFormat>
                  <SourceValue is_expression="true">get.get_excel.LOOKUP_FILE_URL</SourceValue>
                </ViewData>
              </UIElements>
            </Popup>
          </UIElements>
        </Box>
      </Column>
    </Canvas>
    <Tab>
      <Label>Get PSET</Label>
      <UIElements>
        <TextLabel>
          <Label is_expression="true">"&lt;b&gt;" + get.get_excel.PROJECT_DIR + "/" + get.get_excel.relative_path + "&lt;/b&gt;"</Label>
          <ReadOnly>true</ReadOnly>
          <Width>1000</Width>
        </TextLabel>
        <TextLabel>
          <Label is_expression="true">read_file(get.get_excel.PROJECT_DIR + "/" + get.get_excel.relative_path)</Label>
          <Width>1000</Width>
        </TextLabel>
      </UIElements>
    </Tab>
    <Tab>
      <Label>Get DML</Label>
      <UIElements>
        <TextLabel>
          <Label is_expression="true">"&lt;b&gt;" + get.get_excel.GET_DML_FILE + "&lt;/b&gt;"</Label>
          <ReadOnly>true</ReadOnly>
        </TextLabel>
        <TextLabel>
          <Label is_expression="true">get.get_excel.GET_DML</Label>
          <ReadOnly>true</ReadOnly>
        </TextLabel>
      </UIElements>
    </Tab>
    <Tab>
      <Label>Output DML</Label>
      <UIElements>
        <TextLabel>
          <Label is_expression="true">"&lt;b&gt;" + get.get_excel.OUTPUT_DML_FILE + "&lt;/b&gt;"</Label>
          <ReadOnly>true</ReadOnly>
        </TextLabel>
        <TextLabel>
          <Label is_expression="true">get.get_excel.OUTPUT_DML</Label>
          <ReadOnly>true</ReadOnly>
        </TextLabel>
      </UIElements>
    </Tab>
    <Tab>
      <Label>Help</Label>
      <UIElements>
        <TextLabel>
          <Label>&lt;b&gt; Files are listed from INPUT_FILE_PATH parameter, which is usually set in interim pset.&lt;/b&gt;

&lt;b&gt; Input Format &lt;/b&gt;

If only filename is specified, then Read_Excel_Flow will read the specified filename. 

If only xls_content is specified, then Read_Excel_Flow will process the xls_content as though it contained the contents of an xls or xlsx file.  

If both filename and xls_content are specified, then Read_Excel_Flow will process the xls_content, and tag each output record with the specified filename.

&lt;b&gt;Recommended Option: Filename&lt;/b&gt;</Label>
        </TextLabel>
      </UIElements>
    </Tab>
  </UserInterface>
</AppConfTempl>