<AppConfTempl name="zz[DEPRECATED] Get from Datalake (Integration)" version="5" execution_model_version="2" xsi:noNamespaceSchemaLocation="appconf_template.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ProjectRPath client_projects="all" template_project="false"/>
  <TemplateExpressionPackage><![CDATA[include "/~$PUB_DXF_XFR/ace_format.xfr";

type book_schema_table_t =
record
  string(int) Book_Name;
  string(int) Source_Name;
end;

/* Checks the given Application Configuration Name and returns an error message if there is a problem.
If there is no problem, an empty string is returned instead. */
out :: check_appconf(appconf_name) =
begin
  
/*
  let string("") validate_book_nm = ""; 
  let len = length_of(string_split_no_empty(appconf_name, "."));
  let string("") bnames="";
  let string("")[int] blist=[vector];
  if(len > 2) 
  begin
      bnames=string_split_no_empty(appconf_name, ".")[2];
      if(string_index(bnames,"_") > 0)
      begin
          blist = string_split_no_empty(bnames, "_");
          for(let int i=0, i < length_of(blist))
          begin block chk_book
              if ( string_upcase(blist[i]) not member book_names ) 
              begin
                   validate_book_nm = "Syntax: <font color='#FF7F50'> <b>get.<i>systemname.bookname.source.system</i> (or) </i> get.<i>systemname.bookname.source.system.hist</i>\n</b></font>" +
	                       "This application configuration must have a existing book name. Multiple booknames should be separated by '_' \n" +
                            "Book name - <font color='#FF7F50'><b>'" + blist[i] + "'</b></font> is invalid. Allowed Book Names are: <font color='#FF7F50'><b>" + string_join(book_names, " ") +  "</b></font>\n" +
                            "Please close and rename it.";
                   exit chk_book;
              end;
              if( length_of(vector_search_all(blist, blist[i])) > 1 )
              begin
                   validate_book_nm = "Syntax: <font color='#FF7F50'> <b>get.<i>systemname.bookname.source.system</i> (or) </i> get.<i>systemname.bookname.source.system.hist</i>\n</b></font>" +
	                       "This application configuration should not have duplicate book names. Multiple booknames should be separated by '_' \n" +
                            "Book name - <font color='#FF7F50'><b>'" + blist[i] + "'</b></font> is duplicate. Allowed Book Names are: <font color='#FF7F50'><b>" + string_join(book_names, " ") +  "</b></font>\n" +
                            "Please close and rename it.";   
                  exit chk_book;
              end;       
          end block chk_book;
     
       end
       else if (string_upcase(bnames) not member book_names)
       begin
                   validate_book_nm = "Syntax: <font color='#FF7F50'> <b>get.<i>systemname.bookname.source.system</i> (or) </i> get.<i>systemname.bookname.source.system.hist</i>\n</b></font>" +
	                       "This application configuration must have a existing book name. Multiple booknames should be separated by '_' \n" +
                            "Book name - <font color='#FF7F50'><b>'" + bnames + "'</b></font> is invalid. Allowed Book Names are: <font color='#FF7F50'><b>" + string_join(book_names, " ") +  "</b></font>\n" +
                            "Please close and rename it.";
       end;
  
 
  end;*/

  out :1: if ( re_index(appconf_name, "[A-Z]") > 0)
      "Syntax: <font color='#FF7F50'><b>get.<i>source.system</i>\n</b></font>" + // (or) </i> get.<i>source.system.hist</i>\n</b></font>" +
      "This application configuration must be named in lowercase.\n" +
      "Please close and rename it.";
  out :2: if(length_of(string_filter(appconf_name, ".")) != 2 || not starts_with(appconf_name, "get.")) // || length_of(string_filter(appconf_name, ".")) > 5)
       "Syntax: <font color='#FF7F50'> <b>get.<i>source.system</i>\n</b></font>" + // (or) </i> get.<i>systemname.bookname.source.system.hist</i>\n</b></font>" +
       "This application configuration must be named as per above syntax.\n" +
       "Please close and rename it.";
//  out :3: if( not ends_with(string_split(appconf_name, ".")[1], "_dl")  )
//       "Syntax: <font color='#FF7F50'> <b>get.<i>source.system</i>\n</b></font>" + // (or) </i> get.<i>systemname.bookname.source.system.hist</i>\n</b></font>" +
//       "The source should be suffixed with <b><font color='#FF7F50'>_dl</font></b>\n" +
//       "This application configuration must be named as per above syntax.\n" +
//       "Please close and rename it.";
          //else if (ends_with(appconf_name,".hist") && length_of(string_filter(appconf_name, ".")) != 5)
          //     "Syntax: <font color='#FF7F50'> <b>get.<i>systemname.bookname.source.system</i> (or) </i> get.<i>systemname.bookname.source.system.hist</i>\n</b></font>" +
          //     "Please close and rename it."
          //else if(not ends_with(appconf_name,".hist") && length_of(string_filter(appconf_name, ".")) != 4)
          //     "Syntax: <font color='#FF7F50'> <b>get.<i>systemname.bookname.source.system</i> (or) </i> get.<i>systemname.bookname.source.system.hist</i>\n</b></font>" +
          //     "Please close and rename it.";
  //out :3: if ( not starts_with(appconf_name, "get.") )
  //   "Syntax: <font color='#FF7F50'> <b>get.<i>source.system</i>\n</b></font>" + //(or) </i> get.<i>systemname.bookname.source.system.hist</i>\n</b></font>" + 
  //   "This application configuration must be named as per above syntax.\n" +
  //   "Please close and rename it.";
  //out :4: if (string_split_no_empty(appconf_name, ".")[1] not member system_names )
  //   "Syntax: <font color='#FF7F50'> <b>get.<i>source.system</i>\n</b></font>" + // (or) </i> get.<i>systemname.bookname.source.system.hist</i>\n</b></font>" +
  //	"This application configuration must have a existing system name.\n" +
  //     "Allowed System Names are: <font color='#FF7F50'><b>" + string_join(system_names," ") + "</b></font>\n" +
  //     "Please close and rename it.";
  //out :5: if (not is_null(validate_book_nm)) validate_book_nm;
  out :: "";
end;


]]></TemplateExpressionPackage>
  <Metadata>
    <Project name="proj">
      <Pset name="get" prototype_path="$AI_PSET/get.datalake.interim.pset">
        <PdlExpression name="PROJECT_DIR" expression="$PROJECT_DIR"/>
      </Pset>
    </Project>
    <Variables name="vars">
      <Variable name="errors" type="string"/>
      <ListVariable name="selected_book_names" type="string"/>
      <ListVariable name="derived_book_names" type="string"/>
      <Variable name="source_name" type="string"/>
      <Variable name="lkp_flds" type="string"/>
      <Variable name="all_dml_file_chk" type="boolean"/>
      <Variable name="table_name" type="string"/>
      <Variable name="watermark_file_chk" type="string"/>
      <Variable name="configuration_valid" type="boolean"/>
      <ListVariable name="src_book_schema_table" type="compound">
        <Variable name="Book_Name" type="string"/>
        <Variable name="Source_Name" type="string"/>
      </ListVariable>
      <Variable name="schema_table_errors" type="string"/>
    </Variables>
    <SharedFile name="source_dml_file" path="" auto_lock="true"/>
    <SharedFile name="clean_dml_file" path="" auto_lock="true"/>
    <SharedFile name="lookup_dml_file" path="" auto_lock="true"/>
  </Metadata>
  <AutomaticAssignments>
    <Assignment name="check application config">
      <SourceValue is_expression="true">check_appconf(built_in)</SourceValue>
      <TargetValue reference="vars.errors"/>
    </Assignment>
    <Assignment name="watermark file check">
      <SourceValue is_expression="true">if(not file_information(proj.get.LAST_EXTRACT_TIMESTAMP_FILE_NAME).found )
"&lt;font color='#00BFFF'&gt;&lt;b&gt;" + proj.get.LAST_EXTRACT_TIMESTAMP_FILE_NAME + "&lt;/b&gt;&lt;/font&gt; file is missing to extract START_DTTM. \n\nPlease note date value should be in &lt;b&gt;&lt;font color='#00BFFF'&gt;YYYYMMDD&lt;/font&gt;&lt;/b&gt;" + "&lt;b&gt;&lt;font color='#FF0000'&gt;T&lt;/font&gt;&lt;/b&gt;" + "&lt;b&gt;&lt;font color='#00BFFF'&gt;HH24MISS&lt;/font&gt;&lt;/b&gt; format."
else
""</SourceValue>
      <TargetValue reference="vars.watermark_file_chk"/>
    </Assignment>
    <Assignment name="target name">
      <SourceValue is_expression="true">string_join(vector_slice(string_split(built_in, "."),1,2), ".")</SourceValue>
      <TargetValue reference="proj.get.TARGET_NAME"/>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">"pset/get." + proj.get.TARGET_SYSTEM + "/get." + proj.get.TARGET_NAME + ".pset"</SourceValue>
      <TargetValue reference="proj.get" property="relative_path"/>
    </Assignment>
    <Assignment>
      <SourceValue reference="proj.get.DATALAKE_BOOK_NM_DERIVED"/>
      <TargetValue reference="vars.derived_book_names" property="value"/>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">if( (decimal(""))proj.get.DO_SOURCE == 1  &amp;&amp; (decimal(""))proj.get.DO_CLEAN == 1 &amp;&amp; (decimal(""))proj.get.DO_LOOKUP == 1  ) 
 file_information(proj.get.SOURCE_DML_FILE).found &amp;&amp; file_information(proj.get.CLEAN_DML_FILE).found &amp;&amp; file_information(proj.get.LOOKUP_DML_FILE).found
else if( (decimal(""))proj.get.DO_SOURCE == 1  &amp;&amp; (decimal(""))proj.get.DO_CLEAN == 1 ) 
 file_information(proj.get.SOURCE_DML_FILE).found &amp;&amp; file_information(proj.get.CLEAN_DML_FILE).found
else if( (decimal(""))proj.get.DO_SOURCE == 1  &amp;&amp; (decimal(""))proj.get.DO_LOOKUP == 1 ) 
 file_information(proj.get.SOURCE_DML_FILE).found &amp;&amp; file_information(proj.get.LOOKUP_DML_FILE).found
else if( (decimal(""))proj.get.DO_LOOKUP == 1  &amp;&amp; (decimal(""))proj.get.DO_CLEAN == 1 ) 
 file_information(proj.get.LOOKUP_DML_FILE).found &amp;&amp; file_information(proj.get.CLEAN_DML_FILE).found
else if( (decimal(""))proj.get.DO_SOURCE == 1) 
 file_information(proj.get.SOURCE_DML_FILE).found
else if( (decimal(""))proj.get.DO_CLEAN == 1) 
 file_information(proj.get.CLEAN_DML_FILE).found
else if( (decimal(""))proj.get.DO_LOOKUP == 1) 
 file_information(proj.get.LOOKUP_DML_FILE).found
else
  2</SourceValue>
      <TargetValue reference="vars.all_dml_file_chk"/>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">string_join(vars.selected_book_names, ",")</SourceValue>
      <TargetValue reference="proj.get.DATALAKE_BOOK_NM"/>
    </Assignment>
    <Assignment name="assign source name">
      <SourceValue is_expression="true">string_join(for (let t in vars.src_book_schema_table) :  string_downcase(t.Source_Name), ",")</SourceValue>
      <TargetValue reference="proj.get.SOURCE_NAME"/>
    </Assignment>
    <Assignment name="Check All">
      <SourceValue is_expression="true">vars.errors == "" &amp;&amp; vars.watermark_file_chk == "" &amp;&amp; vars.all_dml_file_chk == 1 &amp;&amp;  ( 
		( (decimal("")) proj.get.DO_SOURCE == 1) ||
		( (decimal("")) proj.get.DO_CLEAN == 1) ||
		( (decimal("")) proj.get.DO_LOOKUP == 1) 
	)</SourceValue>
      <TargetValue reference="vars.configuration_valid"/>
    </Assignment>
    <Assignment>
      <SourceValue reference="proj.get.SOURCE_DML_FILE"/>
      <TargetValue reference="source_dml_file" property="path"/>
    </Assignment>
    <Assignment>
      <SourceValue reference="proj.get.CLEAN_DML_FILE"/>
      <TargetValue reference="clean_dml_file" property="path"/>
    </Assignment>
    <Assignment>
      <SourceValue reference="proj.get.LOOKUP_DML_FILE"/>
      <TargetValue reference="lookup_dml_file" property="path"/>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">begin
let book_schema_table_t[int] old_src = vars.src_book_schema_table;
let string(int) schema_name;


result :: for (let book_nm in vars.selected_book_names)
          begin
            schema_name="";
            for (let obj in old_src) 
                if(book_nm == obj.Book_Name &amp;&amp; obj.Source_Name != "") 
                   schema_name = obj.Source_Name;
          end
          :  [record Book_Name book_nm
                    Source_Name schema_name
             ];
end</SourceValue>
      <TargetValue reference="vars.src_book_schema_table"/>
    </Assignment>
    <Assignment>
      <SourceValue is_expression="true">begin
let book_schema_table_t[int] src = vars.src_book_schema_table;
let no_schema_name_vec = for (let obj in src) : if((decimal(""))length_of(string_filter(obj.Source_Name, ".")) != 1 || re_replace(obj.Source_Name, "[.].*", "") == "") obj.Book_Name;
let no_table_name_vec = for (let obj in src) : if(re_replace(obj.Source_Name, ".*[.]", "") == "") obj.Book_Name;
let string(int) schema_error_msg = if (length_of(no_schema_name_vec) &gt; 0) "Please provide a Source Name(schema.table) for:\n" + string_join(no_schema_name_vec, ",\n") else "";
let string(int) table_error_msg = if (length_of(no_table_name_vec) &gt; 0) "Please provide a Table Name for:\n" + string_join(no_table_name_vec, ",\n") else "";
result :: if(schema_error_msg != "") schema_error_msg 
          else if(table_error_msg != "")table_error_msg
          else "";
end</SourceValue>
      <TargetValue reference="vars.schema_table_errors"/>
    </Assignment>
  </AutomaticAssignments>
  <InitialAssignments>
    <Assignment>
      <ConstantValue/>
      <TargetValue reference="vars.all_dml_file_chk"/>
    </Assignment>
  </InitialAssignments>
  <UserInterface>
    <Toolbar>
      <ToolbarExecuteButton>
        <ExecutionTarget reference="proj.get"/>
        <UseOpConsoleIfAvailable>false</UseOpConsoleIfAvailable>
        <Enabled is_expression="true">vars.configuration_valid</Enabled>
        <Description is_expression="true">if (vars.configuration_valid)
        "Unload the data from different books in datalake"
      else if(vars.errors != "")
        "This Run button is disabled until you name the configuration correctly."
	  else if(vars.watermark_file_chk != "")
		"This Run button is disabled until you have the watermark file present"
      else if(vars.all_dml_file_chk == 0)
		"This Run button is disabled until you have the dml file present"</Description>
        <ErrorMessage is_expression="true">if (vars.configuration_valid)
        ""
      else if(vars.errors != "")
        "This Run button is disabled until you name the configuration correctly."
	  else if(vars.watermark_file_chk != "")
		"This Run button is disabled until you have the watermark file present"
      else if(vars.all_dml_file_chk == 0)
		"This Run button is disabled until you have the dml file present.
        Edit the application configuration, complete all parts of the
        workflow, and save the application configuration."</ErrorMessage>
      </ToolbarExecuteButton>
    </Toolbar>
    <Canvas>
      <Label>Main</Label>
      <Column>
        <Box>
          <Label>Appconf Error(s)</Label>
          <UIElements>
            <TextLabel>
              <Label reference="vars.errors"/>
              <Visible is_expression="true">vars.errors != ""</Visible>
            </TextLabel>
          </UIElements>
          <Style>mainSource</Style>
          <Visible is_expression="true">vars.errors != ""</Visible>
        </Box>
      </Column>
      <Column>
        <Box>
          <Label>Datalake Input Properties</Label>
          <UIElements>
            <CheckBox>
              <Label>Pick manual file list from Trigger File</Label>
              <SourceTargetValue reference="proj.get.USE_LOCAL_CTL"/>
              <FalseValue>N</FalseValue>
              <TrueValue>Y</TrueValue>
              <Description>Tick this checkbox if you want to set "USE_LOCAL_CTL" to "Y"</Description>
            </CheckBox>
            <Spacer>
              <Width>100%</Width>
              <Height>25</Height>
            </Spacer>
            <Box>
              <Label>Pick Datalake Source Type</Label>
              <UIElements>
                <RadioButtons>
                  <Choices>
                    <ConstantValue>datalake</ConstantValue>
                    <ConstantValue>local</ConstantValue>
                  </Choices>
                  <Label>Radio Buttons</Label>
                  <SourceTargetValue reference="proj.get.DATALAKE_SOURCE_TYPE"/>
                </RadioButtons>
              </UIElements>
              <Style>inner</Style>
            </Box>
          </UIElements>
          <Style>mainSource</Style>
        </Box>
        <Box>
          <UIElements>
            <MultiChoiceList>
              <Choices reference="proj.get.DATALAKE_AVAILABLE_BOOK_NAMES"/>
              <Label>Choose Book Name(s) from the following choice(s):</Label>
              <SourceTargetValue reference="vars.selected_book_names"/>
            </MultiChoiceList>
            <Spacer>
              <Width>100%</Width>
              <Height>25</Height>
            </Spacer>
            <TextLabel>
              <Label is_expression="true">bold("Book(s) Selected :\n") + string_join(vars.selected_book_names, "\n")</Label>
              <Visible is_expression="true">vars.selected_book_names != [vector]</Visible>
            </TextLabel>
          </UIElements>
          <Visible is_expression="true">vars.errors == ""</Visible>
          <Label>Book Names(s)</Label>
          <Style>mainSource</Style>
        </Box>
      </Column>
      <Column>
        <Box>
          <UIElements>
            <Spacer>
              <Width>100%</Width>
              <Height>25</Height>
            </Spacer>
            <ForEach list_reference="vars.src_book_schema_table" item="book_item">
              <UIElements>
                <TextInput>
                  <Label is_expression="true">"Enter " + book_item.Book_Name + "'s SourceName (SchemaName.TableName):"</Label>
                  <SourceTargetValue reference="book_item.Source_Name"/>
                </TextInput>
              </UIElements>
            </ForEach>
            <Spacer>
              <Width>100%</Width>
              <Height>25</Height>
            </Spacer>
            <TextLabel>
              <Label is_expression="true">"&lt;font color='#FF6600'&gt;&lt;b&gt;Error(s) : &lt;/b&gt;&lt;/font&gt;" + vars.schema_table_errors</Label>
              <Visible is_expression="true">vars.schema_table_errors!= ""</Visible>
            </TextLabel>
          </UIElements>
          <Style>inner</Style>
          <Visible is_expression="true">vars.errors == "" &amp;&amp; vars.selected_book_names != [vector]</Visible>
          <Label is_expression="true">"&lt;b&gt;Source System Name:&lt;/b&gt;"</Label>
        </Box>
      </Column>
      <Column>
        <Box>
          <Label>Watermark Error:</Label>
          <Visible is_expression="true">vars.watermark_file_chk != ""</Visible>
          <UIElements>
            <TextLabel>
              <Label reference="vars.watermark_file_chk"/>
            </TextLabel>
          </UIElements>
        </Box>
      </Column>
      <Column>
        <Box>
          <Style>recval</Style>
          <Label>Output</Label>
          <UIElements>
            <CheckBox>
              <Label>Produce a Source File for Cleansing</Label>
              <SourceTargetValue reference="proj.get.DO_SOURCE"/>
              <TrueValue>1</TrueValue>
              <FalseValue>0</FalseValue>
            </CheckBox>
            <CheckBox>
              <Label>Skip Cleansing, and Produce a Clean File</Label>
              <SourceTargetValue reference="proj.get.DO_CLEAN"/>
              <TrueValue>1</TrueValue>
              <FalseValue>0</FalseValue>
            </CheckBox>
            <CheckBox>
              <Label>Skip Cleansing, and Produce a Lookup</Label>
              <SourceTargetValue reference="proj.get.DO_LOOKUP"/>
              <TrueValue>1</TrueValue>
              <FalseValue>0</FalseValue>
            </CheckBox>
            <TextLabel>
              <Visible is_expression="true">(decimal(""))proj.get.DO_SOURCE + (decimal(""))proj.get.DO_CLEAN + (decimal(""))proj.get.DO_LOOKUP != 1</Visible>
              <Label is_expression="true">bold("Note: Typically, only one of these should be selected.")</Label>
            </TextLabel>
          </UIElements>
          <Visible is_expression="true">vars.errors == "" &amp;&amp; vars.watermark_file_chk == ""</Visible>
        </Box>
        <Box>
          <Visible is_expression="true">vars.errors == "" &amp;&amp; vars.watermark_file_chk == "" and proj.get.DO_LOOKUP != "0"</Visible>
          <Style>sort</Style>
          <Label>Lookup</Label>
          <UIElements>
            <Popup>
              <Label>Optional: Set Lookup Key...</Label>
              <Style>key</Style>
              <Description>Set the lookup key, which will force sorting and deduplication.  This is especially useful for dated (interval) lookups.  For simple (exact) lookups, this is not needed unless you want sorting.</Description>
              <Title>Set Lookup Key</Title>
              <UIElements>
                <KeyPicker>
                  <Label>Lookup Key</Label>
                  <ShowOrderColumn>false</ShowOrderColumn>
                  <ShowSpecialColumn>true</ShowSpecialColumn>
                  <RecordFormat is_expression="true">read_file(proj.get.LOOKUP_DML_FILE)</RecordFormat>
                  <SourceTargetValue reference="proj.get.LOOKUP_KEY"/>
                </KeyPicker>
              </UIElements>
            </Popup>
            <Popup>
              <Style>key</Style>
              <Label>Optional: Set Extra Dedup Sort Key Fields...</Label>
              <Title>Set Extra Dedup Sort Key Fields</Title>
              <Description>Set the extra keys (in addition to the lookup key, minus any interval_top field) used to pick the "best" surviving record among duplicates.</Description>
              <UIElements>
                <TextLabel>
                  <Label>These fields should be driven by your business requirements.  You should also consider favoring newer records over older ones and shorter intervals over longer.</Label>
                </TextLabel>
                <KeyPicker>
                  <Label>Extra Dedup Sort Key</Label>
                  <RecordFormat is_expression="true">read_file(proj.get.LOOKUP_DML_FILE)</RecordFormat>
                  <SourceTargetValue reference="proj.get.EXTRA_DEDUP_SORT_KEY"/>
                </KeyPicker>
              </UIElements>
            </Popup>
            <Spacer>
              <Height>12</Height>
            </Spacer>
            <Box>
              <Visible is_expression="true">proj.get.LOOKUP_KEY != ""</Visible>
              <Style>inner</Style>
              <Label>Lookup Key</Label>
              <UIElements>
                <TextLabel>
                  <Width>350</Width>
                  <Label is_expression="true">show_key(proj.get.LOOKUP_KEY, read_file(proj.get.LOOKUP_DML_FILE))</Label>
                  <Style>inner</Style>
                </TextLabel>
              </UIElements>
            </Box>
            <Box>
              <Visible is_expression="true">proj.get.EXTRA_DEDUP_SORT_KEY != ""</Visible>
              <Style>inner</Style>
              <Label>Extra Dedup Sort Key</Label>
              <UIElements>
                <TextLabel>
                  <Width>350</Width>
                  <Label is_expression="true">show_key(proj.get.EXTRA_DEDUP_SORT_KEY, read_file(proj.get.LOOKUP_DML_FILE))</Label>
                  <Style>inner</Style>
                </TextLabel>
              </UIElements>
            </Box>
            <Box>
              <Visible is_expression="true">proj.get.DEDUP_SORT_KEY != ""</Visible>
              <Style>inner</Style>
              <Label>Dedup Sort Key</Label>
              <UIElements>
                <TextLabel>
                  <Width>350</Width>
                  <Label is_expression="true">show_key(proj.get.DEDUP_SORT_KEY, read_file(proj.get.LOOKUP_DML_FILE))</Label>
                  <Style>inner</Style>
                </TextLabel>
              </UIElements>
            </Box>
          </UIElements>
        </Box>
      </Column>
      <Column>
        <Box>
          <Label is_expression="true">"DML Error(s):"</Label>
          <UIElements>
            <TextLabel>
              <Label is_expression="true">"Source DML &lt;font color='#00BFFF'&gt;&lt;b&gt;" + proj.get.SOURCE_DML_FILE + "&lt;/b&gt;&lt;/font&gt; not Present"</Label>
              <Visible is_expression="true">proj.get.DO_SOURCE != "0" and file_information(proj.get.SOURCE_DML_FILE).found</Visible>
            </TextLabel>
            <TextLabel>
              <Label is_expression="true">"Clean DML &lt;font color='#00BFFF'&gt;&lt;b&gt;" + proj.get.CLEAN_DML_FILE + "&lt;/b&gt;&lt;/font&gt; not Present"</Label>
              <Visible is_expression="true">proj.get.DO_CLEAN != "0" and file_information(proj.get.CLEAN_DML_FILE).found</Visible>
            </TextLabel>
            <TextLabel>
              <Label is_expression="true">"Lookup DML &lt;font color='#00BFFF'&gt;&lt;b&gt;" + proj.get.LOOKUP_DML_FILE + "&lt;/b&gt;&lt;/font&gt; not Present"</Label>
              <Visible is_expression="true">proj.get.DO_LOOKUP != "0" and file_information(proj.get.LOOKUP_DML_FILE).found</Visible>
            </TextLabel>
          </UIElements>
          <Style>inner</Style>
          <Visible is_expression="true">(vars.errors == "" &amp;&amp; vars.watermark_file_chk == "" &amp;&amp; vars.all_dml_file_chk member [vector 0, 2])</Visible>
        </Box>
      </Column>
      <Column>
        <Box>
          <Visible is_expression="true">vars.errors == "" &amp;&amp; vars.watermark_file_chk == "" &amp;&amp; vars.all_dml_file_chk == 1 &amp;&amp;  ( 
( (decimal("")) proj.get.DO_SOURCE == 1) ||
( (decimal("")) proj.get.DO_CLEAN == 1) ||
( (decimal("")) proj.get.DO_LOOKUP == 1) 
)</Visible>
          <Style>mapping</Style>
          <Label>Testing</Label>
          <UIElements>
            <ExecuteButton>
              <Label>Remember: Save before you run.</Label>
              <ButtonLabel>Run Get</ButtonLabel>
              <SourceValue reference="proj.get"/>
            </ExecuteButton>
            <Popup>
              <Visible is_expression="true">proj.get.SOURCE_FILE_URL != ""</Visible>
              <Label>View Source File...</Label>
              <Style>validation</Style>
              <Title>View Source File</Title>
              <UIElements>
                <ViewData>
                  <RecordFormat is_expression="true">read_file(proj.get.SOURCE_DML_FILE)</RecordFormat>
                  <SourceIsCompressed/>
                  <SourceValue reference="proj.get.SOURCE_FILE_URL"/>
                </ViewData>
              </UIElements>
            </Popup>
            <Popup>
              <Visible is_expression="true">proj.get.CLEAN_FILE_URL != ""</Visible>
              <Label>View Clean File...</Label>
              <Style>validation</Style>
              <Title>View Clean File</Title>
              <UIElements>
                <ViewData>
                  <RecordFormat is_expression="true">read_file(proj.get.CLEAN_DML_FILE)</RecordFormat>
                  <SourceIsCompressed/>
                  <SourceValue reference="proj.get.CLEAN_FILE_URL"/>
                </ViewData>
              </UIElements>
            </Popup>
            <Popup>
              <Visible is_expression="true">proj.get.LOOKUP_FILE_URL != ""</Visible>
              <Label>View Lookup File...</Label>
              <Style>validation</Style>
              <Title>View Lookup File</Title>
              <UIElements>
                <ViewData>
                  <RecordFormat is_expression="true">read_file(proj.get.LOOKUP_DML_FILE)</RecordFormat>
                  <SourceValue reference="proj.get.LOOKUP_FILE_URL"/>
                </ViewData>
              </UIElements>
            </Popup>
          </UIElements>
        </Box>
      </Column>
    </Canvas>
    <Tab>
      <Visible is_expression="true">proj.get.DATALAKE_DATA_FILE_DML != ""</Visible>
      <Label>Metadata Generated DML</Label>
      <UIElements>
        <TextLabel>
          <Width>1000</Width>
          <Label is_expression="true">fixed_font(proj.get.DATALAKE_DATA_FILE_DML)</Label>
          <ReadOnly>true</ReadOnly>
        </TextLabel>
      </UIElements>
    </Tab>
    <Tab>
      <Visible is_expression="true">proj.get.DO_SOURCE != "0" and file_information(proj.get.SOURCE_DML_FILE).found</Visible>
      <Label>Source DML</Label>
      <UIElements>
        <TextLabel>
          <Width>1000</Width>
          <Label is_expression="true">bold("Source DML File Name - \n") + proj.get.SOURCE_DML_FILE</Label>
          <ReadOnly>true</ReadOnly>
        </TextLabel>
        <TextLabel>
          <Width>1000</Width>
          <Label is_expression="true">bold("Source DML - \n") + fixed_font(read_file(proj.get.SOURCE_DML_FILE))</Label>
          <ReadOnly>true</ReadOnly>
        </TextLabel>
      </UIElements>
    </Tab>
    <Tab>
      <Visible is_expression="true">proj.get.DO_CLEAN != "0" and file_information(proj.get.CLEAN_DML_FILE).found</Visible>
      <Label>Clean DML</Label>
      <UIElements>
        <TextLabel>
          <Width>1000</Width>
          <Label is_expression="true">bold("Clean DML File Name - \n") + proj.get.CLEAN_DML_FILE</Label>
          <ReadOnly>true</ReadOnly>
        </TextLabel>
        <TextLabel>
          <Width>1000</Width>
          <Label is_expression="true">bold("Clean DML - \n") + fixed_font(read_file(proj.get.CLEAN_DML_FILE))</Label>
          <ReadOnly>true</ReadOnly>
        </TextLabel>
      </UIElements>
    </Tab>
    <Tab>
      <Visible is_expression="true">proj.get.DO_LOOKUP != "0" and file_information(proj.get.LOOKUP_DML_FILE).found</Visible>
      <Label>Lookup DML</Label>
      <UIElements>
        <TextLabel>
          <Width>1000</Width>
          <Label is_expression="true">bold("Lookup DML File Name - \n") + proj.get.LOOKUP_DML_FILE</Label>
          <ReadOnly>true</ReadOnly>
        </TextLabel>
        <TextLabel>
          <Width>1000</Width>
          <Label is_expression="true">bold("Lookup DML - \n") + fixed_font(read_file(proj.get.LOOKUP_DML_FILE))</Label>
          <ReadOnly>true</ReadOnly>
        </TextLabel>
      </UIElements>
    </Tab>
    <Tab>
      <Label>Get PSet</Label>
      <UIElements>
        <TextLabel>
          <Label is_expression="true">bold(proj.get.PROJECT_DIR + "/" + proj.get.relative_path)</Label>
          <ReadOnly>true</ReadOnly>
        </TextLabel>
        <TextLabel>
          <Label is_expression="true">first_without_error(
            fixed_font(read_file(proj.get.PROJECT_DIR + "/" + proj.get.relative_path)),
            "No pset is available until the configuration is saved.")</Label>
          <ReadOnly>true</ReadOnly>
        </TextLabel>
      </UIElements>
    </Tab>
    <Tab>
      <Label>File List</Label>
      <UIElements>
        <TextLabel>
          <Width>1075</Width>
          <Label is_expression="true">bold("Watermark File Name - ") + proj.get.LAST_EXTRACT_TIMESTAMP_FILE_NAME + 
bold("\nStart Timestamp - ") + proj.get.START_DTTM + 
bold("\nEnd Timestamp- ") + proj.get.END_DTTM +
//bold("\n\nFile list to be processed:\n") + proj.get.FILE_LIST_TO_PROCESS + 
//bold("\n\nControl File List:\n")  + proj.get.CTL_FILE_LIST + 
//bold("\n\nMeta File List:\n")  + proj.get.META_FILE_LIST + 
bold("\n\nData File List:\n")  + proj.get.DATA_FILE_LIST</Label>
        </TextLabel>
      </UIElements>
    </Tab>
  </UserInterface>
</AppConfTempl>
